namespace app::rfl {
    struct DecoConfigParam {
        csl::ut::Color<uint8_t> clientColor;
        uint8_t windowAlpha;
        csl::ut::Color<uint8_t> startGradationGuideColor;
        csl::ut::Color<uint8_t> endGradationGuideColor;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoConfigParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoConfigParam* pInstance);
        static void Clean(DecoConfigParam* pInstance);
    };

    struct DecoBlurParam {
        int32_t radius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoBlurParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoBlurParam* pInstance);
        static void Clean(DecoBlurParam* pInstance);
    };

    struct DecoGradationParam {
        enum class Orientation : int8_t {
            ORIENTATION_NONE = 0,
            ORIENTATION_HORIZONTAL = 1,
            ORIENTATION_VERTICAL = 2,
            ORIENTATION_DIAGONAL = 3,
        };

        Orientation orientation;
        int8_t srcPosX;
        int8_t srcPosY;
        int8_t dstPosX;
        int8_t dstPosY;
        csl::ut::Color<uint8_t> srcColor;
        csl::ut::Color<uint8_t> dstColor;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoGradationParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoGradationParam* pInstance);
        static void Clean(DecoGradationParam* pInstance);
    };

    struct DecoDropShadowParam {
        csl::ut::Color<uint8_t> color;
        uint8_t size;
        uint8_t spread;
        int8_t distanceX;
        int8_t distanceY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoDropShadowParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoDropShadowParam* pInstance);
        static void Clean(DecoDropShadowParam* pInstance);
    };

    struct DecoRimParam {
        csl::ut::Color<uint8_t> color;
        int32_t thickness;
        int32_t offsetX;
        int32_t offsetY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoRimParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoRimParam* pInstance);
        static void Clean(DecoRimParam* pInstance);
    };

    struct DecoPassParam {
        DecoDropShadowParam dropShadow;
        DecoRimParam rim;
        DecoGradationParam gradation;
        DecoBlurParam blur;
        bool avoidEdgeArtifact;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoPassParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoPassParam* pInstance);
        static void Clean(DecoPassParam* pInstance);
    };

    struct DecoTechParam {
        enum class DecoLayerBlendOp : int8_t {
            DECO_LAYER_BLEND_OP_BLEND = 0,
            DECO_LAYER_BLEND_OP_SUBTRACT_ALPHA = 1,
        };

        csl::ut::VariableString name;
        csl::ut::Color<uint8_t> fontColor;
        DecoGradationParam fontGradParam;
        DecoLayerBlendOp layerBlendOp;
        int32_t numPasses;
        DecoPassParam passParams[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoTechParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoTechParam* pInstance);
        static void Clean(DecoTechParam* pInstance);
    };

    struct DecoTechParams {
        DecoTechParam params[512];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DecoTechParams* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DecoTechParams* pInstance);
        static void Clean(DecoTechParams* pInstance);
    };

    struct Agent {
        float radius;
        float height;
        float maxClimb;
        float maxSlope;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Agent* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Agent* pInstance);
        static void Clean(Agent* pInstance);
    };

    struct OffMeshLinkElement {
        enum class OffMeshLinkDirection : uint8_t {
            OffMeshLinkUnidirectional = 0,
            OffMeshLinkBidirectional = 1,
        };

        csl::math::Vector3 source;
        csl::math::Vector3 destination;
        float radius;
        uint16_t flags;
        uint8_t area;
        OffMeshLinkDirection direction;
        uint32_t userID;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OffMeshLinkElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OffMeshLinkElement* pInstance);
        static void Clean(OffMeshLinkElement* pInstance);
    };

    struct Filtering {
        bool lowHangingObstacles;
        bool ledgeSpans;
        bool walkableLowHeightSpans;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Filtering* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Filtering* pInstance);
        static void Clean(Filtering* pInstance);
    };

    struct Tiling {
        float size;
        int32_t maxTiles;
        bool cache;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Tiling* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Tiling* pInstance);
        static void Clean(Tiling* pInstance);
    };

    struct StatsDataValue {
        enum class StatsType : int32_t {
            TYPE_INVALID = 0,
            TYPE_UINT64 = 1,
            TYPE_UINT32 = 2,
            TYPE_SINT32 = 3,
            TYPE_FLOAT = 4,
        };

        StatsType type;
        uint64_t value;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StatsDataValue* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StatsDataValue* pInstance);
        static void Clean(StatsDataValue* pInstance);
    };

    struct StatsDataContainer {
        csl::ut::Array<StatsDataValue> data;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StatsDataContainer* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StatsDataContainer* pInstance);
        static void Clean(StatsDataContainer* pInstance);
    };

    struct FxSunPosAngle {
        float azimuthAngle;
        float elevationAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSunPosAngle* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSunPosAngle* pInstance);
        static void Clean(FxSunPosAngle* pInstance);
    };

    struct FxSunPosEarth {
        float azimuthAngle;
        float latitude;
        float longitude;
        int32_t month;
        int32_t day;
        float time;
        bool enableAnimation;
        float animationSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSunPosEarth* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSunPosEarth* pInstance);
        static void Clean(FxSunPosEarth* pInstance);
    };

    struct FxSun {
        enum class SunPosType : int8_t {
            SUN_POS_TYPE_NONE = 0,
            SUN_POS_TYPE_ANGLE = 1,
            SUN_POS_TYPE_EARTH = 2,
        };

        float solarRadiusScale;
        SunPosType sunPosType;
        FxSunPosAngle posTypeAngle;
        FxSunPosEarth posTypeEarth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSun* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSun* pInstance);
        static void Clean(FxSun* pInstance);
    };

    struct FxMoon {
        enum class MoonPosType : int8_t {
            MOON_POS_TYPE_NONE = 0,
            MOON_POS_TYPE_INV_SUN = 1,
            MOON_POS_TYPE_EARTH = 2,
        };

        MoonPosType moonPosType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxMoon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxMoon* pInstance);
        static void Clean(FxMoon* pInstance);
    };

    struct FxSkyCommon {
        enum class SkyModel : int8_t {
            BRUNETON = 0,
            SEBASTIEN = 1,
        };

        SkyModel skyModel;
        float illuminanceScale;
        bool enableScattering;
        float scatteringRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSkyCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSkyCommon* pInstance);
        static void Clean(FxSkyCommon* pInstance);
    };

    struct FxManualHeightFog {
        csl::math::Vector3 sunColor;
        csl::math::Vector3 ambColor;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxManualHeightFog* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxManualHeightFog* pInstance);
        static void Clean(FxManualHeightFog* pInstance);
    };

    struct FxHeightFog {
        bool enable;
        bool enableFogMap;
        float heightScale;
        float distanceOffset;
        float distanceScale;
        csl::math::Vector3 rayleighScale;
        csl::math::Vector3 mieScale;
        float noiseBlend;
        float noiseScale;
        float noiseDistance;
        float animationSpeed;
        float animationAngle;
        bool isAtmospheric;
        FxManualHeightFog manualFog;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxHeightFog* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxHeightFog* pInstance);
        static void Clean(FxHeightFog* pInstance);
    };

    struct FxSebastienSky {
        float miePhaseFunctionG;
        csl::ut::Color<uint8_t> mieScatteringColor;
        csl::math::Vector4 mieScatteringColorOffset;
        float mieScatteringScale;
        csl::ut::Color<uint8_t> mieAbsorptionColor;
        csl::math::Vector4 mieAbsorptionColorOffset;
        float mieAbsorptionScale;
        csl::ut::Color<uint8_t> rayleighScatteringColor;
        csl::math::Vector4 rayleighScatteringColorOffset;
        float rayleighScatteringScale;
        csl::ut::Color<uint8_t> groundAlbedo;
        csl::math::Vector4 groundAlbedoOffset;
        bool enableGround;
        int32_t numScatteringOrder;
        bool enableScattering;
        bool enableLimitY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSebastienSky* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSebastienSky* pInstance);
        static void Clean(FxSebastienSky* pInstance);
    };

    struct FxDensityWindParameter {
        float windDir;
        float windPower;
        float windLenght;
        float windSpeed;
        float windRalenght;
        float windRaamp;
        float windRalevel;
        float windRtpower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDensityWindParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDensityWindParameter* pInstance);
        static void Clean(FxDensityWindParameter* pInstance);
    };

    struct FxDentParameter {
        bool enable;
        float simRadius;
        float dentDepth;
        float normalIntensity;
        float edgeBulge;
        float fade;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDentParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDentParameter* pInstance);
        static void Clean(FxDentParameter* pInstance);
    };

    struct FxLightScatteringParameter {
        bool enable;
        csl::math::Vector3 color;
        float inScatteringScale;
        csl::math::Vector3 betaRayleigh;
        float betaMie;
        float g;
        float znear;
        float zfar;
        float depthScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxLightScatteringParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxLightScatteringParameter* pInstance);
        static void Clean(FxLightScatteringParameter* pInstance);
    };

    struct FxCyberNoiseEffectParameter {
        bool enable;
        float tileX;
        float tileY;
        float tileScrollSpeed;
        float noiseScrollSpeed;
        float thresholdSpeed;
        float thredholdMin;
        float thredholdMax;
        float selectRate;
        float scanLineRSpeed;
        float scanLineRBlend;
        float scanLineGSpeed;
        float scanLineGBlend;
        float rgbLineScale;
        float rgbLineBlend;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxCyberNoiseEffectParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxCyberNoiseEffectParameter* pInstance);
        static void Clean(FxCyberNoiseEffectParameter* pInstance);
    };

    struct FxCyberNPCSSEffectRenderParameter {
        bool enable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxCyberNPCSSEffectRenderParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxCyberNPCSSEffectRenderParameter* pInstance);
        static void Clean(FxCyberNPCSSEffectRenderParameter* pInstance);
    };

    struct FxRenderTargetSetting {
        enum class DOFRenderTargetSize : int32_t {
            DOF_RTSIZE_FULL_SCALE = 0,
            DOF_RTSIZE_HALF_SCALE = 1,
            DOF_RTSIZE_QUARTER_SCALE = 2,
            DOF_RTSIZE_COUNT = 3,
            DOF_RTSIZE_INVALID = 3,
        };

        DOFRenderTargetSize dofRenderTargetScale;
        int32_t shadowMapWidth;
        int32_t shadowMapHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxRenderTargetSetting* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxRenderTargetSetting* pInstance);
        static void Clean(FxRenderTargetSetting* pInstance);
    };

    struct HourMinuteData {
        uint8_t hour;
        uint8_t minute;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HourMinuteData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HourMinuteData* pInstance);
        static void Clean(HourMinuteData* pInstance);
    };

    struct GlobalLightAngleLimit {
        enum class Type : int8_t {
            NONE = 0,
            SHADOW_LIGHT = 1,
            SHADOW_AND_DISTANT_LIGHT = 2,
        };

        Type type;
        float minLightElevationAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GlobalLightAngleLimit* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GlobalLightAngleLimit* pInstance);
        static void Clean(GlobalLightAngleLimit* pInstance);
    };

    struct GlobalLightParameter {
        bool enable;
        GlobalLightAngleLimit limit;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GlobalLightParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GlobalLightParameter* pInstance);
        static void Clean(GlobalLightParameter* pInstance);
    };

    struct PerformanceSetting {
        float smallCullingThreshold;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PerformanceSetting* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PerformanceSetting* pInstance);
        static void Clean(PerformanceSetting* pInstance);
    };

    struct ProgressTimePairData {
        float hourlyTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ProgressTimePairData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ProgressTimePairData* pInstance);
        static void Clean(ProgressTimePairData* pInstance);
    };

    struct StageCameraParameter {
        float zNear;
        float zFar;
        float fovy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageCameraParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageCameraParameter* pInstance);
        static void Clean(StageCameraParameter* pInstance);
    };

    struct StageCommonAtmosphereParameter {
        float illuminanceScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageCommonAtmosphereParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageCommonAtmosphereParameter* pInstance);
        static void Clean(StageCommonAtmosphereParameter* pInstance);
    };

    struct StageCommonDecalModelParameter {
        float cullingRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageCommonDecalModelParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageCommonDecalModelParameter* pInstance);
        static void Clean(StageCommonDecalModelParameter* pInstance);
    };

    struct StageCommonParameter {
        float deadline;
        float oceanSurface;
        float deadFallTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageCommonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageCommonParameter* pInstance);
        static void Clean(StageCommonParameter* pInstance);
    };

    struct TimeIntervalData {
        HourMinuteData beginTime;
        HourMinuteData endTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TimeIntervalData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TimeIntervalData* pInstance);
        static void Clean(TimeIntervalData* pInstance);
    };

    struct StageCommonTimeProgressParameter {
        bool enable;
        float solarRadiusScale;
        float azimuthAngle;
        float latitude;
        float longitude;
        int32_t month;
        int32_t day;
        float time;
        float hourlyTime;
        ProgressTimePairData overrideSpeeds[8];
        TimeIntervalData night;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageCommonTimeProgressParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageCommonTimeProgressParameter* pInstance);
        static void Clean(StageCommonTimeProgressParameter* pInstance);
    };

    struct StageCommonWeatherProgressParameter {
        bool enable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageCommonWeatherProgressParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageCommonWeatherProgressParameter* pInstance);
        static void Clean(StageCommonWeatherProgressParameter* pInstance);
    };

    struct StageTerrainPrecisionParameter {
        float heightRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageTerrainPrecisionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageTerrainPrecisionParameter* pInstance);
        static void Clean(StageTerrainPrecisionParameter* pInstance);
    };

    struct StageTerrainMaterialParameter {
        float uvScaleDetail;
        float uvScaleBase;
        float detailDistance;
        float detailFadeRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageTerrainMaterialParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageTerrainMaterialParameter* pInstance);
        static void Clean(StageTerrainMaterialParameter* pInstance);
    };

    struct StageTerrainParameter {
        bool useHeightMapTerrain;
        bool useHalfPrecision;
        StageTerrainPrecisionParameter precision;
        int32_t worldSize;
        int32_t heightMapTexelDensity;
        float heightScale;
        float smallestCellSize;
        float slopeClipThrethold;
        csl::math::Vector2 aabbMin;
        csl::math::Vector2 aabbMax;
        StageTerrainMaterialParameter material;
        bool enableGbufferBlending;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageTerrainParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageTerrainParameter* pInstance);
        static void Clean(StageTerrainParameter* pInstance);
    };

    struct StageConfig {
        StageCommonParameter common;
        StageCameraParameter camera;
        StageTerrainParameter terrain;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StageConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StageConfig* pInstance);
        static void Clean(StageConfig* pInstance);
    };

    struct FxTerrainParameter {
        bool enableDrawGrid;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxTerrainParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxTerrainParameter* pInstance);
        static void Clean(FxTerrainParameter* pInstance);
    };

    struct FxDropParameter {
        float uvScale;
        float timeScale;
        float normalIntensity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDropParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDropParameter* pInstance);
        static void Clean(FxDropParameter* pInstance);
    };

    struct FxPuddleParameter {
        float heightThreshold;
        float slopeThreshold;
        float noiseScaleXZ;
        float noiseScaleY;
        float noiseThreshold;
        float noiseAttenuationRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxPuddleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxPuddleParameter* pInstance);
        static void Clean(FxPuddleParameter* pInstance);
    };

    struct FxRippleParameter {
        float intensity;
        float uvScale;
        float timeScale;
        float normalIntensity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxRippleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxRippleParameter* pInstance);
        static void Clean(FxRippleParameter* pInstance);
    };

    struct FxRainParameter {
        bool enableDrop;
        bool enableFilter;
        bool enableRipple;
        float intensity;
        csl::math::Vector4 dropColor;
        bool dropRotTarget;
        bool enableDropOcc;
        float dropCameraLerp;
        float dropCameraRate;
        float dropCameraRotation;
        float dropWidth;
        float dropLength;
        float dropWind;
        float dropRange;
        csl::math::Vector4 filterColor;
        float filterRange;
        float filterEdge;
        float filterAngle;
        FxRippleParameter ripple;
        FxDropParameter drop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxRainParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxRainParameter* pInstance);
        static void Clean(FxRainParameter* pInstance);
    };

    struct FxWeatherParameter {
        float wetness;
        FxPuddleParameter puddle;
        FxRainParameter rain;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxWeatherParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxWeatherParameter* pInstance);
        static void Clean(FxWeatherParameter* pInstance);
    };

    struct FxInteractiveWaveParameter {
        bool enable;
        bool enableDebugDisplay;
        float waveDamping;
        float waveReduceRange;
        float waveSpeed;
        float simurationScale;
        float playerMaxSpeed;
        bool isInWaterDummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxInteractiveWaveParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxInteractiveWaveParameter* pInstance);
        static void Clean(FxInteractiveWaveParameter* pInstance);
    };

    struct CapsuleParam {
        enum class VolumeType : int8_t {
            VOLUME_SPHERE = 0,
            VOLUME_CAPSULE = 1,
        };

        enum class LODLevel : int8_t {
            LOD_HIGH = 0,
            LOD_MIDDLE = 1,
            LOD_LOW = 2,
        };

        csl::ut::VariableString type;
        VolumeType volume;
        int32_t priority;
        csl::math::Vector3 translation;
        csl::math::Vector3 rotation;
        csl::math::Vector3 scale;
        csl::math::Vector3 rate;
        float radius;
        LODLevel lod;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CapsuleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CapsuleParam* pInstance);
        static void Clean(CapsuleParam* pInstance);
    };

    struct FxDetailParameter {
        float detailDistance;
        float detailFadeRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDetailParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDetailParameter* pInstance);
        static void Clean(FxDetailParameter* pInstance);
    };

    struct FxDistanceFogParameter {
        bool enable;
        csl::math::Vector3 color;
        float intensity;
        float nearDist;
        float farDist;
        float influence;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDistanceFogParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDistanceFogParameter* pInstance);
        static void Clean(FxDistanceFogParameter* pInstance);
    };

    struct FxDynamicResolutionParameter {
        enum class Mode : int8_t {
            DISABLE = 0,
            ENABLE = 1,
            FIXED_RESOLUTION = 2,
        };

        Mode mode;
        float fixedResolutionRatio;
        float minResolutionRatio;
        float minTargetTimeDifference;
        float maxTargetTimeDifference;
        float increaseRate;
        float decreaseRate;
        float increaseMaxScaleDelta;
        float decreaseMaxScaleDelta;
        bool debugSineFluctuation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDynamicResolutionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDynamicResolutionParameter* pInstance);
        static void Clean(FxDynamicResolutionParameter* pInstance);
    };

    struct FxEffectParameter {
        float lightFieldColorCoefficient;
        float invTonemapCoefficient;
        csl::math::Vector3 shadowColor;
        csl::math::Vector3 directionalLightOverwrite;
        float directionalLightIntensityOverwrite;
        bool overwriteDirectionalLight;
        float localLightIntensityScale;
        float lodDistances[8];
        bool enableVisualizeOverdraw;
        bool renderWireframe;
        bool upsampleBilateral;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxEffectParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxEffectParameter* pInstance);
        static void Clean(FxEffectParameter* pInstance);
    };

    struct FxHeightFogParameter {
        bool enable;
        csl::math::Vector3 color;
        float intensity;
        float minHeight;
        float maxHeight;
        float nearDist;
        float farDist;
        float influence;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxHeightFogParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxHeightFogParameter* pInstance);
        static void Clean(FxHeightFogParameter* pInstance);
    };

    struct FxFogParameter {
        FxDistanceFogParameter distanceFogParam;
        FxHeightFogParameter heightFogParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxFogParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxFogParameter* pInstance);
        static void Clean(FxFogParameter* pInstance);
    };

    struct FxInteractionDebugParameter {
        bool enable;
        bool collisionEnable;
        float threshold;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxInteractionDebugParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxInteractionDebugParameter* pInstance);
        static void Clean(FxInteractionDebugParameter* pInstance);
    };

    struct FxInteractionParameter {
        bool enable;
        float power;
        float decrease;
        float timeScale;
        FxInteractionDebugParameter debug;
        float tremorPower;
        float tremorSpeed;
        float tremorScaleCriterion;
        float tremorScaleReduce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxInteractionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxInteractionParameter* pInstance);
        static void Clean(FxInteractionParameter* pInstance);
    };

    struct FxGpuEnvironmentParameter {
        float grassDitherStart;
        float grassDitherEnd;
        FxInteractionParameter interaction;
        bool enableZoomBias;
        float zoomBias;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxGpuEnvironmentParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxGpuEnvironmentParameter* pInstance);
        static void Clean(FxGpuEnvironmentParameter* pInstance);
    };

    struct FxLODParameter {
        bool enableDebugDrawLayerRange;
        float layerRange[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxLODParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxLODParameter* pInstance);
        static void Clean(FxLODParameter* pInstance);
    };

    struct FxModelParameter {
        bool zprepass;
        bool ditherAsBlueNoize;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxModelParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxModelParameter* pInstance);
        static void Clean(FxModelParameter* pInstance);
    };

    struct OcclusionCapsuleList {
        CapsuleParam capsules[64];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OcclusionCapsuleList* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OcclusionCapsuleList* pInstance);
        static void Clean(OcclusionCapsuleList* pInstance);
    };

    struct FxAutoExposureParameter {
        enum class LUMINANCE_RANGE : int8_t {
            LUMINANCE_RANGE_CLAMP = 0,
            LUMINANCE_RANGE_CUTOFF = 1,
            LUMINANCE_RANGE_CUTOFF_PCT_RATE = 2,
            LUMINANCE_RANGE_CUTOFF_PCT_AREA = 3,
        };

        float middleGray;
        float lumMax;
        float lumMin;
        float cutMax;
        float cutMin;
        float pctMax;
        float pctMin;
        float adaptedRatio;
        LUMINANCE_RANGE luminanceRangeType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxAutoExposureParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxAutoExposureParameter* pInstance);
        static void Clean(FxAutoExposureParameter* pInstance);
    };

    struct FxDirectionalRadialBlurParameter {
        bool enable;
        csl::math::Vector3 center;
        csl::math::Vector3 direction;
        float blurPowerMax;
        float blurPowerMin;
        float focusRange;
        float alphaSlope;
        int32_t sampleNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxDirectionalRadialBlurParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxDirectionalRadialBlurParameter* pInstance);
        static void Clean(FxDirectionalRadialBlurParameter* pInstance);
    };

    struct FxFieldScanEffectRenderParameter {
        bool enable;
        csl::math::Vector3 centerPos;
        csl::ut::Color<uint8_t> color;
        float radius1;
        float radius2;
        float radius3;
        float intensity1;
        float intensity2;
        float intensity3;
        float gridIntensity;
        float innerWidth;
        float gridLineWidth;
        float gridLineSpan;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxFieldScanEffectRenderParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxFieldScanEffectRenderParameter* pInstance);
        static void Clean(FxFieldScanEffectRenderParameter* pInstance);
    };

    struct FxFXAAParameter {
        enum class QualityType : int8_t {
            QUALITY_LOW = 0,
            QUALITY_MEDIUM = 1,
            QUALITY_HIGH = 2,
            QUALITY_COUNT = 3,
        };

        QualityType qualityType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxFXAAParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxFXAAParameter* pInstance);
        static void Clean(FxFXAAParameter* pInstance);
    };

    struct FxGodrayVolumeTexture {
        bool enableVolumeTexture;
        float uvScale;
        float timeScale;
        float animationAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxGodrayVolumeTexture* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxGodrayVolumeTexture* pInstance);
        static void Clean(FxGodrayVolumeTexture* pInstance);
    };

    struct FxGodrayParameter {
        bool enable;
        bool isUseShadowmap;
        bool isVariableStep;
        csl::math::Matrix44 shadow;
        csl::math::Matrix34 box;
        csl::math::Vector3 color;
        float density;
        float anisotropy;
        float range;
        float rayMarchingCount;
        float rayMarchingStep;
        float shadowEdge;
        bool isScanFromBack;
        int32_t boxCount;
        bool isNewMode;
        FxGodrayVolumeTexture volumeTexture;
        float transparency;
        bool enable3d;
        float reProject3d;
        float logNear3d;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxGodrayParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxGodrayParameter* pInstance);
        static void Clean(FxGodrayParameter* pInstance);
    };

    struct FxHBAO_Parameter {
        float hbaoPower;
        float hbaoBias;
        float hbaoRadius;
        float hbaoFalloff;
        float hbaoSteps;
        float hbaoGitter;
        int8_t hbaoRaycount;
        bool hbaoGiMaskEnable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxHBAO_Parameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxHBAO_Parameter* pInstance);
        static void Clean(FxHBAO_Parameter* pInstance);
    };

    struct FxHeatHazeParameter {
        bool enable;
        float speed;
        float scale;
        float cycle;
        float nearDepth;
        float farDepth;
        float maxHeight;
        float parallaxCorrectFactor;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxHeatHazeParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxHeatHazeParameter* pInstance);
        static void Clean(FxHeatHazeParameter* pInstance);
    };

    struct FxHeightMapParameter {
        bool enable;
        bool enableMultiHeightmap;
        bool debugDrawFrustum;
        bool reprojection;
        uint32_t renderTargetWidth;
        uint32_t renderTargetHeight;
        float referenceValue;
        float heightScale;
        float fadeTime;
        float colorMask;
        csl::math::Matrix44 viewMatrix;
        csl::math::Matrix44 projMatrix;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxHeightMapParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxHeightMapParameter* pInstance);
        static void Clean(FxHeightMapParameter* pInstance);
    };

    struct FxLightFieldMergeParameter {
        bool enable;
        float blendRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxLightFieldMergeParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxLightFieldMergeParameter* pInstance);
        static void Clean(FxLightFieldMergeParameter* pInstance);
    };

    struct FxManualExposureParameter {
        float exposureValue;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxManualExposureParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxManualExposureParameter* pInstance);
        static void Clean(FxManualExposureParameter* pInstance);
    };

    struct FxOcclusionCapsuleParameter {
        bool enable;
        bool enableOcclusion;
        csl::ut::Color<uint8_t> occlusionColor;
        float occlusionPower;
        bool enableSpecularOcclusion;
        float specularOcclusionAlpha;
        float specularOcclusionPower;
        float specularOcclusionConeAngle;
        bool enableShadow;
        csl::ut::Color<uint8_t> shadowColor;
        float shadowPower;
        float shadowConeAngle;
        float cullingDistance;
        bool enableManualLight;
        int32_t manualLightCount;
        csl::math::Vector3 manualLightPos[4];
        bool debugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxOcclusionCapsuleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxOcclusionCapsuleParameter* pInstance);
        static void Clean(FxOcclusionCapsuleParameter* pInstance);
    };

    struct FxPlanarProjectionShadowParameter {
        bool enable;
        csl::math::Vector4 projectionPlane;
        csl::math::Vector3 lightPosition[4];
        int8_t lightCount;
        float vanishStart;
        float vanishDistance;
        float projectionBias;
        csl::math::Vector3 shadowMapBoxSize;
        csl::math::Vector3 shadowMapBoxOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxPlanarProjectionShadowParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxPlanarProjectionShadowParameter* pInstance);
        static void Clean(FxPlanarProjectionShadowParameter* pInstance);
    };

    struct FxPlanarReflectionParameter {
        bool enable;
        csl::math::Vector4 plane;
        uint32_t width;
        uint32_t height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxPlanarReflectionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxPlanarReflectionParameter* pInstance);
        static void Clean(FxPlanarReflectionParameter* pInstance);
    };

    struct FxRLRParameter {
        bool enable;
        bool traceSky;
        bool useTrans;
        bool usePenet;
        bool useQuat;
        bool useNormal;
        float rayMarchingCount;
        float planeNormalDist;
        float traceThreshold;
        float resolveReproj;
        float overrideRatio;
        float maxRoughness;
        float roughnessLevel;
        float uvOffsetScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxRLRParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxRLRParameter* pInstance);
        static void Clean(FxRLRParameter* pInstance);
    };

    struct FxSceneEnvironmentParameter {
        float windRotationY;
        float windStrength;
        float windNoise;
        float windAmplitude;
        float windFrequencies[4];
        bool enableTreadGrass;
        csl::math::Vector4 grassLodDistance;
        bool enableHighLight;
        float highLightThreshold;
        float highLightObjectAmbientScale;
        float highLightObjectAlbedoHeighten;
        float highLightCharaAmbientScale;
        float highLightCharaAlbedoHeighten;
        float highLightCharaFalloffScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSceneEnvironmentParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSceneEnvironmentParameter* pInstance);
        static void Clean(FxSceneEnvironmentParameter* pInstance);
    };

    struct FxScreenBlurParameter {
        enum class BlurType : int8_t {
            BLURTYPE_PREV_SURFACE = 0,
            BLURTYPE_RADIAL = 1,
            BLURTYPE_CAMERA = 2,
            BLURTYPE_COUNT = 3,
        };

        enum class FocusType : int8_t {
            FOCUSTYPE_CENTER = 0,
            FOCUSTYPE_LOOKAT = 1,
            FOCUSTYPE_USER_SETTING = 2,
            FOCUSTYPE_COUNT = 3,
        };

        bool enable;
        BlurType blurType;
        float blurPower;
        FocusType focusType;
        csl::math::Vector3 focusPosition;
        float focusRange;
        float alphaSlope;
        int32_t sampleNum;
        bool singleDirectionOpt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxScreenBlurParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxScreenBlurParameter* pInstance);
        static void Clean(FxScreenBlurParameter* pInstance);
    };

    struct FxScreenSpaceGodrayParameter {
        bool enable;
        float rayMarchingCount;
        float density;
        float decay;
        float threshold;
        float lumMax;
        float intensity;
        bool enableDither;
        csl::math::Vector3 lightPos;
        csl::math::Vector3 lightDir;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxScreenSpaceGodrayParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxScreenSpaceGodrayParameter* pInstance);
        static void Clean(FxScreenSpaceGodrayParameter* pInstance);
    };

    struct FxSeparableSSSParameter {
        bool enable;
        float width;
        float normalOffset;
        float blurOffsetMax;
        csl::math::Vector4 strength[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSeparableSSSParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSeparableSSSParameter* pInstance);
        static void Clean(FxSeparableSSSParameter* pInstance);
    };

    struct FxSGGIParameter {
        float sgStartSmoothness;
        float sgEndSmoothness;
        float doStartSmoothness;
        float doEndSmoothness;
        float doOffset;
        float aoOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSGGIParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSGGIParameter* pInstance);
        static void Clean(FxSGGIParameter* pInstance);
    };

    struct FxShadowHeightMapParameter {
        bool enable;
        float bias;
        float distanceFalloff;
        float heightFalloffMinHeight;
        float heightFalloffDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxShadowHeightMapParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxShadowHeightMapParameter* pInstance);
        static void Clean(FxShadowHeightMapParameter* pInstance);
    };

    struct FxShadowMapParameter {
        enum class ShadowRenderingType : int8_t {
            SHADOW_RENDERING_TYPE_SHADOW_MAP = 0,
            SHADOW_RENDERING_TYPE_PLANAR_PROJECTION = 1,
            SHADOW_RENDERING_TYPE_PLANAR_PROJECTION_SHADOW_MAP = 2,
            SHADOW_RENDERING_TYPE_MULTI_SHADOW_MAP = 3,
            SHADOW_RENDERING_TYPE_COUNT = 4,
        };

        enum class ShadowFilter : int8_t {
            SHADOW_FILTER_POINT = 0,
            SHADOW_FILTER_PCF = 1,
            SHADOW_FILTER_PCSS = 2,
            SHADOW_FILTER_ESM = 3,
            SHADOW_FILTER_MSM = 4,
            SHADOW_FILTER_VSM_POINT = 5,
            SHADOW_FILTER_VSM_LINEAR = 6,
            SHADOW_FILTER_VSM_ANISO_2 = 7,
            SHADOW_FILTER_VSM_ANISO_4 = 8,
            SHADOW_FILTER_VSM_ANISO_8 = 9,
            SHADOW_FILTER_VSM_ANISO_16 = 10,
            SHADOW_FILTER_COUNT = 11,
            SHADOW_FILTER_VSM_FIRST = 5,
            SHADOW_FILTER_VSM_LAST = 10,
        };

        enum class ShadowRangeType : int8_t {
            SHADOW_RANGE_TYPE_CAMERA_LOOKAT = 0,
            SHADOW_RANGE_TYPE_POSITION_MANUAL = 1,
            SHADOW_RANGE_TYPE_FULL_MANUAL = 2,
            SHADOW_RANGE_TYPE_COUNT = 3,
            SHADOW_RANGE_TYPE_DEFAULT = 0,
        };

        enum class FitProjection : int8_t {
            FIT_PROJECTION_TO_CASCADES = 0,
            FIT_PROJECTION_TO_SCENE = 1,
            FIT_PROJECTION_TO_ROTATE_CASCADES = 2,
        };

        enum class FitNearFar : int8_t {
            FIT_NEARFAR_ZERO_ONE = 0,
            FIT_NEARFAR_AABB = 1,
            FIT_NEARFAR_SCENE_AABB = 2,
        };

        enum class PartitionType : int8_t {
            PARTITION_PSSM = 0,
            PARTITION_MANUAL = 1,
        };

        ShadowRenderingType renderingType;
        bool enable;
        ShadowFilter shadowFilter;
        ShadowRangeType shadowRangeType;
        FitProjection fitProjection;
        FitNearFar fitNearFar;
        PartitionType partitionType;
        float sceneRange;
        float sceneCenter[3];
        float manualLightPos[3];
        float pssmLambda;
        float cascadeOffset;
        int32_t cascadeLevel;
        float cascadeSplits[4];
        float cascadeBias[4];
        float bias;
        float offset;
        float normalBias;
        int32_t width;
        int32_t height;
        int32_t blurQuality;
        int32_t blurSize;
        float fadeoutDistance;
        float cascadeTransitionfadeDistance;
        bool enableCSMCache;
        float csmCacheMaxHeight;
        float csmCacheMinHeight;
        int32_t csmCacheMaxRenderPass;
        float csmCacheFixedFovy;
        float csmCacheLightDirectionThreshold;
        bool csmCacheParallaxCorrectionEnabled;
        float csmCacheParallaxCorrectionHorizontalBias;
        float csmCacheParallaxCorrectionVerticalBias;
        int32_t csmCacheFramesToRender[3];
        float csmCacheFadeLightElevationAngle;
        float csmCacheMinLightElevationAngle;
        csl::math::Matrix44 shadowCameraViewMatrix;
        csl::math::Matrix44 shadowCameraProjectionMatrix;
        float shadowCameraNearDepth;
        float shadowCameraFarDepth;
        float shadowCameraLookAtDepth;
        bool enableBackFaceShadow;
        bool enableShadowCamera;
        bool enableDrawSceneAABB;
        bool enableDrawShadowFrustum;
        bool enableDrawCascade;
        bool enableDrawCameraFrustum;
        bool enableDrawCSMCache;
        bool enableClearOnCSMCacheIsInvalidated;
        bool enablePauseCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxShadowMapParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxShadowMapParameter* pInstance);
        static void Clean(FxShadowMapParameter* pInstance);
    };

    struct FxSHLightFieldParameter {
        enum class DebugDrawType : int8_t {
            DEBUG_DRAW_NONE = 0,
            DEBUG_DRAW_ONLY_ENABLED = 1,
            DEBUG_DRAW_ALL = 2,
        };

        bool enable;
        DebugDrawType debugDrawType;
        bool showSkyVisibility;
        float debugProbeSize;
        csl::math::Vector3 multiplyColorUp;
        csl::math::Vector3 multiplyColorDown;
        float normalBias;
        FxLightFieldMergeParameter lfMerge;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSHLightFieldParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSHLightFieldParameter* pInstance);
        static void Clean(FxSHLightFieldParameter* pInstance);
    };

    struct FxSMAAParameter {
        enum class Preset : int8_t {
            PRESET_SPEED = 0,
            PRESET_QUALITY = 1,
        };

        enum class TestMode : int8_t {
            TEST_MODE_DISABLE = 0,
            TEST_MODE_1 = 1,
            TEST_MODE_2 = 2,
        };

        Preset preset;
        TestMode testMode;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSMAAParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSMAAParameter* pInstance);
        static void Clean(FxSMAAParameter* pInstance);
    };

    struct FxSSAO_Parameter {
        float intensity;
        float radius;
        float fadeoutDistance;
        float fadeoutRadius;
        float power;
        float bias;
        float occlusionDistance;
        float directLightingInfluence;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSSAO_Parameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSSAO_Parameter* pInstance);
        static void Clean(FxSSAO_Parameter* pInstance);
    };

    struct FxSSS_Parameter {
        float sssRayLength;
        int8_t sssRaycount;
        float sssBias;
        float sssIntensity;
        float sssDepthMin;
        float sssDepthMax;
        float sssLightDistance;
        float sssThickness;
        bool sssGiMaskEnable;
        float sssLimit;
        bool sssDitherEnable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSSS_Parameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSSS_Parameter* pInstance);
        static void Clean(FxSSS_Parameter* pInstance);
    };

    struct FxSSAOParameter {
        enum class SSAOType : int8_t {
            SSAO = 0,
            HBAO = 1,
            HBAO_SSS = 2,
            SSS = 3,
            TYPE_COUNT = 4,
        };

        enum class RenderTargetSize : int8_t {
            RTSIZE_SAME_AS_FRAMEBUFFER = 0,
            RTSIZE_ONE_SECOND = 1,
            RTSIZE_ONE_FORTH = 2,
            RTSIZE_COUNT = 3,
        };

        enum class BLURType : int8_t {
            None = 1,
            Gauss2x2 = 2,
            Gauss3x3 = 3,
            Gauss4x4 = 4,
            Gauss5x5 = 5,
            Gauss6x6 = 6,
            Gauss7x7 = 7,
            Gauss8x8 = 8,
            Gauss9x9 = 9,
            Bilateral = 10,
            BLUR_COUNT = 11,
        };

        bool enable;
        SSAOType postType;
        RenderTargetSize renderTargetSize;
        BLURType blurStep;
        float bilateralThreshold;
        FxSSAO_Parameter ssaoParam;
        FxHBAO_Parameter hbaoParam;
        FxSSS_Parameter sssParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSSAOParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSSAOParameter* pInstance);
        static void Clean(FxSSAOParameter* pInstance);
    };

    struct FxSSGIDebugParameter {
        bool useDenoise;
        float rayLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSSGIDebugParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSSGIDebugParameter* pInstance);
        static void Clean(FxSSGIDebugParameter* pInstance);
    };

    struct FxSSGIParameter {
        bool enable;
        float intensity;
        bool useAlbedo;
        bool useParameter;
        FxSSGIDebugParameter debugParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxSSGIParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxSSGIParameter* pInstance);
        static void Clean(FxSSGIParameter* pInstance);
    };

    struct FxTAAParameter {
        bool enableUpscaling;
        float jitterScale;
        float mipBias;
        float sharpnessPower;
        float baseWeight;
        float velocityVarianceBasedWeightBias;
        float colorSpaceClippingScale;
        float colorSpaceClippingScaleForStatic;
        float velocityVarianceMin;
        float velocityVarianceMax;
        bool enableCharaStencilMask;
        bool enableLiteMode;
        bool enablePassThrough;
        bool debugVisualizeVelcotiyVariance;
        csl::math::Vector4 debug;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxTAAParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxTAAParameter* pInstance);
        static void Clean(FxTAAParameter* pInstance);
    };

    struct FxToneMapParameterFilmic {
        float whitePoint;
        float toeStrength;
        float linearAngle;
        float linearStrength;
        float shoulderStrength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxToneMapParameterFilmic* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxToneMapParameterFilmic* pInstance);
        static void Clean(FxToneMapParameterFilmic* pInstance);
    };

    struct FxToneMapParameterGT {
        float maxDisplayBrightness;
        float contrast;
        float linearSectionStart;
        float linearSectionLength;
        float black;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxToneMapParameterGT* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxToneMapParameterGT* pInstance);
        static void Clean(FxToneMapParameterGT* pInstance);
    };

    struct FxToneMapParameter {
        enum class Tonemap : int8_t {
            TONEMAP_DISNEY = 0,
            TONEMAP_FILMIC = 1,
            TONEMAP_ACES = 2,
            TONEMAP_GT = 3,
        };

        Tonemap tonemapType;
        FxToneMapParameterFilmic tonemapParamFilmic;
        FxToneMapParameterGT tonemapParamGT;
        bool updateLuminance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxToneMapParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxToneMapParameter* pInstance);
        static void Clean(FxToneMapParameter* pInstance);
    };

    struct FxVfDepthParameter {
        bool enable;
        float minPenumbraScale;
        float maxPenumbraScale;
        float bokehScale;
        float minDofOpacityScale;
        float maxDofOpacityScale;
        float minOpacityScale;
        float maxOpacityScale;
        float minOpacityDist;
        float maxOpacityDist;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxVfDepthParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxVfDepthParameter* pInstance);
        static void Clean(FxVfDepthParameter* pInstance);
    };

    struct FxVfImageCircleParameter {
        float centerX;
        float centerY;
        float scaleX;
        float scaleY;
        float scale;
        float rotation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxVfImageCircleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxVfImageCircleParameter* pInstance);
        static void Clean(FxVfImageCircleParameter* pInstance);
    };

    struct FxVfLineParameter {
        float centerX;
        float centerY;
        float directionX;
        float directionY;
        float rotation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxVfLineParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxVfLineParameter* pInstance);
        static void Clean(FxVfLineParameter* pInstance);
    };

    struct FxVignetteParameter {
        enum class GradationMode : int8_t {
            GRADATION_MODE_CIRCLE = 0,
            GRADATION_MODE_LINE = 1,
        };

        enum class BlendMode : int8_t {
            BLEND_MODE_ALPHA_BLEND = 0,
            BLEND_MODE_ADD = 1,
            BLEND_MODE_MUL = 2,
            BLEND_MODE_SCREEN = 3,
            BLEND_MODE_OVERLAY = 4,
        };

        bool enable;
        GradationMode gradationType;
        BlendMode blendMode;
        csl::math::Vector3 color;
        float opacity;
        FxVfImageCircleParameter imageCircle;
        FxVfLineParameter line;
        float penumbraScale;
        float intensity;
        FxVfDepthParameter depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxVignetteParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxVignetteParameter* pInstance);
        static void Clean(FxVignetteParameter* pInstance);
    };

    struct FxVolumetricShadowParameter {
        bool enable;
        bool isForceUseShadowmap;
        bool isUseCloudShadow;
        bool isUseHeightmapShadow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxVolumetricShadowParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxVolumetricShadowParameter* pInstance);
        static void Clean(FxVolumetricShadowParameter* pInstance);
    };

    struct GlayScaleColor {
        float blockLNoiseSizeX;
        float blockLNoiseSizeY;
        float blockHNoiseSizeX;
        float blockHNoiseSizeY;
        float bNoiseHighRate;
        float intensity;
        float invertAllRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GlayScaleColor* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GlayScaleColor* pInstance);
        static void Clean(GlayScaleColor* pInstance);
    };

    struct GlobalUserParamOption {
        bool enable;
        csl::math::Vector4 value;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GlobalUserParamOption* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GlobalUserParamOption* pInstance);
        static void Clean(GlobalUserParamOption* pInstance);
    };

    struct InterlaceNoise {
        float blockLNoiseSize;
        float blockHNoiseSize;
        float bNoiseHighRate;
        float intensity;
        float dropout;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(InterlaceNoise* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(InterlaceNoise* pInstance);
        static void Clean(InterlaceNoise* pInstance);
    };

    struct InvertColor {
        float blockLNoiseSizeX;
        float blockLNoiseSizeY;
        float blockHNoiseSizeX;
        float blockHNoiseSizeY;
        float bNoiseHighRate;
        float intensity;
        float invertAllRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(InvertColor* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(InvertColor* pInstance);
        static void Clean(InvertColor* pInstance);
    };

    struct UVShift {
        float blockLNoiseSizeX;
        float blockLNoiseSizeY;
        float blockHNoiseSizeX;
        float blockHNoiseSizeY;
        float bNoiseHighRate;
        float intensity;
        float pixelShiftIntensity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UVShift* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UVShift* pInstance);
        static void Clean(UVShift* pInstance);
    };

    struct FxTerrainMaterialBlendingParameter {
        bool enable;
        float blendPower;
        float blendHightPower;
        float cullingDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxTerrainMaterialBlendingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxTerrainMaterialBlendingParameter* pInstance);
        static void Clean(FxTerrainMaterialBlendingParameter* pInstance);
    };

    struct FxWindComputeDebugParameter {
        bool debugEnable;
        bool debugSpace;
        bool debugGlobal;
        bool debugGlobalMap;
        bool debugSpaceAll;
        int32_t spaceIndex;
        float spaceThreshold;
        float min;
        float max;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxWindComputeDebugParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxWindComputeDebugParameter* pInstance);
        static void Clean(FxWindComputeDebugParameter* pInstance);
    };

    struct FxWindComputeParameter {
        bool enableAll;
        bool enableDynamicWind;
        bool enableGlobalWind;
        float timeScale;
        float decreaseRate;
        csl::math::Vector3 globalWind;
        float globalWindPower;
        float globalWindSpeed;
        float globalWindOffset;
        csl::math::Vector3 globalSecondWind;
        float globalSecondWindPower;
        float globalSecondWindSpeed;
        float globalSecondWindOffset;
        csl::math::Vector3 globalWindMapSize;
        csl::math::Vector3 globalWindMapCenter;
        csl::math::Vector3 globalWindMapOffset;
        float globalWindMapPower;
        float globalWindMapTimeScale;
        FxWindComputeDebugParameter debugParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FxWindComputeParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FxWindComputeParameter* pInstance);
        static void Clean(FxWindComputeParameter* pInstance);
    };

    struct ViewSpaceOffsetRflParam {
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 eyeOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ViewSpaceOffsetRflParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ViewSpaceOffsetRflParam* pInstance);
        static void Clean(ViewSpaceOffsetRflParam* pInstance);
    };

    struct SwayParamCollision {
        enum class CollisionType : int8_t {
            SWAY_COLLISTION_TYPE_NONE = 0,
            SWAY_COLLISTION_TYPE_SPHERE = 1,
        };

        CollisionType type;
        csl::math::Vector3 translation;
        csl::math::Vector3 rotation;
        csl::math::Vector3 scale;
        int32_t modelPartId;
        csl::ut::VariableString modelNodeName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SwayParamCollision* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SwayParamCollision* pInstance);
        static void Clean(SwayParamCollision* pInstance);
    };

    struct ObjFlashSwitchSpawner {
        int32_t no;
        bool eventDriven;
        float onTime;
        float offTime;
        float phase;
        float stopTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFlashSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFlashSwitchSpawner* pInstance);
        static void Clean(ObjFlashSwitchSpawner* pInstance);
    };

    struct ObjBossItemBoxSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossItemBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossItemBoxSpawner* pInstance);
        static void Clean(ObjBossItemBoxSpawner* pInstance);
    };

    struct ObjBossSpringSpawner {
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossSpringSpawner* pInstance);
        static void Clean(ObjBossSpringSpawner* pInstance);
    };

    struct BossDragonChasePathInfo {
        csl::ut::VariableString bossPathName;
        csl::ut::VariableString playerPathName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonChasePathInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonChasePathInfo* pInstance);
        static void Clean(BossDragonChasePathInfo* pInstance);
    };

    struct BossDragonSpawner {
        csl::ut::VariableString cruisePathName;
        csl::ut::VariableString patrolPathName;
        csl::ut::VariableString approachPathName;
        csl::ut::VariableString climbPathName;
        csl::ut::VariableString climbEndPathName;
        csl::ut::VariableString roadPathName;
        csl::ut::VariableString battlePathName;
        csl::ut::VariableString bossPathName;
        csl::ut::VariableString playerPathName;
        bool eventDriven;
        csl::ut::Array<uint32_t> releaseMapPos;
        BossDragonChasePathInfo chasePathInfos[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonSpawner* pInstance);
        static void Clean(BossDragonSpawner* pInstance);
    };

    struct BossGiantSpawner {
        csl::ut::VariableString guidePathName;
        csl::ut::Array<uint32_t> objectIds;
        csl::ut::Array<uint32_t> ringSupplyPos;
        csl::ut::Array<uint32_t> releaseMapPos;
        bool isEvent;
        bool isDebugMotionTest;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantSpawner* pInstance);
        static void Clean(BossGiantSpawner* pInstance);
    };

    struct ObjBossGiantDollSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossGiantDollSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossGiantDollSpawner* pInstance);
        static void Clean(ObjBossGiantDollSpawner* pInstance);
    };

    struct KnightGrindTrapInfo {
        enum class Lane : uint8_t {
            LaneA = 0,
            LaneB = 1,
            LaneC = 2,
        };

        bool enable;
        Lane lane;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightGrindTrapInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightGrindTrapInfo* pInstance);
        static void Clean(KnightGrindTrapInfo* pInstance);
    };

    struct BossKnightSpawner {
        csl::ut::VariableString pathNameClimb;
        uint32_t locatorClimb;
        KnightGrindTrapInfo traps[16];
        csl::ut::VariableString pathNameBattle2;
        uint32_t locatorBattle2Start;
        csl::ut::Array<uint32_t> locatorBattle2CyFloatWarp;
        csl::ut::Array<uint32_t> releaseMapPos;
        bool slamBySwitch;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossKnightSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossKnightSpawner* pInstance);
        static void Clean(BossKnightSpawner* pInstance);
    };

    struct BossRifleSpawner {
        csl::ut::VariableString guidePathName;
        csl::ut::Array<uint32_t> objectIds;
        csl::ut::Array<uint32_t> ringSupplyPos;
        csl::ut::Array<uint32_t> releaseMapPos;
        csl::ut::Array<uint32_t> normalModeBitWaveIds;
        csl::ut::Array<uint32_t> alwaysBitWaveIds;
        bool isEvent;
        bool isDebugMotionTest;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleSpawner* pInstance);
        static void Clean(BossRifleSpawner* pInstance);
    };

    struct BossRifleBeastSpawner {
        csl::ut::VariableString guidePathName;
        csl::ut::Array<uint32_t> objectIds;
        csl::ut::Array<uint32_t> ringSupplyPos;
        csl::ut::Array<uint32_t> releaseMapPos;
        csl::ut::Array<uint32_t> normalModeBitWaveIds;
        csl::ut::Array<uint32_t> alwaysBitWaveIds;
        bool isEvent;
        bool isDebugMotionTest;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastSpawner* pInstance);
        static void Clean(BossRifleBeastSpawner* pInstance);
    };

    struct BossTheEndSpawner {
        bool isEvent;
        csl::math::Vector3 blockCollisionPos;
        float modelPosDepth;
        float modelScale;
        float blockColliderRadius;
        float HitColliderRadius;
        csl::ut::Array<uint32_t> target;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossTheEndSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossTheEndSpawner* pInstance);
        static void Clean(BossTheEndSpawner* pInstance);
    };

    struct ObjBossTheEndTargetSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossTheEndTargetSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossTheEndTargetSpawner* pInstance);
        static void Clean(ObjBossTheEndTargetSpawner* pInstance);
    };

    struct ObjMoonSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMoonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMoonSpawner* pInstance);
        static void Clean(ObjMoonSpawner* pInstance);
    };

    struct BossRingSupplyBaseSpawner {
        csl::ut::Array<uint32_t> children;
        bool isUpdateTransform;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRingSupplyBaseSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRingSupplyBaseSpawner* pInstance);
        static void Clean(BossRingSupplyBaseSpawner* pInstance);
    };

    struct BossRingSupplyStartPosSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRingSupplyStartPosSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRingSupplyStartPosSpawner* pInstance);
        static void Clean(BossRingSupplyStartPosSpawner* pInstance);
    };

    struct ObjCamera3DSpawner {
        float offsetUp;
        float distanceMin;
        float distanceMax;
        float elevationMin;
        float elevationMax;
        float fovy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCamera3DSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCamera3DSpawner* pInstance);
        static void Clean(ObjCamera3DSpawner* pInstance);
    };

    struct ObjCameraClassicSpawner {
        float fovy;
        float distance;
        float screenUpLimit;
        float screenDownLimit;
        bool limitViewField;
        float viewFieldBottom;
        float azimuth;
        float elevation;
        csl::math::Vector3 targetOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraClassicSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraClassicSpawner* pInstance);
        static void Clean(ObjCameraClassicSpawner* pInstance);
    };

    struct VolumeTriggerSpawner {
        enum class Shape : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_CAPSULE = 3,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Z_PLANE = 1,
            BASE_X_PLANE = 2,
            BASE_Y_PLANE = 3,
        };

        enum class ColliFilter : int8_t {
            FILTER_DEFAULT = 0,
            FILTER_ONLYENEMY = 1,
            FILTER_HITENEMY = 2,
            FILTER_ALL = 3,
        };

        Shape ShapeType;
        BasePoint basePoint;
        ColliFilter CollisionFilter;
        float CollisionWidth;
        float CollisionHeight;
        float CollisionDepth;
        csl::math::Vector3 CollisionOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(VolumeTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(VolumeTriggerSpawner* pInstance);
        static void Clean(VolumeTriggerSpawner* pInstance);
    };

    struct ObjCameraClassicChangeParamVolumeSpawner {
        uint32_t target;
        int32_t priority;
        float viewFieldBottom;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraClassicChangeParamVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraClassicChangeParamVolumeSpawner* pInstance);
        static void Clean(ObjCameraClassicChangeParamVolumeSpawner* pInstance);
    };

    struct ObjCameraClassicLimitSpawner {
        csl::ut::VariableString pathName;
        uint32_t limitPointA;
        uint32_t limitPointB;
        float fovy;
        float distance;
        float screenUpLimit;
        float screenDownLimit;
        bool limitViewField;
        float viewFieldBottom;
        float azimuth;
        float elevation;
        csl::math::Vector3 targetOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraClassicLimitSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraClassicLimitSpawner* pInstance);
        static void Clean(ObjCameraClassicLimitSpawner* pInstance);
    };

    struct ObjCameraCyberPrototypeSpawner {
        float fovy;
        float zRot;
        float distance;
        csl::ut::VariableString pathName;
        float pathOffset;
        bool reversePathFront;
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float azimuthOffset;
        float elevationOffset;
        float targetUpOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraCyberPrototypeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraCyberPrototypeSpawner* pInstance);
        static void Clean(ObjCameraCyberPrototypeSpawner* pInstance);
    };

    struct ObjCameraCyberStandardSpawner {
        float fovy;
        float zRot;
        float distance;
        csl::ut::VariableString pathName;
        float pathOffset;
        bool reversePathFront;
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float azimuthOffset;
        float elevationOffset;
        float targetUpOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraCyberStandardSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraCyberStandardSpawner* pInstance);
        static void Clean(ObjCameraCyberStandardSpawner* pInstance);
    };

    struct ObjCameraCylindricalInnerSpawner {
        float fovy;
        csl::ut::VariableString gravityPathName;
        float distance;
        float azimuthOffsetDeg;
        float elevationOffsetDeg;
        float gravityOffset;
        float fixBorderAngleDeg;
        float rollSensitivity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraCylindricalInnerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraCylindricalInnerSpawner* pInstance);
        static void Clean(ObjCameraCylindricalInnerSpawner* pInstance);
    };

    struct ObjCameraCylindricalOuterSpawner {
        csl::ut::VariableString gravityPathName;
        float pitch;
        float dist;
        float offset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraCylindricalOuterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraCylindricalOuterSpawner* pInstance);
        static void Clean(ObjCameraCylindricalOuterSpawner* pInstance);
    };

    struct ObjCameraFixSpawner {
        enum class TargetType : int8_t {
            TARGETTYPE_ABS_COORD = 0,
            TARGETTYPE_LOCATOR = 1,
        };

        float Fovy;
        float ZRot;
        TargetType targetType;
        csl::math::Vector3 TargetPosition;
        uint32_t targetID;
        float targetDistance;
        csl::math::Vector3 offsetFromObject;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraFixSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraFixSpawner* pInstance);
        static void Clean(ObjCameraFixSpawner* pInstance);
    };

    struct ObjCameraFollowSpawner {
        float Fovy;
        float ZRot;
        float Distance;
        float Yaw;
        float Pitch;
        csl::math::Vector3 targetOffset;
        float gravityOffset;
        csl::math::Vector3 playerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraFollowSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraFollowSpawner* pInstance);
        static void Clean(ObjCameraFollowSpawner* pInstance);
    };

    struct ObjCameraObjectPanSpawner {
        csl::math::Vector3 target;
        float fovy;
        bool enableLimitAngle;
        float azimuthLimitAngle;
        float elevationLimitAngle;
        csl::math::Vector3 worldOffset;
        float targetDistance;
        float targetFocusDistance;
        bool useDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraObjectPanSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraObjectPanSpawner* pInstance);
        static void Clean(ObjCameraObjectPanSpawner* pInstance);
    };

    struct ObjCameraPanSpawner {
        enum class PositionMode : int8_t {
            POS_MODE_FIX = 0,
            POS_MODE_MAINTAIN_DISTANCE = 1,
        };

        float fovy;
        bool enableLimitAngle;
        float azimuthLimitAngle;
        float elevationLimitAngle;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        csl::math::Vector3 worldOffset;
        PositionMode positionMode;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraPanSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraPanSpawner* pInstance);
        static void Clean(ObjCameraPanSpawner* pInstance);
    };

    struct ObjCameraPointSpawner {
        float fovy;
        float distance;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        csl::math::Vector3 worldOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraPointSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraPointSpawner* pInstance);
        static void Clean(ObjCameraPointSpawner* pInstance);
    };

    struct ObjCameraRailSpawner {
        float fovy;
        csl::ut::VariableString pathName;
        float pathOffset;
        float gravityOffset;
        csl::math::Vector3 playerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraRailSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraRailSpawner* pInstance);
        static void Clean(ObjCameraRailSpawner* pInstance);
    };

    struct ObjCameraRailAnimationSpawner {
        enum class UpDirectionType : int8_t {
            UPDIR_Y_UP = 0,
            UPDIR_OBJ_TRANSFORM = 1,
        };

        enum class Type : int8_t {
            TIME_DRIVEN = 0,
            PLAYER_POSITION_DRIVEN = 1,
            EYE_PATH_NEAREST_BASE = 2,
            AT_PATH_NEAREST_BASE = 3,
        };

        float fovy;
        UpDirectionType upDirType;
        float zRot;
        csl::ut::VariableString eyePathName;
        float eyePathOffset;
        csl::ut::VariableString atPathName;
        float atPathOffset;
        Type type;
        float motionLength;
        bool reversePathAdvance;
        bool correctTargetPoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraRailAnimationSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraRailAnimationSpawner* pInstance);
        static void Clean(ObjCameraRailAnimationSpawner* pInstance);
    };

    struct ObjCameraRailDivingSpawner {
        float fovy;
        csl::ut::VariableString pathName;
        float distance;
        float distanceBoost;
        float horzFollowRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraRailDivingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraRailDivingSpawner* pInstance);
        static void Clean(ObjCameraRailDivingSpawner* pInstance);
    };

    struct ObjCameraRailForwardViewSpawner {
        enum class PlayerOffsetType : int8_t {
            PLAYER_OFFSET_NORMAL = 0,
            PLAYER_OFFSET_ABSOLUTE = 1,
        };

        float fovy;
        float zRot;
        float distance;
        csl::ut::VariableString pathName;
        float pathOffset;
        bool reversePathFront;
        bool usePathVerticalComponent;
        bool usePathNormal;
        float angleSensitivity;
        float angleSensitivityBoost;
        float azimuthOffsetDeg;
        float elevationOffsetDeg;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        PlayerOffsetType playerOffsetType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraRailForwardViewSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraRailForwardViewSpawner* pInstance);
        static void Clean(ObjCameraRailForwardViewSpawner* pInstance);
    };

    struct ObjCameraRailLookSpawner {
        float fovy;
        float distance;
        csl::ut::VariableString pathName;
        float pathOffset;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        csl::math::Vector3 worldOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraRailLookSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraRailLookSpawner* pInstance);
        static void Clean(ObjCameraRailLookSpawner* pInstance);
    };

    struct ObjCameraRailSideViewSpawner {
        enum class OrientationMode : int8_t {
            GRAVITY = 0,
            PATH_NORMAL = 1,
        };

        float fovy;
        float distance;
        csl::ut::VariableString pathName;
        float elevation;
        float azimuth;
        float limitLeftRatio;
        float limitRightRatio;
        float upScrollRatio;
        float limitUpScrollDistance;
        float downScrollRatio;
        float limitDownScrollDistance;
        bool isLimitPathDistance;
        float limitPathDistanceMin;
        float limitPathDistanceMax;
        OrientationMode orientationMode;
        bool isSmoothPath;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraRailSideViewSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraRailSideViewSpawner* pInstance);
        static void Clean(ObjCameraRailSideViewSpawner* pInstance);
    };

    struct ObjCameraShakeTriggerSpawner {
        enum class Type : int8_t {
            TYPE_ONESHOT = 0,
            TYPE_CONTINUANCE = 1,
        };

        enum class Shake : int8_t {
            Directional = 0,
            Random = 1,
        };

        enum class ShapeType : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_EVENT = 3,
        };

        Type type;
        float shakeTime;
        float shakeRange;
        bool oneTimeOnly;
        Shake shakeType;
        float magnitude;
        int32_t freq;
        float zRot;
        float attnRatio;
        bool distanceDecayEnabled;
        ShapeType shape;
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraShakeTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraShakeTriggerSpawner* pInstance);
        static void Clean(ObjCameraShakeTriggerSpawner* pInstance);
    };

    struct ObjCameraSliderSpawner {
        float fovy;
        float distance;
        float distanceAir;
        float elevationAir;
        float angleSensitive;
        float elevationOffset;
        float pathOffset;
        float targetOffsetY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraSliderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraSliderSpawner* pInstance);
        static void Clean(ObjCameraSliderSpawner* pInstance);
    };

    struct ObjCameraStandardCommonParameter {
        float distance;
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float elevationOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraStandardCommonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraStandardCommonParameter* pInstance);
        static void Clean(ObjCameraStandardCommonParameter* pInstance);
    };

    struct ObjCameraStandardDashParameter {
        float minDistance;
        float maxDistance;
        float elevationOffset;
        float azimuthSensitivity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraStandardDashParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraStandardDashParameter* pInstance);
        static void Clean(ObjCameraStandardDashParameter* pInstance);
    };

    struct ObjCameraStandardLockonParameter {
        float distance;
        float elevationOffset;
        float targetUpOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraStandardLockonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraStandardLockonParameter* pInstance);
        static void Clean(ObjCameraStandardLockonParameter* pInstance);
    };

    struct ObjCameraStandardSpawner {
        ObjCameraStandardCommonParameter common;
        ObjCameraStandardDashParameter dash;
        ObjCameraStandardLockonParameter lockon;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraStandardSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraStandardSpawner* pInstance);
        static void Clean(ObjCameraStandardSpawner* pInstance);
    };

    struct ObjCameraSubVolumeSpawner {
        uint32_t target;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraSubVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraSubVolumeSpawner* pInstance);
        static void Clean(ObjCameraSubVolumeSpawner* pInstance);
    };

    struct ObjCameraTiltSpawner {
        enum class PositionMode : int8_t {
            POS_MODE_FIX = 0,
            POS_MODE_MAINTAIN_DISTANCE = 1,
        };

        float fovy;
        bool enableLimitAngle;
        float azimuthLimitAngle;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        float lineOffset;
        PositionMode positionMode;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraTiltSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraTiltSpawner* pInstance);
        static void Clean(ObjCameraTiltSpawner* pInstance);
    };

    struct ObjCameraVerticalSpawner {
        float fovy;
        float distance;
        float elevationOffsetDeg;
        float gravityOffset;
        csl::math::Vector3 playerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraVerticalSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraVerticalSpawner* pInstance);
        static void Clean(ObjCameraVerticalSpawner* pInstance);
    };

    struct ObjCameraVolumeSpawner {
        enum class InterpolateType : int8_t {
            INTERPOLATE_RELATIVE = 0,
            INTERPOLATE_ABSOLUTE = 1,
            INTERPOLATE_ABSOLUTE_COORD = 2,
            INTERPOLATE_ABSOLUTE_STABLE = 3,
        };

        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        uint32_t target;
        uint32_t priority;
        bool useHighPriority;
        float easeTimeEnter;
        float easeTimeLeave;
        InterpolateType interpolateTypeEnter;
        InterpolateType interpolateTypeLeave;
        StateType state;
        ActionType action;
        bool disableFreeMode;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraVolumeSpawner* pInstance);
        static void Clean(ObjCameraVolumeSpawner* pInstance);
    };

    struct ObjCameraVolumeOnceSpawner {
        enum class InterpolateType : int8_t {
            INTERPOLATE_RELATIVE = 0,
            INTERPOLATE_ABSOLUTE = 1,
            INTERPOLATE_ABSOLUTE_COORD = 2,
            INTERPOLATE_ABSOLUTE_STABLE = 3,
        };

        uint32_t target;
        uint32_t priority;
        bool useHighPriority;
        float easeTimeEnter;
        float easeTimeLeave;
        InterpolateType interpolateTypeEnter;
        InterpolateType interpolateTypeLeave;
        bool disableFreeMode;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraVolumeOnceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraVolumeOnceSpawner* pInstance);
        static void Clean(ObjCameraVolumeOnceSpawner* pInstance);
    };

    struct ObjDefaultCameraSettingSpawner {
        uint32_t cameraObjectID;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDefaultCameraSettingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDefaultCameraSettingSpawner* pInstance);
        static void Clean(ObjDefaultCameraSettingSpawner* pInstance);
    };

    struct ObjFarChangeVolumeSpawner {
        float farDist;
        uint32_t priority;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFarChangeVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFarChangeVolumeSpawner* pInstance);
        static void Clean(ObjFarChangeVolumeSpawner* pInstance);
    };

    struct PuzzleSize {
        uint8_t numRows;
        uint8_t numColumns;
        uint8_t numLayers;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PuzzleSize* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PuzzleSize* pInstance);
        static void Clean(PuzzleSize* pInstance);
    };

    struct CSRow {
        enum class Color : uint8_t {
            Blue = 0,
            LightBlue = 1,
            Green = 2,
            Purple = 3,
            Red = 4,
            White = 5,
            Yellow = 6,
            Transparent = 7,
            NumColors = 8,
        };

        Color columns[15];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CSRow* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CSRow* pInstance);
        static void Clean(CSRow* pInstance);
    };

    struct CSLayer {
        CSRow rows[15];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CSLayer* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CSLayer* pInstance);
        static void Clean(CSLayer* pInstance);
    };

    struct CorrectShape {
        CSLayer layers[15];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CorrectShape* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CorrectShape* pInstance);
        static void Clean(CorrectShape* pInstance);
    };

    struct Obj3DPuzzleSpawner {
        enum class CorrectModelType : uint8_t {
            isl_obj_3DpuzzleA = 0,
            isl_obj_3DpuzzleB = 1,
            isl_obj_3DpuzzleC = 2,
            isl_obj_3DpuzzleD = 3,
            isl_obj_3DpuzzleE = 4,
            isl_obj_3DpuzzleF = 5,
            isl_obj_3DpuzzleG = 6,
            NumCorrectModelTypes = 7,
        };

        enum class ModelType : int8_t {
            None = -1,
            isl_obj_3DpuzzleA_piece1 = 0,
            isl_obj_3DpuzzleA_piece2 = 1,
            isl_obj_3DpuzzleA_piece3 = 2,
            isl_obj_3DpuzzleB_piece1 = 3,
            isl_obj_3DpuzzleB_piece2 = 4,
            isl_obj_3DpuzzleB_piece3 = 5,
            isl_obj_3DpuzzleC_piece1 = 6,
            isl_obj_3DpuzzleC_piece2 = 7,
            isl_obj_3DpuzzleC_piece3 = 8,
            isl_obj_3DpuzzleD_piece1 = 9,
            isl_obj_3DpuzzleD_piece2 = 10,
            isl_obj_3DpuzzleD_piece3 = 11,
            isl_obj_3DpuzzleD_piece4 = 12,
            isl_obj_3DpuzzleD_piece5 = 13,
            isl_obj_3DpuzzleE_piece1 = 14,
            isl_obj_3DpuzzleE_piece2 = 15,
            isl_obj_3DpuzzleE_piece3 = 16,
            isl_obj_3DpuzzleE_piece4 = 17,
            isl_obj_3DpuzzleE_piece5 = 18,
            isl_obj_3DpuzzleF_piece1 = 19,
            isl_obj_3DpuzzleF_piece2 = 20,
            isl_obj_3DpuzzleF_piece3 = 21,
            isl_obj_3DpuzzleF_piece4 = 22,
            isl_obj_3DpuzzleF_piece5 = 23,
            isl_obj_3DpuzzleG_piece1 = 24,
            isl_obj_3DpuzzleG_piece2 = 25,
            isl_obj_3DpuzzleG_piece3 = 26,
            isl_obj_3DpuzzleG_piece4 = 27,
            isl_obj_3DpuzzleG_piece5 = 28,
            NumModelTypes = 29,
        };

        int32_t no;
        CorrectModelType modelType;
        csl::math::Vector3 modelOffset;
        uint32_t locator;
        ModelType correctModelOrder[5];
        PuzzleSize maxPossiblePuzzleSize;
        uint8_t totalNumBlocksAvailable;
        uint8_t numVerticalCellsOfCorrectAnswer;
        uint8_t numCellsFromBlockPosForWarpEffect;
        uint8_t copyPosOffsetFromCurAnswerTop;
        uint8_t numCellsToLevitate;
        float effectScaleOnRewind;
        float effectSpeedOnRewind;
        CorrectShape correctShape;
        csl::ut::Array<uint32_t> blockList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Obj3DPuzzleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Obj3DPuzzleSpawner* pInstance);
        static void Clean(Obj3DPuzzleSpawner* pInstance);
    };

    struct WarpInfo {
        uint8_t row;
        uint8_t column;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarpInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarpInfo* pInstance);
        static void Clean(WarpInfo* pInstance);
    };

    struct RotationInfo {
        enum class Rotation : uint8_t {
            Rotate_0 = 0,
            Rotate_90 = 1,
            Rotate_180 = 2,
            Rotate_270 = 3,
            NumRotations = 4,
        };

        Rotation rotationAroundY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RotationInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RotationInfo* pInstance);
        static void Clean(RotationInfo* pInstance);
    };

    struct Obj3DPuzzleBlockSpawner {
        enum class ModelType : int8_t {
            None = -1,
            isl_obj_3DpuzzleA_piece1 = 0,
            isl_obj_3DpuzzleA_piece2 = 1,
            isl_obj_3DpuzzleA_piece3 = 2,
            isl_obj_3DpuzzleB_piece1 = 3,
            isl_obj_3DpuzzleB_piece2 = 4,
            isl_obj_3DpuzzleB_piece3 = 5,
            isl_obj_3DpuzzleC_piece1 = 6,
            isl_obj_3DpuzzleC_piece2 = 7,
            isl_obj_3DpuzzleC_piece3 = 8,
            isl_obj_3DpuzzleD_piece1 = 9,
            isl_obj_3DpuzzleD_piece2 = 10,
            isl_obj_3DpuzzleD_piece3 = 11,
            isl_obj_3DpuzzleD_piece4 = 12,
            isl_obj_3DpuzzleD_piece5 = 13,
            isl_obj_3DpuzzleE_piece1 = 14,
            isl_obj_3DpuzzleE_piece2 = 15,
            isl_obj_3DpuzzleE_piece3 = 16,
            isl_obj_3DpuzzleE_piece4 = 17,
            isl_obj_3DpuzzleE_piece5 = 18,
            isl_obj_3DpuzzleF_piece1 = 19,
            isl_obj_3DpuzzleF_piece2 = 20,
            isl_obj_3DpuzzleF_piece3 = 21,
            isl_obj_3DpuzzleF_piece4 = 22,
            isl_obj_3DpuzzleF_piece5 = 23,
            isl_obj_3DpuzzleG_piece1 = 24,
            isl_obj_3DpuzzleG_piece2 = 25,
            isl_obj_3DpuzzleG_piece3 = 26,
            isl_obj_3DpuzzleG_piece4 = 27,
            isl_obj_3DpuzzleG_piece5 = 28,
            NumModelTypes = 29,
        };

        enum class Color : uint8_t {
            Blue = 0,
            LightBlue = 1,
            Green = 2,
            Purple = 3,
            Red = 4,
            White = 5,
            Yellow = 6,
            Transparent = 7,
            NumColors = 8,
        };

        enum class PresetShape : uint8_t {
            OneBlock = 0,
            TBlock = 1,
            KuBlock = 2,
            ZBlock = 3,
            NumPresetShapes = 4,
        };

        ModelType modelType;
        uint8_t shapeID;
        uint32_t cameraUUIDForAscendingBlock;
        uint32_t cameraUUIDForDescendingBlock;
        float cameraSwitchDistance;
        float warpEffectScale;
        float numCellsFromOrigBaseToTop;
        WarpInfo warpInfo;
        Color color;
        PresetShape presetShape;
        bool usePreset;
        RotationInfo rotationInfo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Obj3DPuzzleBlockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Obj3DPuzzleBlockSpawner* pInstance);
        static void Clean(Obj3DPuzzleBlockSpawner* pInstance);
    };

    struct ObjActionChainSpawner {
        int32_t no;
        uint32_t cameraUUID;
        float cameraEaseIn;
        float cameraEaseOut;
        float clearWaitTime;
        float cameraTime;
        uint16_t objectNumber;
        int32_t viewNo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjActionChainSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjActionChainSpawner* pInstance);
        static void Clean(ObjActionChainSpawner* pInstance);
    };

    struct ObjChainBoosterSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChainBoosterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChainBoosterSpawner* pInstance);
        static void Clean(ObjChainBoosterSpawner* pInstance);
    };

    struct ObjAirFloorSpawner {
        enum class SizeType : int8_t {
            SMALL = 0,
            MIDDLE = 1,
            LARGE = 2,
            SIZETYPE_NUM = 3,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        enum class EventType : int8_t {
            EVENT_NONE = 0,
            EVENT_HIDE = 1,
            EVENT_NO_MOVE = 2,
        };

        int32_t no;
        SizeType size;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        EventType eventDriven;
        bool isFall;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;
        bool isPlayMovingSE;
        bool isEnableTimeStop;
        float stopTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAirFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAirFloorSpawner* pInstance);
        static void Clean(ObjAirFloorSpawner* pInstance);
    };

    struct AirOneWayPanelStart {
        bool eventDriven;
        bool keepLightOnFail;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AirOneWayPanelStart* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AirOneWayPanelStart* pInstance);
        static void Clean(AirOneWayPanelStart* pInstance);
    };

    struct ObjAirOneWayPanelSpawner {
        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class MoveStartType : int8_t {
            MOVE_START_SPAWN = 0,
            MOVE_START_STARTPANEL = 1,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        bool isStart;
        AirOneWayPanelStart startParam;
        MoveType moveType;
        MoveStartType moveStartType;
        PatrolType patrolType;
        TimeType timeType;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAirOneWayPanelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAirOneWayPanelSpawner* pInstance);
        static void Clean(ObjAirOneWayPanelSpawner* pInstance);
    };

    struct ObjAirOneWayPanelManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> panelList;
        uint32_t firstStartPanel;
        bool useTimer;
        float time;
        uint32_t camActivator;
        float startWaitTime;
        float playerDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAirOneWayPanelManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAirOneWayPanelManagerSpawner* pInstance);
        static void Clean(ObjAirOneWayPanelManagerSpawner* pInstance);
    };

    struct ObjAirWallSpawner {
        enum class SizeType : int8_t {
            SMALL = 0,
            MIDDLE = 1,
            LARGE = 2,
            SIZETYPE_NUM = 3,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        enum class WallType : int8_t {
            NORMAL_WALL = 0,
            PARKOUR_WALL = 1,
        };

        enum class EventType : int8_t {
            EVENT_NONE = 0,
            EVENT_HIDE = 1,
            EVENT_NO_MOVE = 2,
        };

        int32_t no;
        SizeType size;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        WallType wallType;
        EventType eventDriven;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;
        bool useConvex;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAirWallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAirWallSpawner* pInstance);
        static void Clean(ObjAirWallSpawner* pInstance);
    };

    struct ObjApproachStatueSpawner {
        float noticeDistance;
        float gravity;
        float angularVelocity;
        float moveVelocity;
        float moveDuration;
        float moveBeforeWait;
        float moveAfterWait;
        float blowPowerZ;
        float blowPowerY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjApproachStatueSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjApproachStatueSpawner* pInstance);
        static void Clean(ObjApproachStatueSpawner* pInstance);
    };

    struct PassPlaneTriggerSpawner {
        float width;
        float height;
        csl::math::Vector3 offset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PassPlaneTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PassPlaneTriggerSpawner* pInstance);
        static void Clean(PassPlaneTriggerSpawner* pInstance);
    };

    struct AutorunTriggerSpawner {
        enum class ActionType : int8_t {
            ACT_START = 0,
            ACT_FINISH = 1,
        };

        enum class JumpMode : int8_t {
            WorldSpace = 0,
            PathSpace = 1,
            NoneJump = 2,
        };

        ActionType action;
        csl::ut::VariableString pathName;
        float speed;
        float speedMin;
        float boostSpeed;
        float boostSpeedMin;
        float boostLvMaxSpeed;
        float boostLvMaxSpeedMin;
        float initialSpeed;
        float outOfControlTime;
        float width;
        float limitTime;
        JumpMode jumpMode;
        bool forceFall;
        bool endByAir;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AutorunTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AutorunTriggerSpawner* pInstance);
        static void Clean(AutorunTriggerSpawner* pInstance);
    };

    struct AutorunVolumeSpawner {
        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        enum class JumpMode : int8_t {
            WorldSpace = 0,
            PathSpace = 1,
            NoneJump = 2,
        };

        csl::ut::VariableString pathName;
        float speed;
        float speedMin;
        float boostSpeed;
        float boostSpeedMin;
        float boostLvMaxSpeed;
        float boostLvMaxSpeedMin;
        float initialSpeed;
        float outOfControlTime;
        float width;
        StateType state;
        ActionType action;
        JumpMode jumpMode;
        bool forceFall;
        bool endByAir;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AutorunVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AutorunVolumeSpawner* pInstance);
        static void Clean(AutorunVolumeSpawner* pInstance);
    };

    struct ObjBallLaunchTriggerSpawner {
        csl::ut::VariableString pathName;
        float minSpeed;
        float maxSpeed;
        bool reverse;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBallLaunchTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBallLaunchTriggerSpawner* pInstance);
        static void Clean(ObjBallLaunchTriggerSpawner* pInstance);
    };

    struct ObjBallMoveTriggerSpawner {
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBallMoveTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBallMoveTriggerSpawner* pInstance);
        static void Clean(ObjBallMoveTriggerSpawner* pInstance);
    };

    struct ObjBatterBoxSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBatterBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBatterBoxSpawner* pInstance);
        static void Clean(ObjBatterBoxSpawner* pInstance);
    };

    struct GimmickCameraOptionalParam {
        bool useCameraParam;
        float interoplateTimeActivate;
        float interoplateTimeDeactivate;
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 cameraPosOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GimmickCameraOptionalParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GimmickCameraOptionalParam* pInstance);
        static void Clean(GimmickCameraOptionalParam* pInstance);
    };

    struct ObjBattingMachineManagerSpawner {
        int32_t no;
        float limitTime;
        int32_t boundingTotalNum;
        uint32_t batterBox;
        uint32_t pitchingMachine;
        GimmickCameraOptionalParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBattingMachineManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBattingMachineManagerSpawner* pInstance);
        static void Clean(ObjBattingMachineManagerSpawner* pInstance);
    };

    struct ObjPitchingMachineSpawner {
        int32_t no;
        float coolDown;
        float coolDownRandom;
        float shootVelocity;
        float lifeTime;
        uint32_t batterBox;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPitchingMachineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPitchingMachineSpawner* pInstance);
        static void Clean(ObjPitchingMachineSpawner* pInstance);
    };

    struct ObjBlockageVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBlockageVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBlockageVolumeSpawner* pInstance);
        static void Clean(ObjBlockageVolumeSpawner* pInstance);
    };

    struct ObjBlockColliderSpawner {
        enum class Shape : int8_t {
            Box = 0,
            Sphere = 1,
            Capsule = 2,
            NumShapes = 3,
        };

        Shape shape;
        csl::math::Vector3 offset;
        csl::math::Vector3 extents;
        float radius;
        float height;
        bool collidesWithCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBlockColliderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBlockColliderSpawner* pInstance);
        static void Clean(ObjBlockColliderSpawner* pInstance);
    };

    struct ObjBlockObjectSpawner {
        enum class ActionType : int8_t {
            ACT_TERRAIN = 0,
            ACT_RAYBLOCK = 1,
        };

        csl::math::Vector3 size;
        bool initial;
        bool unsupported;
        ActionType action;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBlockObjectSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBlockObjectSpawner* pInstance);
        static void Clean(ObjBlockObjectSpawner* pInstance);
    };

    struct ObjBombSpawner {
        enum class Visual : int8_t {
            ContactBomb = 0,
            TimeBomb = 1,
            ContactTimeBomb = 2,
            Num = 3,
        };

        Visual visual;
        float timeTilExplode;
        float timeFlickerGetFasterAt;
        float flickerInterval;
        float explosionColliderDuration;
        float detectionRadius;
        float explosionRadius;
        float flickerSpeed1;
        float flickerSpeed2;
        float damageVelocityMultiplier;
        float velocityYOnStumble;
        float velocityYOnBlowup;
        float blowupSonicSpeedThreshold;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBombSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBombSpawner* pInstance);
        static void Clean(ObjBombSpawner* pInstance);
    };

    struct ObjBossBitManagerSpawner {
        bool use;
        csl::ut::Array<uint32_t> bitIds;
        csl::ut::VariableString waveName;
        bool turnToTarget;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossBitManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossBitManagerSpawner* pInstance);
        static void Clean(ObjBossBitManagerSpawner* pInstance);
    };

    struct ObjBossLargeBitSpawner {
        float offsetHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossLargeBitSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossLargeBitSpawner* pInstance);
        static void Clean(ObjBossLargeBitSpawner* pInstance);
    };

    struct ObjBossSmallBitSpawner {
        int32_t patternIndexs[64];
        float offsetHeight;
        bool isOutsideDirFix;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossSmallBitSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossSmallBitSpawner* pInstance);
        static void Clean(ObjBossSmallBitSpawner* pInstance);
    };

    struct ObjBossMinionSpawner {
        float speed;
        float liveTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossMinionSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossMinionSpawner* pInstance);
        static void Clean(ObjBossMinionSpawner* pInstance);
    };

    struct ObjBreakableColumnSpawner {
        int32_t no;
        bool alreadyBroken;
        float breakTimeLimit;
        float breakExtendTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBreakableColumnSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBreakableColumnSpawner* pInstance);
        static void Clean(ObjBreakableColumnSpawner* pInstance);
    };

    struct ObjBreakBoxSpawner {
        enum class BoxSize : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_NUM = 3,
        };

        BoxSize size;
        bool isHATarget;
        int32_t maxHits;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBreakBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBreakBoxSpawner* pInstance);
        static void Clean(ObjBreakBoxSpawner* pInstance);
    };

    struct ObjBreakWallSpawner {
        enum class WallSize : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_NUM = 3,
        };

        WallSize size;
        bool isHATarget;
        int32_t maxHits;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBreakWallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBreakWallSpawner* pInstance);
        static void Clean(ObjBreakWallSpawner* pInstance);
    };

    struct InterpolateSettings {
        enum class InterpolateType : int8_t {
            INTERPOLATE_RELATIVE = 0,
            INTERPOLATE_ABSOLUTE = 1,
            INTERPOLATE_ABSOLUTE_COORD = 2,
        };

        float easeTimeOn;
        float easeTimeOff;
        InterpolateType interpolateTypeOn;
        InterpolateType interpolateTypeOff;
        bool useReturnCamera;
        uint32_t returnCameraTarget;
        float returnCameraHeight;
        float returnCameraInterpolateRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(InterpolateSettings* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(InterpolateSettings* pInstance);
        static void Clean(InterpolateSettings* pInstance);
    };

    struct FadeSettings {
        float fadeOutTimeOn;
        float fadeStayTimeOn;
        float fadeInTimeOn;
        float fadeOutTimeOff;
        float fadeStayTimeOff;
        float fadeInTimeOff;
        bool stopWhenFade;
        float resumeDelayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FadeSettings* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FadeSettings* pInstance);
        static void Clean(FadeSettings* pInstance);
    };

    struct ObjCameraActivatorSpawner {
        enum class ActivateType : int8_t {
            INTERPOLATE = 0,
            FADE = 1,
        };

        enum class PlayerDisableType : int8_t {
            FROZEN = 0,
            HOLD = 1,
        };

        enum class PurposeOfUseCameraActivator : int8_t {
            Normal = 0,
            Quest = 1,
            NumUses = 2,
        };

        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        uint32_t target;
        ActivateType type;
        uint32_t priority;
        bool useHighPriority;
        float delayTime;
        bool enableLifeTime;
        float lifeTime;
        bool disableControl;
        PlayerDisableType disableType;
        bool isPause;
        InterpolateSettings interpolate;
        FadeSettings fade;
        PurposeOfUseCameraActivator purposeOfUse;
        Value questType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraActivatorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraActivatorSpawner* pInstance);
        static void Clean(ObjCameraActivatorSpawner* pInstance);
    };

    struct ObjCautionVolumeSpawner {
        enum class CautionType : int8_t {
            CAUTIONTYPE_NONE = -1,
            CAUTIONTYPE_EXCLAMATION = 0,
            CAUTIONTYPE_QUICK_STEP = 1,
            CAUTIONTYPE_DRIFT = 2,
        };

        enum class NaviType : int8_t {
            NAVITYPE_NONE = 0,
            NAVITYPE_JUMP = 1,
            NAVITYPE_SLIDING = 2,
            NAVITYPE_BOOST = 3,
            NAVITYPE_STEP_BOTH = 4,
            NAVITYPE_STEP_L = 5,
            NAVITYPE_STEP_R = 6,
            NAVITYPE_HORMING_ATTACK = 7,
            NAVITYPE_STOMPING = 8,
            NAVITYPE_SPIN_DASH = 9,
            NAVITYPE_GRIND_MOVE = 10,
            NAVITYPE_BADDY_CHANGE = 11,
            NAVITYPE_COUNT = 12,
        };

        bool isHideIfInput;
        CautionType cautionType;
        NaviType naviType;
        bool isSwitch;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCautionVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCautionVolumeSpawner* pInstance);
        static void Clean(ObjCautionVolumeSpawner* pInstance);
    };

    struct ObjDropChaosEmeraldSpawner {
        int32_t no;
        int32_t chaosEmeraldType;
        csl::math::Vector3 velocity;
        float horzDamp;
        float reflection;
        bool geditSet;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDropChaosEmeraldSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDropChaosEmeraldSpawner* pInstance);
        static void Clean(ObjDropChaosEmeraldSpawner* pInstance);
    };

    struct ObjChaosEmeraldPillarSpawner {
        enum class Value : int8_t {
            Blue = 0,
            LightBlue = 1,
            Green = 2,
            Purple = 3,
            Red = 4,
            White = 5,
            Yellow = 6,
            Num = 7,
        };

        enum class OverrideEffectType : int8_t {
            NONE = 0,
            PYRAMID_LONG = 1,
            PYRAMID_SHORT = 2,
        };

        int32_t no;
        Value color;
        OverrideEffectType overrideEffectType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChaosEmeraldPillarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChaosEmeraldPillarSpawner* pInstance);
        static void Clean(ObjChaosEmeraldPillarSpawner* pInstance);
    };

    struct ObjChaosEmeraldStorageSpawner {
        enum class Value : int8_t {
            Blue = 0,
            LightBlue = 1,
            Green = 2,
            Purple = 3,
            Red = 4,
            White = 5,
            Yellow = 6,
            Num = 7,
        };

        int32_t no;
        Value color;
        int8_t unlockOrder;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChaosEmeraldStorageSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChaosEmeraldStorageSpawner* pInstance);
        static void Clean(ObjChaosEmeraldStorageSpawner* pInstance);
    };

    struct ObjClimbingPointSpawner {
        float radius;
        bool terminal;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjClimbingPointSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjClimbingPointSpawner* pInstance);
        static void Clean(ObjClimbingPointSpawner* pInstance);
    };

    struct ObjCyloopTraceManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> volumeList;
        uint32_t samplePoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCyloopTraceManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCyloopTraceManagerSpawner* pInstance);
        static void Clean(ObjCyloopTraceManagerSpawner* pInstance);
    };

    struct ObjCyloopTracePointSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCyloopTracePointSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCyloopTracePointSpawner* pInstance);
        static void Clean(ObjCyloopTracePointSpawner* pInstance);
    };

    struct ObjCyloopTraceVolumeSpawner {
        enum class AdditionalColliderShape : int8_t {
            Cylinder = 0,
            Box = 1,
            NumShapes = 2,
        };

        int32_t no;
        AdditionalColliderShape additionalColliderShape;
        csl::math::Vector3 extents;
        float radius;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCyloopTraceVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCyloopTraceVolumeSpawner* pInstance);
        static void Clean(ObjCyloopTraceVolumeSpawner* pInstance);
    };

    struct DamegeVolumeTarget {
        csl::ut::Array<uint32_t> objects;
        int32_t damagePoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DamegeVolumeTarget* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DamegeVolumeTarget* pInstance);
        static void Clean(DamegeVolumeTarget* pInstance);
    };

    struct ObjDamageVolumeSpawner {
        enum class Type : int8_t {
            TypeOnce = 0,
            TypeReuse = 1,
        };

        Type type;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        DamegeVolumeTarget targets[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDamageVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDamageVolumeSpawner* pInstance);
        static void Clean(ObjDamageVolumeSpawner* pInstance);
    };

    struct ActionNotification {
        enum class Type : int8_t {
            Start = 0,
            On = 1,
            Off = 2,
            Finish = 3,
            NumTypes = 4,
            Invalid = -1,
        };

        Type action;
        csl::ut::Array<uint32_t> objectIds;
        float delayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionNotification* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionNotification* pInstance);
        static void Clean(ActionNotification* pInstance);
    };

    struct DashPanelPathAdjustParameter {
        csl::ut::VariableString pathname;
        float adjustSpeed;
        float adjustTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DashPanelPathAdjustParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DashPanelPathAdjustParameter* pInstance);
        static void Clean(DashPanelPathAdjustParameter* pInstance);
    };

    struct ObjDashPanelSpawner {
        enum class ChangeType : int8_t {
            CHANGE_NONE = 0,
            CHANGE_BOARDING = 1,
            CHANGE_RUN = 2,
        };

        float ocTime;
        float speed;
        bool isVisible;
        ActionNotification actions[3];
        DashPanelPathAdjustParameter adjustPath;
        bool isCyloopOn;
        float cyloopSignDistance;
        float cyloopSignTolerance;
        bool isCyKnuckleOn;
        ChangeType changeType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDashPanelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDashPanelSpawner* pInstance);
        static void Clean(ObjDashPanelSpawner* pInstance);
    };

    struct ObjDashRollerSpawner {
        enum class Visual : int8_t {
            NORMAL = 0,
            GR = 1,
            SV = 2,
            NUM_VISUALS = 3,
        };

        Visual visual;
        bool isCyloopOn;
        float cyloopSignDistance;
        float cyloopSignTolerance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDashRollerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDashRollerSpawner* pInstance);
        static void Clean(ObjDashRollerSpawner* pInstance);
    };

    struct PathMovement {
        enum class MoveType : int8_t {
            FIXED = 0,
            PATH = 1,
            TWO_POINT = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
            PATROL_ONEWAY_KILL = 3,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        MoveType moveType;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        csl::math::Vector3 twoPointOffset;
        PatrolType patrolType;
        TimeType timeType;
        bool eventDriven;
        bool isReverse;
        float waitTime;
        float phase;
        float speed;
        float killWaitTSecOneway;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathMovement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathMovement* pInstance);
        static void Clean(PathMovement* pInstance);
    };

    struct ObjDashRingSpawner {
        enum class Visual : int8_t {
            DashRing = 0,
            RainbowRing = 1,
            None = 2,
            Num = 3,
        };

        Visual visual;
        float OutOfControl;
        float KeepVelocity;
        float Speed;
        bool PosConst;
        bool VeloConst;
        bool Spin;
        bool AirTrick;
        ActionNotification actions[3];
        PathMovement pathMovement;
        csl::math::Vector3 collisionScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDashRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDashRingSpawner* pInstance);
        static void Clean(ObjDashRingSpawner* pInstance);
    };

    struct ObjIgnoreDeadlineSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjIgnoreDeadlineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjIgnoreDeadlineSpawner* pInstance);
        static void Clean(ObjIgnoreDeadlineSpawner* pInstance);
    };

    struct ObjDebugNoteSpawner {
        enum class ColorType : int8_t {
            TYPE_WHITE = 0,
            TYPE_BLACK = 1,
            TYPE_RED = 2,
            TYPE_GREEN = 3,
            TYPE_BLUE = 4,
            TYPE_YELLOW = 5,
        };

        csl::ut::VariableString memoText;
        ColorType colorType;
        float radius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDebugNoteSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDebugNoteSpawner* pInstance);
        static void Clean(ObjDebugNoteSpawner* pInstance);
    };

    struct ObjDimensionVolumeSpawner {
        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        bool isSideview;
        uint32_t priority;
        csl::ut::VariableString pathName;
        StateType state;
        ActionType action;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDimensionVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDimensionVolumeSpawner* pInstance);
        static void Clean(ObjDimensionVolumeSpawner* pInstance);
    };

    struct ObjDivingVolumeSpawner {
        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        bool limit;
        float easeTimeEnter;
        float easeTimeLeave;
        float outOfControlTime;
        float waitTime;
        bool velocityReset;
        StateType state;
        ActionType action;
        VolumeTriggerSpawner volume;
        bool isEnableHomingAttack;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDivingVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDivingVolumeSpawner* pInstance);
        static void Clean(ObjDivingVolumeSpawner* pInstance);
    };

    struct ObjDoveSpawner {
        int32_t no;
        bool enableEscape;
        float searchDistance;
        float destroyTime;
        float flySpeed;
        csl::math::Vector3 flyForceOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDoveSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDoveSpawner* pInstance);
        static void Clean(ObjDoveSpawner* pInstance);
    };

    struct RingParameter {
        float suckedTime;
        float launchAngle;
        float launchMaxSpeed;
        float launchMinSpeed;
        float randomRangeMin;
        float randomRangeMax;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RingParameter* pInstance);
        static void Clean(RingParameter* pInstance);
    };

    struct ObjDroppedItemSpawner {
        enum class ItemType : int8_t {
            RING = 0,
            SKILL_PIECE = 1,
            PORTAL_BIT = 2,
            POWER_SEED = 3,
            GUARD_SEED = 4,
            SEQUENCE_ITEM = 5,
        };

        int32_t no;
        ItemType type;
        int32_t viewItemNum;
        int32_t getItemNum;
        bool cyloopDriven;
        float cyloopSignDistance;
        float cyloopSignTolerance;
        RingParameter ringParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDroppedItemSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDroppedItemSpawner* pInstance);
        static void Clean(ObjDroppedItemSpawner* pInstance);
    };

    struct ObjEffectFlowDustSpawner {
        bool wind;
        float emitInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEffectFlowDustSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEffectFlowDustSpawner* pInstance);
        static void Clean(ObjEffectFlowDustSpawner* pInstance);
    };

    struct ObjElectricLineSpawner {
        int32_t no;
        csl::ut::VariableString pathName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjElectricLineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjElectricLineSpawner* pInstance);
        static void Clean(ObjElectricLineSpawner* pInstance);
    };

    struct ObjEscapeLightSpawner {
        int32_t no;
        bool eventDriven;
        csl::ut::VariableString pathName;
        float velocity;
        float duration;
        float catchDistance;
        float markerDistance;
        float progressReduction;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEscapeLightSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEscapeLightSpawner* pInstance);
        static void Clean(ObjEscapeLightSpawner* pInstance);
    };

    struct EventCameraParam {
        float camInterpolateTimeOnStart;
        float camInterpolateTimeOnFinish;
        bool setCameraLookAt;
        uint32_t cameraLookAtTarget;
        csl::math::Vector3 cameraLookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EventCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EventCameraParam* pInstance);
        static void Clean(EventCameraParam* pInstance);
    };

    struct ObjEventSpawner {
        int32_t no;
        csl::ut::VariableString eventID;
        csl::ut::VariableString pageName;
        int32_t pageIndex;
        bool useDefaultPath;
        bool showEnemy;
        bool playerAfterIdle;
        bool isSkipDisable;
        bool isFrozen;
        EventCameraParam camera;
        uint32_t playerTrans;
        bool limitFps30;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEventSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEventSpawner* pInstance);
        static void Clean(ObjEventSpawner* pInstance);
    };

    struct EventOrder {
        enum class ConditionType : int8_t {
            CONDITION_ALL = 0,
            CONDITION_OR = 1,
        };

        csl::ut::Array<uint32_t> targetList;
        ConditionType condition;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EventOrder* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EventOrder* pInstance);
        static void Clean(EventOrder* pInstance);
    };

    struct ObjEventOrderHubSpawner {
        csl::ut::VariableString puzzleID;
        EventOrder orders[8];
        csl::ut::VariableString correctLuaName;
        csl::ut::VariableString incorrectLuaName;
        ActionNotification correctActions[5];
        ActionNotification incorrectActions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEventOrderHubSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEventOrderHubSpawner* pInstance);
        static void Clean(ObjEventOrderHubSpawner* pInstance);
    };

    struct ObjEventSetterSpawner {
        enum class TriggerType : int8_t {
            TRIGERTYPE_DEAD = 0,
            TRIGGERTYPE_ON = 1,
            TRIGGERTYPE_OFF = 2,
            TRIGGERTYPE_OFF_TO_ON = 3,
            TRIGGERTYPE_ON_TO_OFF = 4,
        };

        enum class ConditionType : int8_t {
            CONDITION_ALL = 0,
            CONDITION_OR = 1,
        };

        enum class Time : int8_t {
            TIMESTYPE_ONCE = 0,
            TIMESTYPE_SEVERAL = 1,
        };

        int32_t no;
        csl::ut::VariableString puzzleID;
        csl::ut::Array<uint32_t> TargetList;
        TriggerType Trigger;
        ConditionType Condition;
        Time TimesType;
        csl::ut::VariableString luaName;
        ActionNotification actions[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEventSetterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEventSetterSpawner* pInstance);
        static void Clean(ObjEventSetterSpawner* pInstance);
    };

    struct ObjEventVolumeSpawner {
        int32_t no;
        VolumeTriggerSpawner volume;
        csl::ut::VariableString enterEvent;
        csl::ut::VariableString leaveEvent;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEventVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEventVolumeSpawner* pInstance);
        static void Clean(ObjEventVolumeSpawner* pInstance);
    };

    struct ObjExDashRingSpawner {
        float OutOfControl;
        float KeepVelocity;
        float Speed;
        bool VeloConst;
        csl::math::Vector3 collisionScale;
        bool eventDriven;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjExDashRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjExDashRingSpawner* pInstance);
        static void Clean(ObjExDashRingSpawner* pInstance);
    };

    struct ObjExtendPillarSpawner {
        int32_t no;
        float minHeight;
        float maxHeight;
        bool isUseTime;
        float extendTime;
        GimmickCameraOptionalParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjExtendPillarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjExtendPillarSpawner* pInstance);
        static void Clean(ObjExtendPillarSpawner* pInstance);
    };

    struct ObjFallDeadTriggerSpawner {
        enum class DrivenType : int8_t {
            DRIVE_RANGE = 0,
            DRIVE_EVENT = 1,
        };

        DrivenType drive;
        float distance;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFallDeadTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFallDeadTriggerSpawner* pInstance);
        static void Clean(ObjFallDeadTriggerSpawner* pInstance);
    };

    struct ObjFallReturnVolumeSpawner {
        uint32_t returnPoint;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFallReturnVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFallReturnVolumeSpawner* pInstance);
        static void Clean(ObjFallReturnVolumeSpawner* pInstance);
    };

    struct ObjFanSpawner {
        enum class Type : int8_t {
            TYPE_ON = 0,
            TYPE_CYCLE = 1,
        };

        enum class Place : int8_t {
            ON_GROUND = 0,
            IN_AIR = 1,
            NUM_PLACES = 2,
        };

        Type type;
        Place place;
        float length;
        float velocity;
        float durOn;
        float durOff;
        float phase;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFanSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFanSpawner* pInstance);
        static void Clean(ObjFanSpawner* pInstance);
    };

    struct ObjFireworkCactusSpawner {
        int32_t no;
        uint32_t cactusManager;
        bool respawnableByMeteorShower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFireworkCactusSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFireworkCactusSpawner* pInstance);
        static void Clean(ObjFireworkCactusSpawner* pInstance);
    };

    struct ObjFireworkCactusManagerSpawner {
        enum class CameraType : uint8_t {
            CHARA = 0,
            FIX = 1,
            OBJECT = 2,
        };

        int32_t no;
        float time;
        CameraType cameraType;
        csl::math::Vector3 cameraPos;
        uint32_t cameraLocator;
        GimmickCameraOptionalParam cameraParam;
        int32_t dropRingNum[5];
        float dropRingHeight;
        RingParameter ringParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFireworkCactusManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFireworkCactusManagerSpawner* pInstance);
        static void Clean(ObjFireworkCactusManagerSpawner* pInstance);
    };

    struct ObjFishingPortalSpawner {
        int32_t no;
        int32_t spotId;
        uint32_t fastTravelLocator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFishingPortalSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFishingPortalSpawner* pInstance);
        static void Clean(ObjFishingPortalSpawner* pInstance);
    };

    struct ObjFlaggedSwitchVolumeSpawner {
        enum class Condition : int8_t {
            COND_ON_TRIGGER = 0,
            COND_PULSE = 1,
            COND_TIMER_ONCE = 2,
            COND_TIMER = 3,
            COND_ON_STAY = 4,
        };

        int32_t no;
        Condition condition;
        float lifetime;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFlaggedSwitchVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFlaggedSwitchVolumeSpawner* pInstance);
        static void Clean(ObjFlaggedSwitchVolumeSpawner* pInstance);
    };

    struct ObjFloatIslandSpawner {
        enum class SizeType : int8_t {
            SMALL = 0,
            MIDDLE = 1,
            LARGE = 2,
            SIZETYPE_NUM = 3,
        };

        SizeType size;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFloatIslandSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFloatIslandSpawner* pInstance);
        static void Clean(ObjFloatIslandSpawner* pInstance);
    };

    struct ObjFloatTopSpawner {
        float moveSpeed;
        float driveTime;
        float widthLimit;
        float depthLimit;
        uint32_t cameraActivator;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFloatTopSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFloatTopSpawner* pInstance);
        static void Clean(ObjFloatTopSpawner* pInstance);
    };

    struct ObjFloorPuzzleSwitchSpawner {
        enum class Condition : int8_t {
            COND_ENTER = 0,
            COND_TIMER = 1,
            COND_STAY = 2,
        };

        enum class ObjectWeightType : int8_t {
            OBJECT_WEIGHT_NONE = 0,
            OBJECT_WEIGHT_LIGHT = 1,
            OBJECT_WEIGHT_NORMAL = 2,
            OBJECT_WEIGHT_HEAVY = 3,
        };

        int32_t no;
        bool eventDriven;
        Condition condition;
        float activateTime;
        ObjectWeightType weightType;
        bool isViewTimer;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFloorPuzzleSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFloorPuzzleSwitchSpawner* pInstance);
        static void Clean(ObjFloorPuzzleSwitchSpawner* pInstance);
    };

    struct ObjGameEndVolumeSpawner {
        VolumeTriggerSpawner volume;
        bool isReleaseOnly;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGameEndVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGameEndVolumeSpawner* pInstance);
        static void Clean(ObjGameEndVolumeSpawner* pInstance);
    };

    struct GateDefaultCamera {
        csl::math::Vector3 camEyeOffset;
        float easeTimeOn;
        float easeTimeOff;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GateDefaultCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GateDefaultCamera* pInstance);
        static void Clean(GateDefaultCamera* pInstance);
    };

    struct ObjGateSpawner {
        int32_t no;
        bool useExternalCam;
        GateDefaultCamera defaultCam;
        float scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGateSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGateSpawner* pInstance);
        static void Clean(ObjGateSpawner* pInstance);
    };

    struct ObjGaugePuzzleSwitchSpawner {
        enum class Condition : int8_t {
            COND_ONCE = 0,
            COND_TIMER = 1,
        };

        int32_t no;
        Condition condition;
        float activateTime;
        float upTime;
        float downTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGaugePuzzleSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGaugePuzzleSwitchSpawner* pInstance);
        static void Clean(ObjGaugePuzzleSwitchSpawner* pInstance);
    };

    struct ObjGiantCannonSpawner_Camera {
        enum class OffsetSpace : int32_t {
            Base = 0,
            Turret = 1,
            Barrel = 2,
        };

        OffsetSpace offsetSpace;
        csl::math::Vector3 positionOffset;
        csl::math::Vector3 targetOffset;
        float fovy;
        float interpolateTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantCannonSpawner_Camera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantCannonSpawner_Camera* pInstance);
        static void Clean(ObjGiantCannonSpawner_Camera* pInstance);
    };

    struct ObjGiantCannonSpawner {
        ObjGiantCannonSpawner_Camera loadingCamera;
        ObjGiantCannonSpawner_Camera aimCamera;
        ObjGiantCannonSpawner_Camera shootCamera;
        float loadingTriggerRadius;
        uint32_t loadingPlayerPosition;
        float loadingWaitTime;
        float turretRotateSpeed;
        float barrelRotateSpeed;
        float shootSpeed;
        float waitResultLimitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantCannonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantCannonSpawner* pInstance);
        static void Clean(ObjGiantCannonSpawner* pInstance);
    };

    struct ObjGiantDrainPlugSpawner {
        float eventWaitTime;
        csl::ut::Array<uint32_t> eventHiddenList;
        uint32_t afterEventPosition;
        uint32_t afterEventLookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantDrainPlugSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantDrainPlugSpawner* pInstance);
        static void Clean(ObjGiantDrainPlugSpawner* pInstance);
    };

    struct ObjGiantIncidentPillarSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantIncidentPillarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantIncidentPillarSpawner* pInstance);
        static void Clean(ObjGiantIncidentPillarSpawner* pInstance);
    };

    struct ObjGimmickInfoSpawner {
        enum class PlayType : int8_t {
            TYPE_ANYTIME = 0,
            TYPE_NOONONLY = 1,
            TYPE_NIGHTONLY = 2,
            TYPE_WAITTIME = 3,
        };

        int32_t no;
        bool eventDriven;
        csl::ut::VariableString puzzleID;
        csl::ut::Array<uint32_t> childInfo;
        csl::ut::Array<uint32_t> childLogic;
        csl::ut::Array<uint32_t> childEvent;
        csl::ut::VariableString luaName;
        bool isHideMapIcon;
        bool isPuzzle;
        PlayType playType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGimmickInfoSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGimmickInfoSpawner* pInstance);
        static void Clean(ObjGimmickInfoSpawner* pInstance);
    };

    struct ObjGimmickScriptSpawner {
        int32_t no;
        csl::ut::VariableString luaName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGimmickScriptSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGimmickScriptSpawner* pInstance);
        static void Clean(ObjGimmickScriptSpawner* pInstance);
    };

    struct DropItemParam {
        enum class ItemType : int8_t {
            NONE = 0,
            RING = 1,
            SKILL_PIECE = 2,
            POWER_SEED = 3,
            GUARD_SEED = 4,
            QUEST_ITEM = 5,
        };

        ItemType dropItem;
        int32_t dropNum;
        int32_t dropSuperRingNum;
        float velocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DropItemParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DropItemParam* pInstance);
        static void Clean(DropItemParam* pInstance);
    };

    struct ObjGismoSpawner {
        int32_t no;
        csl::ut::VariableString name;
        float scale;
        bool enableInstance;
        csl::ut::VariableString giTextureName;
        csl::ut::VariableString giOcclusionTextureName;
        DropItemParam dropItemParam;
        bool isMovable;
        bool respawnableByMeteorShower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGismoSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGismoSpawner* pInstance);
        static void Clean(ObjGismoSpawner* pInstance);
    };

    struct ObjGrindBoosterSpawner {
        float ocTime;
        float speed;
        float keepVelocityTime;
        bool isVisible;
        bool reverse;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGrindBoosterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGrindBoosterSpawner* pInstance);
        static void Clean(ObjGrindBoosterSpawner* pInstance);
    };

    struct ObjGrindLaserSpawner {
        enum class LaserType : int8_t {
            Permanent = 0,
            Time = 1,
        };

        float standHeight;
        csl::math::Vector3 endPos;
        LaserType laserType;
        float endTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGrindLaserSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGrindLaserSpawner* pInstance);
        static void Clean(ObjGrindLaserSpawner* pInstance);
    };

    struct ObjGrowFlowerSpawner {
        int32_t no;
        bool isFlower;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGrowFlowerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGrowFlowerSpawner* pInstance);
        static void Clean(ObjGrowFlowerSpawner* pInstance);
    };

    struct ObjGuideLightSpawner {
        enum class SetType : int8_t {
            EquallySpaced = 0,
            NodeID = 1,
        };

        int32_t no;
        csl::ut::VariableString pathName;
        SetType setType;
        int8_t num;
        csl::ut::Array<uint32_t> setNodeList;
        bool isLimitedTime;
        uint32_t startHour;
        uint32_t startMin;
        uint32_t endHour;
        uint32_t endMin;
        float delayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGuideLightSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGuideLightSpawner* pInstance);
        static void Clean(ObjGuideLightSpawner* pInstance);
    };

    struct ObjHackingConsoleSpawner {
        int32_t no;
        bool eventDriven;
        csl::ut::VariableString stageCode;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHackingConsoleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHackingConsoleSpawner* pInstance);
        static void Clean(ObjHackingConsoleSpawner* pInstance);
    };

    struct ObjHackingPlayerMachineSpawner {
        float rightLimit;
        float leftLimit;
        float frontLimit;
        float backLimit;
        bool enableDepth;
        uint32_t targetManager;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHackingPlayerMachineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHackingPlayerMachineSpawner* pInstance);
        static void Clean(ObjHackingPlayerMachineSpawner* pInstance);
    };

    struct ObjTheEndPlayerMachineSpawner {
        float rightLimit;
        float leftLimit;
        float frontLimit;
        float backLimit;
        bool enableDepth;
        uint32_t targetManager;
        float pitchRotate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTheEndPlayerMachineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTheEndPlayerMachineSpawner* pInstance);
        static void Clean(ObjTheEndPlayerMachineSpawner* pInstance);
    };

    struct ObjHeroSagePointSpawner {
        float accessDistance;
        csl::math::Vector3 offsetPos;
        csl::math::Vector3 offsetRot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHeroSagePointSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHeroSagePointSpawner* pInstance);
        static void Clean(ObjHeroSagePointSpawner* pInstance);
    };

    struct ObjHintRingSpawner {
        enum class Visual : int8_t {
            HintRing = 0,
            Num = 1,
        };

        Visual visual;
        csl::ut::VariableString headerLabel;
        csl::ut::VariableString bodyLabel;
        float animSpeed;
        float respawnTime;
        csl::math::Vector3 box;
        csl::math::Vector3 offset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHintRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHintRingSpawner* pInstance);
        static void Clean(ObjHintRingSpawner* pInstance);
    };

    struct ObjHoverStoneSpawner {
        bool withBase;
        bool hoverOnStart;
        float hoverHeight;
        float fallWaitTime;
        bool useHoverLimit;
        float hoverLimitTime;
        bool doBoundBackOnHoverUp;
        float bounceBackOnHoverUp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHoverStoneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHoverStoneSpawner* pInstance);
        static void Clean(ObjHoverStoneSpawner* pInstance);
    };

    struct ObjImpactPuzzleSwitchSpawner {
        enum class Condition : int8_t {
            COND_ONCE = 0,
            COND_TIMER = 1,
        };

        int32_t no;
        bool eventDriven;
        Condition condition;
        float activateTime;
        bool deactivateOnAttacked;
        float haBounceY;
        float haBounceZ;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjImpactPuzzleSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjImpactPuzzleSwitchSpawner* pInstance);
        static void Clean(ObjImpactPuzzleSwitchSpawner* pInstance);
    };

    struct ClrearCameraParam {
        float interoplateTimeActivate;
        float interoplateTimeDeactivate;
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 cameraPosOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ClrearCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ClrearCameraParam* pInstance);
        static void Clean(ClrearCameraParam* pInstance);
    };

    struct ObjImpactTargetSpawner {
        int32_t no;
        float activateTime;
        float cancelDistance;
        int32_t impact;
        ClrearCameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjImpactTargetSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjImpactTargetSpawner* pInstance);
        static void Clean(ObjImpactTargetSpawner* pInstance);
    };

    struct ObjIronBoxSpawner {
        int32_t BoxNumX;
        int32_t BoxNumY;
        int32_t BoxNumZ;
        bool dropShadow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjIronBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjIronBoxSpawner* pInstance);
        static void Clean(ObjIronBoxSpawner* pInstance);
    };

    struct ObjIslandJumpBoardPathSpawner {
        enum class SizeType : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_COUNT = 3,
        };

        int32_t no;
        float distance;
        float distanceX;
        float height;
        float outStrength;
        float inStrength;
        float inAngle;
        float impulseSpeedOn;
        float outOfControl;
        float motionTime;
        bool isEventOn;
        bool airtrick;
        SizeType size;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjIslandJumpBoardPathSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjIslandJumpBoardPathSpawner* pInstance);
        static void Clean(ObjIslandJumpBoardPathSpawner* pInstance);
    };

    struct ObjIslandNormalFloorSpawner {
        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        float width;
        float height;
        float depth;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        bool eventDriven;
        bool isFall;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjIslandNormalFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjIslandNormalFloorSpawner* pInstance);
        static void Clean(ObjIslandNormalFloorSpawner* pInstance);
    };

    struct ObjIslandSpringSpawner {
        enum class Visual : int8_t {
            Normal = 0,
            Sky = 1,
        };

        int32_t no;
        Visual visual;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;
        bool isEventOn;
        bool isHorizon;
        bool isVisible;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjIslandSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjIslandSpringSpawner* pInstance);
        static void Clean(ObjIslandSpringSpawner* pInstance);
    };

    struct ObjIslandUpReelSpawner {
        int32_t no;
        float length;
        float upSpeedMax;
        float firstSpeed;
        float outOfControl;
        bool isOneTimeUp;
        bool eventDriven;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjIslandUpReelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjIslandUpReelSpawner* pInstance);
        static void Clean(ObjIslandUpReelSpawner* pInstance);
    };

    struct ObjJingleSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjJingleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjJingleSpawner* pInstance);
        static void Clean(ObjJingleSpawner* pInstance);
    };

    struct ObjJumpBoardPathSpawner {
        enum class SizeType : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_COUNT = 3,
        };

        float distance;
        float distanceX;
        float height;
        float outStrength;
        float inStrength;
        float inAngle;
        float impulseSpeedOn;
        float outOfControl;
        float motionTime;
        bool airtrick;
        SizeType size;
        ActionNotification actions[3];
        bool isCyloopOn;
        float cyloopSignDistance;
        float cyloopSignTolerance;
        bool isCyKnuckleOn;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjJumpBoardPathSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjJumpBoardPathSpawner* pInstance);
        static void Clean(ObjJumpBoardPathSpawner* pInstance);
    };

    struct ObjKodamaBombSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaBombSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaBombSpawner* pInstance);
        static void Clean(ObjKodamaBombSpawner* pInstance);
    };

    struct ObjLaserClearEffectSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLaserClearEffectSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLaserClearEffectSpawner* pInstance);
        static void Clean(ObjLaserClearEffectSpawner* pInstance);
    };

    struct ObjLaserRecieverSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLaserRecieverSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLaserRecieverSpawner* pInstance);
        static void Clean(ObjLaserRecieverSpawner* pInstance);
    };

    struct ObjLaserRelicSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLaserRelicSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLaserRelicSpawner* pInstance);
        static void Clean(ObjLaserRelicSpawner* pInstance);
    };

    struct ObjLightPoleSpawner {
        enum class Color : int8_t {
            COLOR_LIGHTBLUE = 0,
            COLOR_YELLOW = 1,
            COLOR_WHITE = 2,
            COLOR_NUM = 3,
        };

        enum class Condition : int8_t {
            COND_ONCE = 0,
            COND_TIMER = 1,
        };

        int32_t no;
        Color color;
        Condition condition;
        float activateTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLightPoleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLightPoleSpawner* pInstance);
        static void Clean(ObjLightPoleSpawner* pInstance);
    };

    struct ObjLimitedTimeGateSpawner {
        enum class SetType : int8_t {
            EquallySpaced = 0,
            NodeID = 1,
        };

        int32_t no;
        csl::ut::VariableString pathName;
        SetType setType;
        int8_t num;
        csl::ut::Array<uint32_t> setNodeList;
        uint32_t linkObj;
        float colSize;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLimitedTimeGateSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLimitedTimeGateSpawner* pInstance);
        static void Clean(ObjLimitedTimeGateSpawner* pInstance);
    };

    struct ObjLineFlowerSpawner {
        enum class SetType : int8_t {
            EquallySpaced = 0,
            NodeID = 1,
        };

        int32_t no;
        csl::ut::VariableString pathName;
        SetType setType;
        int8_t num;
        csl::ut::Array<uint32_t> setNodeList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLineFlowerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLineFlowerSpawner* pInstance);
        static void Clean(ObjLineFlowerSpawner* pInstance);
    };

    struct ObjLocatorSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLocatorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLocatorSpawner* pInstance);
        static void Clean(ObjLocatorSpawner* pInstance);
    };

    struct ObjLoopAreaVolumeSpawner {
        csl::ut::VariableString pathName;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLoopAreaVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLoopAreaVolumeSpawner* pInstance);
        static void Clean(ObjLoopAreaVolumeSpawner* pInstance);
    };

    struct ObjMagneticVolumeSpawner {
        float radius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMagneticVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMagneticVolumeSpawner* pInstance);
        static void Clean(ObjMagneticVolumeSpawner* pInstance);
    };

    struct ObjSlotStarSpawner {
        enum class VisualType : uint8_t {
            Normal = 0,
            NumVisualTypes = 1,
        };

        VisualType visual;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSlotStarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSlotStarSpawner* pInstance);
        static void Clean(ObjSlotStarSpawner* pInstance);
    };

    struct ObjMonologueVolumeSpawner {
        enum class InterpolateType : int8_t {
            INTERPOLATE_RELATIVE = 0,
            INTERPOLATE_ABSOLUTE = 1,
            INTERPOLATE_ABSOLUTE_COORD = 2,
            INTERPOLATE_ABSOLUTE_STABLE = 3,
        };

        enum class HoldType : int8_t {
            AllHolded = 0,
            EaseInHolded = 1,
            NoneHolded = 2,
        };

        int32_t no;
        csl::ut::VariableString labelName;
        uint32_t target;
        uint32_t priority;
        bool useHighPriority;
        float easeTimeEnter;
        float easeTimeLeave;
        InterpolateType interpolateTypeEnter;
        InterpolateType interpolateTypeLeave;
        bool endByLeave;
        bool endByTime;
        float endTime;
        bool endByCaption;
        HoldType hold;
        bool useLetterBox;
        VolumeTriggerSpawner volume;
        float margin;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMonologueVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMonologueVolumeSpawner* pInstance);
        static void Clean(ObjMonologueVolumeSpawner* pInstance);
    };

    struct ObjMusicBoxSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMusicBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMusicBoxSpawner* pInstance);
        static void Clean(ObjMusicBoxSpawner* pInstance);
    };

    struct ObjMusicMemorySpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMusicMemorySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMusicMemorySpawner* pInstance);
        static void Clean(ObjMusicMemorySpawner* pInstance);
    };

    struct ObjNumberObjectSpawner {
        enum class NumberType : int8_t {
            TYPE_ONE = 0,
            TYPE_TWO = 1,
            TYPE_THREE = 2,
            TYPE_FOUR = 3,
            TYPE_FIVE = 4,
            TYPE_NUM = 5,
        };

        int32_t no;
        NumberType number;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNumberObjectSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNumberObjectSpawner* pInstance);
        static void Clean(ObjNumberObjectSpawner* pInstance);
    };

    struct ObjObjectLayerTriggerSpawner {
        csl::ut::VariableString layerName;
        bool enabled;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjObjectLayerTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjObjectLayerTriggerSpawner* pInstance);
        static void Clean(ObjObjectLayerTriggerSpawner* pInstance);
    };

    struct OneWayPanelStart {
        bool eventDriven;
        bool keepLightOnFail;
        csl::ut::Array<uint32_t> panelIds;
        csl::ut::Array<uint32_t> actionIds;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OneWayPanelStart* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OneWayPanelStart* pInstance);
        static void Clean(OneWayPanelStart* pInstance);
    };

    struct ObjOneWayPanelSpawner {
        bool isStart;
        OneWayPanelStart startParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOneWayPanelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOneWayPanelSpawner* pInstance);
        static void Clean(ObjOneWayPanelSpawner* pInstance);
    };

    struct ObjOneWayPanelManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> panelList;
        uint32_t firstStartPanel;
        csl::ut::Array<uint32_t> dummyList;
        bool useTimer;
        float time;
        uint32_t camActivator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOneWayPanelManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOneWayPanelManagerSpawner* pInstance);
        static void Clean(ObjOneWayPanelManagerSpawner* pInstance);
    };

    struct ObjOutOfControlTriggerSpawner {
        float outOfControlTime;
        bool releaseByGround;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOutOfControlTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOutOfControlTriggerSpawner* pInstance);
        static void Clean(ObjOutOfControlTriggerSpawner* pInstance);
    };

    struct ObjOutOfControlVolumeSpawner {
        bool releaseByGround;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOutOfControlVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOutOfControlVolumeSpawner* pInstance);
        static void Clean(ObjOutOfControlVolumeSpawner* pInstance);
    };

    struct ObjParticleSpawner {
        enum class TriggerType : int8_t {
            RANGE = 0,
            MESSAGE = 1,
        };

        TriggerType trigger;
        int32_t sectorId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjParticleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjParticleSpawner* pInstance);
        static void Clean(ObjParticleSpawner* pInstance);
    };

    struct ObjParticleExtentSpawner {
        enum class Shape : int8_t {
            SHAPE_SPHERE = 0,
            SHAPE_BOX = 1,
        };

        enum class Emit : int8_t {
            EMIT_VOLUME = 0,
            EMIT_FACE = 1,
        };

        enum class Direction : int8_t {
            DIRECTION_Y_UP = 0,
            DIRECTION_NORMAL = 1,
            DIRECTION_RANDOM = 2,
        };

        enum class ActiveType : int8_t {
            TYPE_ACTIVE = 0,
            TYPE_NONACTIVE = 1,
        };

        csl::ut::VariableString effectName;
        float scale;
        uint8_t colorR;
        uint8_t colorG;
        uint8_t colorB;
        uint8_t colorA;
        Shape shapeType;
        csl::math::Vector3 extents;
        Emit emitPointType;
        Direction directionType;
        float interval;
        float loopTime;
        bool bottomExclusion;
        bool upperHalfOnly;
        ActiveType active;
        int32_t sectorId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjParticleExtentSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjParticleExtentSpawner* pInstance);
        static void Clean(ObjParticleExtentSpawner* pInstance);
    };

    struct ObjParticleVolumeSpawner {
        enum class Shape : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
        };

        enum class Emit : int8_t {
            EMIT_OBJECT = 0,
            EMIT_PLAYER = 1,
            EMIT_CONTACT = 2,
            EMIT_CAMERA = 3,
        };

        enum class Gravity : int8_t {
            GRAVITY_OBJECT = 0,
            GRAVITY_EMIT = 1,
        };

        Shape shapeType;
        float width;
        float height;
        float depth;
        float zOffset;
        bool isStay;
        Emit emitPointType;
        Gravity gravityPointType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjParticleVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjParticleVolumeSpawner* pInstance);
        static void Clean(ObjParticleVolumeSpawner* pInstance);
    };

    struct ObjPipeMoveTriggerSpawner {
        enum class SpeedType : int8_t {
            SPEED_FIX = 0,
            SPEED_MIN = 1,
        };

        csl::ut::VariableString pathName;
        SpeedType speedType;
        float speed;
        float outOfControlTime;
        float launchSpeed;
        float attackTime;
        bool isPoseToReverseGravity;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPipeMoveTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPipeMoveTriggerSpawner* pInstance);
        static void Clean(ObjPipeMoveTriggerSpawner* pInstance);
    };

    struct ObjPlayerNavigateInfoSpawner {
        float moveSpeed;
        float maxMoveTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPlayerNavigateInfoSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPlayerNavigateInfoSpawner* pInstance);
        static void Clean(ObjPlayerNavigateInfoSpawner* pInstance);
    };

    struct MoveParameter {
        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_CONSTANT = 1,
            MOVE_ROTATE = 2,
        };

        MoveType type;
        float distance;
        float cycle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MoveParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MoveParameter* pInstance);
        static void Clean(MoveParameter* pInstance);
    };

    struct ObjPointLightSpawner {
        float colorR;
        float colorG;
        float colorB;
        float sourceRadius;
        float halfLength;
        float attenuationRadius;
        bool enableShadow;
        MoveParameter move;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPointLightSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPointLightSpawner* pInstance);
        static void Clean(ObjPointLightSpawner* pInstance);
    };

    struct ObjPointMarkerSpawner {
        enum class ViewType : int8_t {
            FORWARDVIEW = 0,
            SIDEVIEW = 1,
            SIDEVIEW_REV = 2,
        };

        enum class RestartType : int8_t {
            Standard = 0,
            Boarding = 1,
        };

        float Width;
        ViewType StageType;
        PassPlaneTriggerSpawner passPlane;
        RestartType restartType;
        uint32_t camera;
        float cameraLimit;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPointMarkerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPointMarkerSpawner* pInstance);
        static void Clean(ObjPointMarkerSpawner* pInstance);
    };

    struct ObjPopupSpringSpawner {
        float FirstSpeed;
        float OutOfControl;
        float KeepVelocityDistance;
        float VisibleTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPopupSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPopupSpringSpawner* pInstance);
        static void Clean(ObjPopupSpringSpawner* pInstance);
    };

    struct ObjPortalSpawner {
        int32_t no;
        bool eventDriven;
        csl::ut::VariableString stageCode;
        int32_t portalBitActivateCount;
        uint32_t fastTravelLocator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPortalSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPortalSpawner* pInstance);
        static void Clean(ObjPortalSpawner* pInstance);
    };

    struct PortalBitParameter {
        enum class PortalBitType : uint8_t {
            PortalBitSensor = 0,
            ObjItem = 1,
        };

        float suckedTime;
        PortalBitType portalbitType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PortalBitParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PortalBitParameter* pInstance);
        static void Clean(PortalBitParameter* pInstance);
    };

    struct ObjPortalBitSpawner {
        int32_t no;
        PortalBitParameter portalBitPrameter;
        uint8_t bounceTime;
        csl::math::Vector3 velocity;
        float horzDamp;
        float reflection;
        bool geditSet;
        bool alwaysCheckGround;
        bool cyloopDriven;
        float cyloopSignDistance;
        float cyloopSignTolerance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPortalBitSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPortalBitSpawner* pInstance);
        static void Clean(ObjPortalBitSpawner* pInstance);
    };

    struct ObjPortalGateSpawner {
        bool eventDriven;
        uint32_t saveFlag;
        bool isGoal;
        float scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPortalGateSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPortalGateSpawner* pInstance);
        static void Clean(ObjPortalGateSpawner* pInstance);
    };

    struct PICameraParameter {
        float azimuth;
        float elevation;
        float distance;
        float zRoll;
        float fovy;
        csl::math::Vector3 frameOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PICameraParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PICameraParameter* pInstance);
        static void Clean(PICameraParameter* pInstance);
    };

    struct ObjPositionIndicatorSpawner {
        enum class PurposeOfUse : uint8_t {
            QuestKodamaCollection01 = 0,
            QuestKodamaCollection02 = 1,
            ObjStriderGrindRail = 2,
            QuestFiledCenterLinePoint = 3,
            NumPurposes = 4,
        };

        PurposeOfUse purposeOfUse;
        bool useCamera;
        PICameraParameter cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPositionIndicatorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPositionIndicatorSpawner* pInstance);
        static void Clean(ObjPositionIndicatorSpawner* pInstance);
    };

    struct ObjPowerupSeedSpawner {
        enum class SeedType : int8_t {
            POWER = 0,
            GUARD = 1,
        };

        int32_t no;
        SeedType type;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPowerupSeedSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPowerupSeedSpawner* pInstance);
        static void Clean(ObjPowerupSeedSpawner* pInstance);
    };

    struct ObjPracticeNotifyVolumeSpawner {
        enum class UnlockStatus : int8_t {
            UNLOCK_NOT_LOCK = 0,
            UNLOCK_INFO_ACTIVATE = 1,
        };

        int32_t gimmickNo;
        int32_t practiceNo;
        int32_t tipsNo;
        VolumeTriggerSpawner volume;
        float margin;
        UnlockStatus unlockStatus;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPracticeNotifyVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPracticeNotifyVolumeSpawner* pInstance);
        static void Clean(ObjPracticeNotifyVolumeSpawner* pInstance);
    };

    struct ObjPropellerSpringSpawner {
        float firstSpeedHA;
        float outOfControlHA;
        float keepVelocityDistanceHA;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;
        bool isEventOn;
        bool airtrick;
        float riseSpeed;
        float riseHeight;
        float maxHeight;
        float fallSpeed;
        float fallWaitTime;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPropellerSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPropellerSpringSpawner* pInstance);
        static void Clean(ObjPropellerSpringSpawner* pInstance);
    };

    struct ObjPulleySpawner {
        csl::ut::VariableString pathName;
        float startPosition1D;
        float endPosition1D;
        bool isJumpCancel;
        csl::math::Vector3 offset;
        float minSpeed;
        float maxSpeed;
        float waitToReturnSec;
        float returnSpeed;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPulleySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPulleySpawner* pInstance);
        static void Clean(ObjPulleySpawner* pInstance);
    };

    struct ObjPulleyColumnSpawner {
        uint32_t height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPulleyColumnSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPulleyColumnSpawner* pInstance);
        static void Clean(ObjPulleyColumnSpawner* pInstance);
    };

    struct ObjPulley2Spawner {
        enum class ColumnType : int8_t {
            COLUMN_TYPE_SHORT = 0,
            COLUMN_TYPE_LONG = 1,
            NUM_COLUMN_TYPES = 2,
        };

        uint32_t pathID;
        csl::ut::Array<uint32_t> nodeList;
        float startPosition1D;
        float endPosition1D;
        float minSpeed;
        float maxSpeed;
        ColumnType columnType;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPulley2Spawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPulley2Spawner* pInstance);
        static void Clean(ObjPulley2Spawner* pInstance);
    };

    struct ObjPulley2NodeSpawner {
        enum class ColumnType : int8_t {
            COLUMN_TYPE_SHORT = 0,
            COLUMN_TYPE_LONG = 1,
            NUM_COLUMN_TYPES = 2,
        };

        ColumnType columnType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPulley2NodeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPulley2NodeSpawner* pInstance);
        static void Clean(ObjPulley2NodeSpawner* pInstance);
    };

    struct ObjPushFloorSwitchSpawner {
        enum class Condition : int8_t {
            COND_ENTER = 0,
            COND_TIMER = 1,
        };

        int32_t no;
        bool eventDriven;
        Condition condition;
        float activateTime;
        bool isViewTimer;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPushFloorSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPushFloorSwitchSpawner* pInstance);
        static void Clean(ObjPushFloorSwitchSpawner* pInstance);
    };

    struct ObjPuzzleBarrierSpawner {
        enum class InitialState : int8_t {
            STATE_ON = 0,
            STATE_OFF = 1,
        };

        int32_t no;
        InitialState initialState;
        float radius;
        float aspectRatio;
        float height;
        int32_t numSides;
        bool isEnableCollision;
        bool isEnableCeil;
        bool useSubCameraAppear;
        uint32_t cameraAppear;
        float appearWaitTime;
        bool useSubCameraDisappear;
        uint32_t cameraDisappear;
        float disappearWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPuzzleBarrierSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPuzzleBarrierSpawner* pInstance);
        static void Clean(ObjPuzzleBarrierSpawner* pInstance);
    };

    struct ObjPuzzleBarrierOpacitySpawner {
        int32_t no;
        uint8_t numSides;
        csl::ut::Array<uint32_t> includeObj;
        bool useSubCameraDisappear;
        uint32_t cameraDisappear;
        float disappearWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPuzzleBarrierOpacitySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPuzzleBarrierOpacitySpawner* pInstance);
        static void Clean(ObjPuzzleBarrierOpacitySpawner* pInstance);
    };

    struct ObjQuickStepTriggerSpawner {
        enum class ActionType : int8_t {
            ACT_START = 0,
            ACT_END = 1,
        };

        ActionType type;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuickStepTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuickStepTriggerSpawner* pInstance);
        static void Clean(ObjQuickStepTriggerSpawner* pInstance);
    };

    struct ObjQuickStepVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuickStepVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuickStepVolumeSpawner* pInstance);
        static void Clean(ObjQuickStepVolumeSpawner* pInstance);
    };

    struct ObjRedRingSpawner {
        enum class ModelType : int8_t {
            NORMAL = 0,
            TRANSLUCENT = 1,
        };

        enum class Event : int8_t {
            EVENT_NONE = 0,
            EVENT_VISIBLE = 1,
            EVENT_INVISIBLE = 2,
        };

        enum class Rotate : int8_t {
            OBJ_Y_UP = 0,
            WORLD_Y_UP = 1,
        };

        ModelType modelType;
        int32_t ItemId;
        Event EventType;
        Rotate RotateType;
        bool SeparateTranslucent;
        PathMovement pathMovement;
        float collisionRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRedRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRedRingSpawner* pInstance);
        static void Clean(ObjRedRingSpawner* pInstance);
    };

    struct ObjReflexesPanelSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjReflexesPanelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjReflexesPanelSpawner* pInstance);
        static void Clean(ObjReflexesPanelSpawner* pInstance);
    };

    struct ReflexesPanelCamera {
        csl::math::Vector3 targetOffset;
        float distance;
        csl::math::Vector3 angle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReflexesPanelCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReflexesPanelCamera* pInstance);
        static void Clean(ReflexesPanelCamera* pInstance);
    };

    struct ObjReflexesPanelManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> panelIds;
        uint32_t panelSwitchId;
        float timeLimit;
        uint32_t requestNum;
        float createPanelMinTime;
        float createPanelMaxTime;
        float lightPanelMinTime;
        float lightPanelMaxTime;
        ReflexesPanelCamera cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjReflexesPanelManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjReflexesPanelManagerSpawner* pInstance);
        static void Clean(ObjReflexesPanelManagerSpawner* pInstance);
    };

    struct ObjReleaseMapSpawner {
        int32_t no;
        int32_t gimmickInfoNo;
        uint32_t cameraUUID;
        float scanCameraEaseIn;
        float scanCameraEaseOut;
        float mapSensorDistance;
        int32_t viewNo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjReleaseMapSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjReleaseMapSpawner* pInstance);
        static void Clean(ObjReleaseMapSpawner* pInstance);
    };

    struct ObjResonatorSpawner {
        enum class Condition : int8_t {
            COND_ENTER = 0,
            COND_TIMER = 1,
        };

        enum class PhraseType : int8_t {
            PHRASE_1 = 0,
            PHRASE_2 = 1,
            PHRASE_3 = 2,
            PHRASE_4 = 3,
            PHRASE_5 = 4,
        };

        int32_t no;
        bool eventDriven;
        Condition condition;
        float activateTime;
        PhraseType phraseType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjResonatorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjResonatorSpawner* pInstance);
        static void Clean(ObjResonatorSpawner* pInstance);
    };

    struct ObjRingSpawner {
        enum class Visibility : int8_t {
            Visible = 0,
            Invisible = 1,
        };

        Visibility visibility;
        float respawnTime;
        PathMovement pathMovement;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRingSpawner* pInstance);
        static void Clean(ObjRingSpawner* pInstance);
    };

    struct ObjSuperRingSpawner {
        enum class RotateAxis : int8_t {
            WorldAxisY = 0,
            LocalAxisY = 1,
        };

        RotateAxis axis;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSuperRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSuperRingSpawner* pInstance);
        static void Clean(ObjSuperRingSpawner* pInstance);
    };

    struct ObjRingGateSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRingGateSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRingGateSpawner* pInstance);
        static void Clean(ObjRingGateSpawner* pInstance);
    };

    struct CameraParam {
        float interoplateTimeActivate;
        float interoplateTimeDeactivate;
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 cameraPosOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CameraParam* pInstance);
        static void Clean(CameraParam* pInstance);
    };

    struct ObjRopeMachineSpawner {
        int32_t no;
        float maxSpeed;
        float minSpeed;
        float maxStopTime;
        float minStopTime;
        float activateTime;
        float startWaitTime;
        float doubleJump;
        bool randomJump;
        int32_t doubleJumpNumerator;
        int32_t doubleJumpDenominator;
        CameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRopeMachineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRopeMachineSpawner* pInstance);
        static void Clean(ObjRopeMachineSpawner* pInstance);
    };

    struct ObjRotatableMirrorSpawner {
        enum class RotateType : int32_t {
            HORIZANTAL = 0,
            VERTICAL = 1,
            FIXED = 2,
        };

        int32_t no;
        bool eventDriven;
        RotateType rotateType;
        float angularVelocity;
        int32_t initVerticalID;
        GimmickCameraOptionalParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotatableMirrorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotatableMirrorSpawner* pInstance);
        static void Clean(ObjRotatableMirrorSpawner* pInstance);
    };

    struct ObjRotatableStatueSpawner {
        enum class ModelType : int8_t {
            TYPE_NORMAL = 0,
            TYPE_LASER = 1,
        };

        enum class RotateType : int8_t {
            ROTATE_TYPE_45 = 0,
            ROTATE_TYPE_225 = 1,
            ROTATE_TYPE_RANDOM = 2,
        };

        enum class RotatePositionType : int32_t {
            COLLECT_TYPE_45 = 1,
            COLLECT_TYPE_90 = 2,
            COLLECT_TYPE_135 = 3,
            COLLECT_TYPE_180 = 4,
            COLLECT_TYPE_225 = 5,
            COLLECT_TYPE_270 = 6,
            COLLECT_TYPE_315 = 7,
        };

        ModelType type;
        int32_t no;
        bool eventDriven;
        bool rotatable;
        RotateType rotateType;
        RotatePositionType collectType;
        float angularVelocity;
        int32_t randomClearCount;
        int32_t randomRoundMin;
        int32_t randomRoundMax;
        csl::ut::Array<uint32_t> targetList;
        bool isUseEyeSightTarget;
        csl::ut::Array<uint32_t> eyeSightTargetList;
        GimmickCameraOptionalParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotatableStatueSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotatableStatueSpawner* pInstance);
        static void Clean(ObjRotatableStatueSpawner* pInstance);
    };

    struct ObjRotatableTombStoneSpawner {
        enum class RotatePositionType : int32_t {
            COLLECT_TYPE_45 = 1,
            COLLECT_TYPE_90 = 2,
            COLLECT_TYPE_135 = 3,
            COLLECT_TYPE_180 = 4,
            COLLECT_TYPE_225 = 5,
            COLLECT_TYPE_270 = 6,
            COLLECT_TYPE_315 = 7,
            COLLECT_TYPE_0 = 8,
        };

        int32_t no;
        bool isLock;
        RotatePositionType collectType;
        float angularVelocity;
        csl::ut::Array<uint32_t> rotateList;
        uint32_t rotatablemanager;
        uint32_t tombStatue;
        csl::math::Vector3 cameraOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotatableTombStoneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotatableTombStoneSpawner* pInstance);
        static void Clean(ObjRotatableTombStoneSpawner* pInstance);
    };

    struct RunningMachineMileage {
        float length;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RunningMachineMileage* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RunningMachineMileage* pInstance);
        static void Clean(RunningMachineMileage* pInstance);
    };

    struct RunningMachineKeepFixedParam {
        float targetSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RunningMachineKeepFixedParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RunningMachineKeepFixedParam* pInstance);
        static void Clean(RunningMachineKeepFixedParam* pInstance);
    };

    struct RunningMachineKeepSinParam {
        float offset;
        float amplitude;
        float period;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RunningMachineKeepSinParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RunningMachineKeepSinParam* pInstance);
        static void Clean(RunningMachineKeepSinParam* pInstance);
    };

    struct RunningMachineKeepRandomParam {
        float min;
        float max;
        float period;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RunningMachineKeepRandomParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RunningMachineKeepRandomParam* pInstance);
        static void Clean(RunningMachineKeepRandomParam* pInstance);
    };

    struct RunningMachineKeep {
        enum class TargetSpeedType : uint8_t {
            TypeFixed = 0,
            TypeSin = 1,
            TypeRandom = 2,
        };

        TargetSpeedType targetSpeedType;
        RunningMachineKeepFixedParam fixed;
        RunningMachineKeepSinParam sin;
        RunningMachineKeepRandomParam random;
        float speedThreshold;
        float speedTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RunningMachineKeep* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RunningMachineKeep* pInstance);
        static void Clean(RunningMachineKeep* pInstance);
    };

    struct ObjRunningMachineSpawner {
        enum class ClearType : uint8_t {
            ClearTypeMileage = 0,
            ClearTypeKeep = 1,
        };

        int32_t no;
        ClearType clearType;
        RunningMachineMileage mileage;
        RunningMachineKeep keep;
        bool useTimer;
        float activateTime;
        float startWaitTime;
        uint32_t cameraActivator;
        bool fixPlayerPos;
        float foremostSpeed;
        float backmostSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRunningMachineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRunningMachineSpawner* pInstance);
        static void Clean(ObjRunningMachineSpawner* pInstance);
    };

    struct SaveDenyVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SaveDenyVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SaveDenyVolumeSpawner* pInstance);
        static void Clean(SaveDenyVolumeSpawner* pInstance);
    };

    struct ObjScrapeBallSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjScrapeBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjScrapeBallSpawner* pInstance);
        static void Clean(ObjScrapeBallSpawner* pInstance);
    };

    struct SelectCannonLaunch {
        csl::math::Vector3 direction;
        float firstSpeed;
        float keepVelocityDistance;
        float outOfControl;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SelectCannonLaunch* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SelectCannonLaunch* pInstance);
        static void Clean(SelectCannonLaunch* pInstance);
    };

    struct ObjSelectCannonSpawner {
        bool isLimitOn;
        float limitTime;
        int32_t selectNum;
        SelectCannonLaunch launchParam[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSelectCannonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSelectCannonSpawner* pInstance);
        static void Clean(ObjSelectCannonSpawner* pInstance);
    };

    struct ObjSequenceColliderSpawner {
        enum class Shape : int8_t {
            Box = 0,
            Sphere = 1,
            Capsule = 2,
            NumShapes = 3,
        };

        int32_t no;
        Shape shape;
        csl::math::Vector3 offset;
        csl::math::Vector3 extents;
        float radius;
        float height;
        bool collidesWithCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSequenceColliderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSequenceColliderSpawner* pInstance);
        static void Clean(ObjSequenceColliderSpawner* pInstance);
    };

    struct ObjSequenceItemSpawner {
        int32_t no;
        bool cyloopDriven;
        float cyloopSignDistance;
        float cyloopSignTolerance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSequenceItemSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSequenceItemSpawner* pInstance);
        static void Clean(ObjSequenceItemSpawner* pInstance);
    };

    struct ObjSequenceSwitchVolumeSpawner {
        int32_t no;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        bool menuDisabled;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSequenceSwitchVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSequenceSwitchVolumeSpawner* pInstance);
        static void Clean(ObjSequenceSwitchVolumeSpawner* pInstance);
    };

    struct ObjSetPathNodeSpawner {
        enum class LineType : int8_t {
            LINETYPE_SNS = 0,
            LINETYPE_STRAIGHT = 1,
            NUM = 2,
        };

        uint32_t nodeId;
        LineType lineType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathNodeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathNodeSpawner* pInstance);
        static void Clean(ObjSetPathNodeSpawner* pInstance);
    };

    struct ConnectParameter {
        enum class ConnectType : int8_t {
            CONNECT_SNS = 0,
            CONNECT_STRAIGHT = 1,
        };

        bool isConnect;
        ConnectType connectType;
        float splineTangentLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ConnectParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ConnectParameter* pInstance);
        static void Clean(ConnectParameter* pInstance);
    };

    struct PathSetPathParameter {
        enum class LineType : int8_t {
            LINETYPE_SNS = 0,
            LINETYPE_STRAIGHT = 1,
        };

        csl::ut::Array<uint32_t> nodeList;
        bool isLoopPath;
        LineType startLineType;
        float divideLength;
        ConnectParameter connectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathSetPathParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathSetPathParameter* pInstance);
        static void Clean(PathSetPathParameter* pInstance);
    };

    struct ObjSetPathSpawner {
        PathSetPathParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathSpawner* pInstance);
        static void Clean(ObjSetPathSpawner* pInstance);
    };

    struct PathLoopParameter {
        enum class EasingPoint : int8_t {
            BothPoint = 0,
            BeginPoint = 1,
            EndPonit = 2,
        };

        float inRadius;
        float outRadius;
        float angle;
        float shiftDistance;
        float inDistance;
        float outDistance;
        float easingForce;
        EasingPoint easingPoint;
        ConnectParameter connectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathLoopParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathLoopParameter* pInstance);
        static void Clean(PathLoopParameter* pInstance);
    };

    struct ObjSetPathLoopSpawner {
        PathLoopParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathLoopSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathLoopSpawner* pInstance);
        static void Clean(ObjSetPathLoopSpawner* pInstance);
    };

    struct PathSpiralParameter {
        enum class RotDir : int8_t {
            ROT_DIR_LEFT = 0,
            ROT_DIR_RIGHT = 1,
        };

        enum class EasingPoint : int8_t {
            BothPoint = 0,
            BeginPoint = 1,
            EndPonit = 2,
        };

        RotDir rotDir;
        float inRadius;
        float outRadius;
        float angle;
        float shiftDistance;
        float inDistance;
        float outDistance;
        float easingForce;
        EasingPoint easingPoint;
        ConnectParameter connectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathSpiralParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathSpiralParameter* pInstance);
        static void Clean(PathSpiralParameter* pInstance);
    };

    struct ObjSetPathSpiralSpawner {
        PathSpiralParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathSpiralSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathSpiralSpawner* pInstance);
        static void Clean(ObjSetPathSpiralSpawner* pInstance);
    };

    struct PathLineParameter {
        float distance;
        float twistAngle;
        ConnectParameter connectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathLineParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathLineParameter* pInstance);
        static void Clean(PathLineParameter* pInstance);
    };

    struct ObjSetPathLineSpawner {
        PathLineParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathLineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathLineSpawner* pInstance);
        static void Clean(ObjSetPathLineSpawner* pInstance);
    };

    struct PathCircleParameter {
        enum class NormalType : int8_t {
            NOR_DEFAULT = 0,
            NOR_OUTSIDE = 1,
            NOR_INSIDE = 2,
        };

        NormalType normalType;
        float radius;
        float divideRate;
        bool isReverse;
        ConnectParameter connectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathCircleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathCircleParameter* pInstance);
        static void Clean(PathCircleParameter* pInstance);
    };

    struct ObjSetPathCircleSpawner {
        PathCircleParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathCircleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathCircleSpawner* pInstance);
        static void Clean(ObjSetPathCircleSpawner* pInstance);
    };

    struct PathPolygonParameter {
        enum class PolygonType : int8_t {
            TRIANGLE_PATH = 0,
            SQUARE_PATH = 1,
        };

        enum class NormalType : int8_t {
            NOR_DEFAULT = 0,
            NOR_OUTSIDE = 1,
            NOR_INSIDE = 2,
        };

        PolygonType polygonType;
        NormalType normalType;
        float width;
        float height;
        float offsetHeight;
        ConnectParameter connectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathPolygonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathPolygonParameter* pInstance);
        static void Clean(PathPolygonParameter* pInstance);
    };

    struct ObjSetPathPolygonSpawner {
        PathPolygonParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathPolygonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathPolygonSpawner* pInstance);
        static void Clean(ObjSetPathPolygonSpawner* pInstance);
    };

    struct ObjSetPathConnectorSpawner {
        enum class PathType : int8_t {
            OBJ_PATH = 0,
            GR_PATH = 1,
            SV_PATH = 2,
        };

        int32_t pathUID;
        PathType pathType;
        csl::ut::Array<uint32_t> pathList;
        bool isLoopPath;
        float divideLength;
        bool isMovable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSetPathConnectorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSetPathConnectorSpawner* pInstance);
        static void Clean(ObjSetPathConnectorSpawner* pInstance);
    };

    struct ObjShotgunTouchManagerSpawner {
        int32_t no;
        float createRadiusMin;
        float createRadiusMax;
        float createHeight;
        float createVelocity;
        uint32_t switchId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShotgunTouchManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShotgunTouchManagerSpawner* pInstance);
        static void Clean(ObjShotgunTouchManagerSpawner* pInstance);
    };

    struct ObjShotgunTouchSwitchSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShotgunTouchSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShotgunTouchSwitchSpawner* pInstance);
        static void Clean(ObjShotgunTouchSwitchSpawner* pInstance);
    };

    struct ObjShutterSpawner {
        int32_t no;
        csl::math::Vector3 shutterSize;
        float moveHeight;
        float moveSpeed;
        bool initOpen;
        csl::ut::Array<uint32_t> moveLinkList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShutterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShutterSpawner* pInstance);
        static void Clean(ObjShutterSpawner* pInstance);
    };

    struct ObjSlashCommonSpawner {
        enum class ObjType : int8_t {
            BONFIRE = 0,
            LIGHT_LARGE = 1,
            LIGHT_MEDIUM = 2,
            LIGHT_SMALL = 3,
            CUTTREE = 4,
            DEADLEAVES = 5,
            SANDPILE = 6,
            ASHPILE = 7,
            LANTERN = 8,
            FLOWER = 9,
            LIGHT_TREE = 10,
            GIMMICK_LIGHT = 11,
            OBJTYPE_NUM = 12,
        };

        enum class Condition : int8_t {
            COND_ONCE = 0,
            COND_TIMER = 1,
        };

        int32_t no;
        bool eventDriven;
        ObjType type;
        Condition condition;
        float activateTime;
        bool isLimitedTime;
        uint32_t startHour;
        uint32_t startMin;
        uint32_t endHour;
        uint32_t endMin;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSlashCommonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSlashCommonSpawner* pInstance);
        static void Clean(ObjSlashCommonSpawner* pInstance);
    };

    struct ObjSliderParamTriggerSpawner {
        float speed;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSliderParamTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSliderParamTriggerSpawner* pInstance);
        static void Clean(ObjSliderParamTriggerSpawner* pInstance);
    };

    struct ObjSliderTriggerSpawner {
        enum class ActionType : int8_t {
            ACT_BEGIN = 0,
            ACT_END = 1,
        };

        ActionType action;
        float speed;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSliderTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSliderTriggerSpawner* pInstance);
        static void Clean(ObjSliderTriggerSpawner* pInstance);
    };

    struct ObjSpotLightSpawner {
        float colorR;
        float colorG;
        float colorB;
        float innerConeAngle;
        float outerConeAngle;
        float attenuationRadius;
        bool enableShadow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpotLightSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpotLightSpawner* pInstance);
        static void Clean(ObjSpotLightSpawner* pInstance);
    };

    struct ObjSpiderRollingParam {
        float speed;
        float phase;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderRollingParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderRollingParam* pInstance);
        static void Clean(ObjSpiderRollingParam* pInstance);
    };

    struct ObjSpringSpawner {
        enum class Visual : int8_t {
            Normal = 0,
            Sky = 1,
        };

        Visual visual;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;
        bool isHorming;
        bool isEventOn;
        bool isCyloopOn;
        float cyloopSignDistance;
        float cyloopSignTolerance;
        bool isCyKnuckleOn;
        bool isHorizon;
        bool airtrick;
        bool isVisible;
        bool isSmooth;
        ActionNotification actions[3];
        ObjSpiderRollingParam rollingParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpringSpawner* pInstance);
        static void Clean(ObjSpringSpawner* pInstance);
    };

    struct ObjSpringPoleSpawner {
        float speedMin;
        float speedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpringPoleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpringPoleSpawner* pInstance);
        static void Clean(ObjSpringPoleSpawner* pInstance);
    };

    struct ObjStartPositionSpawner {
        enum class StartType : int8_t {
            STAND = 0,
            RUNNING = 1,
            FALL = 2,
            DOWN = 3,
            BOARDING = 4,
        };

        StartType m_startType;
        float m_speed;
        float m_time;
        float m_outOfControlTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStartPositionSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStartPositionSpawner* pInstance);
        static void Clean(ObjStartPositionSpawner* pInstance);
    };

    struct ObjStorageKeySpawner {
        int32_t no;
        bool eventDriven;
        bool cyloopDriven;
        float cyloopSignDistance;
        float cyloopSignTolerance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStorageKeySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStorageKeySpawner* pInstance);
        static void Clean(ObjStorageKeySpawner* pInstance);
    };

    struct ObjSwitchVolumeSpawner {
        enum class Condition : int8_t {
            COND_ON_TRIGGER = 0,
            COND_PULSE = 1,
            COND_TIMER_ONCE = 2,
            COND_TIMER = 3,
            COND_ON_STAY = 4,
        };

        Condition condition;
        float lifetime;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSwitchVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSwitchVolumeSpawner* pInstance);
        static void Clean(ObjSwitchVolumeSpawner* pInstance);
    };

    struct ObjTerrainBlockSpawner {
        enum class Block : int8_t {
            BLOCK_BOX = 0,
            BLOCK_ARCH_CURVE_UP = 1,
            BLOCK_ARCH_CURVE_DOWN = 2,
            BLOCK_ARCH_CURVE_RIGHT = 3,
            BLOCK_ARCH_CURVE_LEFT = 4,
        };

        enum class Layer : int8_t {
            LAYER_LAND = 0,
            LAYER_MOVELAND = 1,
        };

        enum class WallType : int8_t {
            WALL_NONE = 0,
            WALL_EXIST = 1,
            WALL_COLLISION = 2,
        };

        enum class Color : int8_t {
            COLOR_GREEN = 0,
            COLOR_BROWN = 1,
            COLOR_BLUE = 2,
            COLOR_WHITE = 3,
            COLOR_RED = 4,
            COLOR_YELLOW = 5,
        };

        Block BlockType;
        float BlockWidth;
        float BlockWidthEnd;
        float BlockHeight;
        float BlockDepth;
        float BlockDepthOffset;
        float ArchRadius;
        float ArchDegree;
        uint32_t ArchDivNum;
        float SlopeHeight;
        Layer LayerGroup;
        bool AttrParkour;
        bool AttrBreakable;
        bool AttrSlope;
        bool AttrWall;
        bool AttrLoop;
        bool AttrSlide;
        WallType WallLeft;
        WallType WallRight;
        WallType WallFront;
        WallType WallBack;
        float WallHeight;
        Color ColorType;
        float Interval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTerrainBlockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTerrainBlockSpawner* pInstance);
        static void Clean(ObjTerrainBlockSpawner* pInstance);
    };

    struct Point {
        float z;
        float y;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Point* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Point* pInstance);
        static void Clean(Point* pInstance);
    };

    struct ObjTerrainBlocksSpawner {
        enum class Layer : int8_t {
            LAYER_LAND = 0,
            LAYER_MOVELAND = 1,
        };

        enum class WallType : int8_t {
            WALL_NONE = 0,
            WALL_EXIST = 1,
            WALL_COLLISION = 2,
        };

        enum class Color : int8_t {
            COLOR_GREEN = 0,
            COLOR_BROWN = 1,
            COLOR_BLUE = 2,
            COLOR_WHITE = 3,
            COLOR_RED = 4,
            COLOR_YELLOW = 5,
        };

        float Width;
        float Height;
        Point Blocks[30];
        Layer LayerGroup;
        bool AttrEnableParkour;
        WallType WallLeft;
        WallType WallRight;
        WallType WallFront;
        WallType WallBack;
        float WallHeight;
        Color ColorType;
        float Interval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTerrainBlocksSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTerrainBlocksSpawner* pInstance);
        static void Clean(ObjTerrainBlocksSpawner* pInstance);
    };

    struct ObjTerrainPathSpawner {
        enum class WallType : int8_t {
            WALL_NONE = 0,
            WALL_EXIST = 1,
            WALL_COLLISION = 2,
        };

        enum class NormalType : int8_t {
            NORMAL_BY_YUP = 0,
            NORMAL_BY_PATH = 1,
        };

        csl::ut::VariableString pathName;
        float widthStart;
        float widthEnd;
        float height;
        float wallHeight;
        int32_t split;
        WallType rightWallType;
        WallType leftWallType;
        WallType frontWallType;
        WallType backWallType;
        bool attrLoop;
        NormalType normalType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTerrainPathSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTerrainPathSpawner* pInstance);
        static void Clean(ObjTerrainPathSpawner* pInstance);
    };

    struct ObjTerrainPathCylinderSpawner {
        csl::ut::VariableString pathName;
        float radius;
        int32_t numPlain;
        float splitDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTerrainPathCylinderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTerrainPathCylinderSpawner* pInstance);
        static void Clean(ObjTerrainPathCylinderSpawner* pInstance);
    };

    struct ObjThornSpawner {
        enum class MoveType : int8_t {
            TYPE_APPEAR = 0,
            TYPE_DISAPPEAR = 1,
            TYPE_MOVE = 2,
        };

        csl::math::Vector2 size;
        csl::math::Vector2 interval;
        float offTime;
        float onTime;
        float phase;
        MoveType type;
        bool eventDriven;
        bool hasRigidbody;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjThornSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjThornSpawner* pInstance);
        static void Clean(ObjThornSpawner* pInstance);
    };

    struct ObjThornBallMoveParam {
        enum class Direction : int8_t {
            DIR_HORIZONTAL = 0,
            DIR_VERTICAL = 1,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        float time;
        float distance;
        float phase;
        Direction direction;
        TimeType timeType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjThornBallMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjThornBallMoveParam* pInstance);
        static void Clean(ObjThornBallMoveParam* pInstance);
    };

    struct ObjThornBallRollingParam {
        enum class Direction : int8_t {
            DIR_HORIZONTAL = 0,
            DIR_VERTICAL = 1,
        };

        float time;
        float radius;
        float phase;
        Direction direction;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjThornBallRollingParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjThornBallRollingParam* pInstance);
        static void Clean(ObjThornBallRollingParam* pInstance);
    };

    struct ObjThornBallSpawner {
        enum class Type : int8_t {
            TYPE_NORMAL = 0,
            TYPE_MOVE = 1,
            TYPE_ROLLING = 2,
        };

        Type type;
        bool hitEnemy;
        ObjThornBallMoveParam moveParam;
        ObjThornBallRollingParam rollingParam;
        bool eventDriven;
        float collisionRate;
        bool isEnableTimeStop;
        float stopTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjThornBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjThornBallSpawner* pInstance);
        static void Clean(ObjThornBallSpawner* pInstance);
    };

    struct ObjThornCylinderSpawner {
        enum class Type : int8_t {
            TYPE_SHORT = 0,
            TYPE_LONG = 1,
            NUM_TYPES = 2,
        };

        Type type;
        bool rigidbody;
        bool isMoveFloorEntry;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjThornCylinderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjThornCylinderSpawner* pInstance);
        static void Clean(ObjThornCylinderSpawner* pInstance);
    };

    struct ObjTimeBallSpawner {
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBallSpawner* pInstance);
        static void Clean(ObjTimeBallSpawner* pInstance);
    };

    struct ObjTimeBallGeneratorSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBallGeneratorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBallGeneratorSpawner* pInstance);
        static void Clean(ObjTimeBallGeneratorSpawner* pInstance);
    };

    struct ObjTimeBallGoalSpawner {
        int32_t no;
        float radius;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBallGoalSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBallGoalSpawner* pInstance);
        static void Clean(ObjTimeBallGoalSpawner* pInstance);
    };

    struct ObjTimeBallManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> goals;
        uint32_t ball;
        uint32_t ballGenerator;
        float time;
        float maxDistance;
        bool isUseStartCamera;
        uint32_t startCamera;
        float startWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBallManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBallManagerSpawner* pInstance);
        static void Clean(ObjTimeBallManagerSpawner* pInstance);
    };

    struct ObjTimeBombSpawner_ActivationCamera {
        csl::math::Vector3 positionOffset;
        csl::math::Vector3 targetOffset;
        float fovy;
        float endInterpolateTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBombSpawner_ActivationCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBombSpawner_ActivationCamera* pInstance);
        static void Clean(ObjTimeBombSpawner_ActivationCamera* pInstance);
    };

    struct ObjTimeBombSpawner {
        ObjTimeBombSpawner_ActivationCamera activationCamera;
        bool disableInputInCatching;
        float catchingMoveHeight;
        float limitTime;
        csl::math::Vector3 levitationOffset;
        float levitationAngleY;
        float levitationFollowFactor;
        float cameraDistance;
        float cameraInitialElevation;
        csl::math::Vector3 putOffset;
        float explodeRadius;
        float explodeTime;
        float despawnTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBombSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBombSpawner* pInstance);
        static void Clean(ObjTimeBombSpawner* pInstance);
    };

    struct ObjTimeBombGeneratorSpawner {
        ObjTimeBombSpawner timeBomb;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBombGeneratorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBombGeneratorSpawner* pInstance);
        static void Clean(ObjTimeBombGeneratorSpawner* pInstance);
    };

    struct ObjTimerPanelSpawner {
        int32_t no;
        uint32_t linkObj;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimerPanelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimerPanelSpawner* pInstance);
        static void Clean(ObjTimerPanelSpawner* pInstance);
    };

    struct ObjTimerPowerupSeedSpawner {
        enum class SeedType : int8_t {
            POWER = 0,
            GUARD = 1,
        };

        int32_t no;
        SeedType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimerPowerupSeedSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimerPowerupSeedSpawner* pInstance);
        static void Clean(ObjTimerPowerupSeedSpawner* pInstance);
    };

    struct ObjTimerRingSpawner {
        enum class SetType : int8_t {
            EquallySpaced = 0,
            NodeID = 1,
        };

        int32_t no;
        csl::ut::VariableString pathName;
        SetType setType;
        int8_t num;
        csl::ut::Array<uint32_t> setNodeList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimerRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimerRingSpawner* pInstance);
        static void Clean(ObjTimerRingSpawner* pInstance);
    };

    struct ObjTimerSwitchSpawner {
        int32_t no;
        float activateTime;
        bool isUseStartCamera;
        uint32_t startCamera;
        float startWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimerSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimerSwitchSpawner* pInstance);
        static void Clean(ObjTimerSwitchSpawner* pInstance);
    };

    struct ObjTimeStopVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeStopVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeStopVolumeSpawner* pInstance);
        static void Clean(ObjTimeStopVolumeSpawner* pInstance);
    };

    struct ObjTombStatueSpawner {
        int32_t no;
        bool isLock;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTombStatueSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTombStatueSpawner* pInstance);
        static void Clean(ObjTombStatueSpawner* pInstance);
    };

    struct ObjTombStoneManagerSpawner {
        csl::ut::Array<uint32_t> rotateList;
        uint32_t cameraActivator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTombStoneManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTombStoneManagerSpawner* pInstance);
        static void Clean(ObjTombStoneManagerSpawner* pInstance);
    };

    struct ObjTowerSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTowerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTowerSpawner* pInstance);
        static void Clean(ObjTowerSpawner* pInstance);
    };

    struct ObjTraceStoneBuilderSpawner {
        csl::math::Vector3 size;
        uint32_t controlBoard;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTraceStoneBuilderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTraceStoneBuilderSpawner* pInstance);
        static void Clean(ObjTraceStoneBuilderSpawner* pInstance);
    };

    struct ObjTraceStoneBuildSwitchSpawner {
        csl::ut::Array<uint32_t> relatedObj;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTraceStoneBuildSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTraceStoneBuildSwitchSpawner* pInstance);
        static void Clean(ObjTraceStoneBuildSwitchSpawner* pInstance);
    };

    struct ObjTraceStoneControlBoardSpawner {
        int8_t recordNum;
        uint32_t boardSwitch;
        csl::ut::Array<uint32_t> anchors;
        uint32_t developInput;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTraceStoneControlBoardSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTraceStoneControlBoardSpawner* pInstance);
        static void Clean(ObjTraceStoneControlBoardSpawner* pInstance);
    };

    struct ObjTreasureChestSpawner {
        enum class EventType : int8_t {
            EVENT_NONE = 0,
            EVENT_HIDE = 1,
            EVENT_NO_REACTION = 2,
        };

        int32_t no;
        EventType eventDriven;
        int32_t num;
        bool useSubCamera;
        csl::math::Vector3 subCameraPos;
        csl::math::Vector3 subCameraTarget;
        float subCameraDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTreasureChestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTreasureChestSpawner* pInstance);
        static void Clean(ObjTreasureChestSpawner* pInstance);
    };

    struct ObjTutorialWallSpawner {
        csl::math::Vector3 scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTutorialWallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTutorialWallSpawner* pInstance);
        static void Clean(ObjTutorialWallSpawner* pInstance);
    };

    struct ObjTutoIslandVolumeSpawner {
        enum class TutoIsland : uint8_t {
            CAMERA = 0,
            CHALLENGE = 1,
            PRACTICE = 2,
            SKILL_PIECE = 3,
            ENEMY_LEVEL = 4,
            NINJA = 5,
            PORTAL_PIECE = 6,
            PUZZLE = 7,
            CYLOOP = 8,
            CYLOOP_TEST = 9,
            CYLOOP_ENEMY = 10,
            PORTAL = 11,
            PARRY = 12,
            BRIDGE = 13,
            SPRING = 14,
            MAP = 15,
            NUM = 16,
        };

        enum class TutoAction : uint8_t {
            PHASE_NONE = 0,
            PHASE_START = 1,
            PHASE_START_AUTO_CLEAR = 2,
            PHASE_CLEAR = 3,
        };

        VolumeTriggerSpawner volume;
        TutoIsland islandPhase;
        TutoAction enterAction;
        TutoAction leaveAction;
        bool showClearUI;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTutoIslandVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTutoIslandVolumeSpawner* pInstance);
        static void Clean(ObjTutoIslandVolumeSpawner* pInstance);
    };

    struct FrontParam {
        float frontOcTime;
        float frontSpeed;
        float frontKeepVelocityTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FrontParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FrontParam* pInstance);
        static void Clean(FrontParam* pInstance);
    };

    struct BackParam {
        float backOcTime;
        float backSpeed;
        float backKeepVelocityTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BackParam* pInstance);
        static void Clean(BackParam* pInstance);
    };

    struct ObjTwoWayGrindBoosterSpawner {
        FrontParam frontParam;
        BackParam backParam;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTwoWayGrindBoosterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTwoWayGrindBoosterSpawner* pInstance);
        static void Clean(ObjTwoWayGrindBoosterSpawner* pInstance);
    };

    struct ObjUnmovedStatueSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUnmovedStatueSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUnmovedStatueSpawner* pInstance);
        static void Clean(ObjUnmovedStatueSpawner* pInstance);
    };

    struct ObjUnmovedTombStoneSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> targetList;
        uint32_t tombStatue;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUnmovedTombStoneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUnmovedTombStoneSpawner* pInstance);
        static void Clean(ObjUnmovedTombStoneSpawner* pInstance);
    };

    struct ObjWarpObjVolumeSpawner {
        VolumeTriggerSpawner volume;
        uint32_t target;
        uint32_t transformLocator;
        bool is_use_disp;
        bool is_disp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarpObjVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarpObjVolumeSpawner* pInstance);
        static void Clean(ObjWarpObjVolumeSpawner* pInstance);
    };

    struct ObjWarpTriggerSpawner {
        enum class StatusType : int8_t {
            RESET = 0,
            CONTINUANCE = 1,
        };

        uint32_t warpPoint;
        StatusType status;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarpTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarpTriggerSpawner* pInstance);
        static void Clean(ObjWarpTriggerSpawner* pInstance);
    };

    struct WaterFallVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WaterFallVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WaterFallVolumeSpawner* pInstance);
        static void Clean(WaterFallVolumeSpawner* pInstance);
    };

    struct ObjWaterVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWaterVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWaterVolumeSpawner* pInstance);
        static void Clean(ObjWaterVolumeSpawner* pInstance);
    };

    struct ObjWaveCannonBoxSpawner {
        enum class BoxSize : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_NUM = 3,
        };

        BoxSize size;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWaveCannonBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWaveCannonBoxSpawner* pInstance);
        static void Clean(ObjWaveCannonBoxSpawner* pInstance);
    };

    struct ObjWaveCannonWallSpawner {
        enum class WallSize : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_NUM = 3,
        };

        WallSize size;
        bool isHATarget;
        int32_t maxHits;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWaveCannonWallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWaveCannonWallSpawner* pInstance);
        static void Clean(ObjWaveCannonWallSpawner* pInstance);
    };

    struct ObjWeightSpawner {
        float scale;
        float releaseAngle;
        float releaseSpeed;
        float gravity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWeightSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWeightSpawner* pInstance);
        static void Clean(ObjWeightSpawner* pInstance);
    };

    struct ObjWeightSwitchSpawner {
        enum class TurnOnType : int8_t {
            TYPE_WEIGHT = 0,
            TYPE_STOMPING = 1,
        };

        enum class Condition : int8_t {
            COND_TIMER = 0,
            COND_ENTER = 1,
        };

        TurnOnType turnOnType;
        Condition condition;
        float activateTime;
        float cyHammerTime;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWeightSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWeightSwitchSpawner* pInstance);
        static void Clean(ObjWeightSwitchSpawner* pInstance);
    };

    struct ObjWhirlpoolDrainageSpawner {
        float waterColliderRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWhirlpoolDrainageSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWhirlpoolDrainageSpawner* pInstance);
        static void Clean(ObjWhirlpoolDrainageSpawner* pInstance);
    };

    struct ObjWideSpringSpawner {
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWideSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWideSpringSpawner* pInstance);
        static void Clean(ObjWideSpringSpawner* pInstance);
    };

    struct ObjWoodBoxSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWoodBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWoodBoxSpawner* pInstance);
        static void Clean(ObjWoodBoxSpawner* pInstance);
    };

    struct ObjAppearBoxSpawner {
        bool eventDriven;
        uint32_t blockNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAppearBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAppearBoxSpawner* pInstance);
        static void Clean(ObjAppearBoxSpawner* pInstance);
    };

    struct ObjBalloonSpawner {
        enum class Color : int8_t {
            COLOR_W9 = 0,
            COLOR_RED = 1,
            COLOR_BLUE = 2,
            COLOR_YELLOW = 3,
            COLOR_GREEN = 4,
            NUM_COLORS = 5,
        };

        enum class Dimension : int8_t {
            DIM_SV = 0,
            DIM_FV = 1,
        };

        Color balloonColor;
        Dimension dimension;
        float upSpeed;
        float speedMin;
        float speedMax;
        float respawnTime;
        float outOfControlTime;
        float keepVelocityTime;
        float ignoreSwingingTime;
        bool isDefaultPositionRespawn;
        bool isGroupSet;
        bool eventDriven;
        bool isHorming;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBalloonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBalloonSpawner* pInstance);
        static void Clean(ObjBalloonSpawner* pInstance);
    };

    struct ObjBoardingJumpBoardSpawner {
        enum class SizeType : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_L = 2,
            SIZE_COUNT = 3,
        };

        enum class Trick : int8_t {
            NONE = 0,
            YES = 1,
            BUTTTON = 2,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        float distance;
        float height;
        float outStrength;
        float inStrength;
        float inAngle;
        float impulseSpeedOn;
        float outOfControl;
        float motionTime;
        SizeType size;
        ActionNotification actions[3];
        Trick useTrick;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        bool eventDriven;
        bool isFall;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;
        bool isChange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBoardingJumpBoardSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBoardingJumpBoardSpawner* pInstance);
        static void Clean(ObjBoardingJumpBoardSpawner* pInstance);
    };

    struct ObjBreakCliffSpawner {
        enum class TerminusType : int8_t {
            NONE = 0,
            RIGHT_ONRY = 1,
            LEFT_ONRY = 2,
            BOTH = 3,
        };

        float shakeWaitTime;
        float shakeTime;
        bool doesRespawn;
        float respawnTime;
        uint32_t num;
        TerminusType terminus;
        bool isFall;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBreakCliffSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBreakCliffSpawner* pInstance);
        static void Clean(ObjBreakCliffSpawner* pInstance);
    };

    struct ObjCannonSpawner {
        enum class ModelType : int8_t {
            FV = 0,
            FV_BASELESS = 1,
            SV = 2,
            SV_BASELESS = 3,
            MODEL_NUM = 4,
        };

        enum class TargetType : int8_t {
            OBJECT = 0,
            COORDINATE = 1,
        };

        ModelType modelType;
        TargetType targetType;
        uint32_t target;
        csl::math::Vector3 targetPos;
        float speed;
        float velocityRatio;
        float keepVelocity;
        bool isAutoShot;
        bool isMovableBarrel;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCannonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCannonSpawner* pInstance);
        static void Clean(ObjCannonSpawner* pInstance);
    };

    struct ObjCarSpawner {
        enum class ActionType : int8_t {
            RUN = 0,
            BOARDING = 1,
        };

        enum class CarType : int8_t {
            MINIVAN = 0,
            HATCHBACK = 1,
            VAN = 2,
            TYPE_COUNT = 3,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        ActionType actionType;
        float addSpeed;
        float distance;
        float height;
        float outStrength;
        float inStrength;
        float inAngle;
        float impulseSpeedOn;
        float outOfControl;
        float motionTime;
        CarType carType;
        uint32_t color;
        float addTime;
        ActionNotification actions[3];
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        bool eventDriven;
        bool isFall;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCarSpawner* pInstance);
        static void Clean(ObjCarSpawner* pInstance);
    };

    struct ObjCarrierCarSpawner {
        enum class SizeType : int8_t {
            SIZE_S = 0,
            SIZE_M = 1,
            SIZE_COUNT = 2,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        float outOfControl;
        float keepVelocity;
        float launchSpeed;
        float launchAngle;
        bool posConst;
        bool veloConst;
        SizeType size;
        ActionNotification actions[3];
        bool isUsingButtonAction;
        float addTime;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        bool eventDriven;
        bool isFall;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCarrierCarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCarrierCarSpawner* pInstance);
        static void Clean(ObjCarrierCarSpawner* pInstance);
    };

    struct ObjChangeSwitchSpawner {
        enum class Condition : int8_t {
            COND_ON_TRIGGER = 0,
            COND_PULSE = 1,
            COND_TIMER_ONCE = 2,
            COND_TIMER = 3,
            COND_ON_STAY = 4,
        };

        Condition condition;
        float lifetime;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChangeSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChangeSwitchSpawner* pInstance);
        static void Clean(ObjChangeSwitchSpawner* pInstance);
    };

    struct ObjCloudFloorSpawner {
        enum class Visual : int8_t {
            Cloud2m = 0,
            Cloud5m = 1,
            Cloud7m = 2,
            NumVisuals = 3,
        };

        enum class ActionOnEvent : int8_t {
            Appear = 0,
            Disappear = 1,
            NumActionsOnEvent = 2,
        };

        Visual visual;
        bool eventDriven;
        ActionOnEvent actionOnEvent;
        float timeTilDisappear;
        float upwardSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCloudFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCloudFloorSpawner* pInstance);
        static void Clean(ObjCloudFloorSpawner* pInstance);
    };

    struct FigureEightMove {
        float rotateMaxspeed;
        float rotateMinSpeed;
        float diameter;
        float accelerationRate;
        float decelerationRate;
        float decelerationAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FigureEightMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FigureEightMove* pInstance);
        static void Clean(FigureEightMove* pInstance);
    };

    struct CircleMove {
        float rotateMaxspeed;
        float rotateMinSpeed;
        float straightSpeed;
        float radius;
        float rotateAccelerationRate;
        float rotateDecelerationRate;
        float straightAccelerationRate;
        float rotateDecelerationAngle;
        float stayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CircleMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CircleMove* pInstance);
        static void Clean(CircleMove* pInstance);
    };

    struct BulletParameter {
        float bulletSpeed;
        float bulletWaitTime;
        float bulletShotNum;
        float bulletInterval;
        float bulletRange;
        float bulletToPlayerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BulletParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BulletParameter* pInstance);
        static void Clean(BulletParameter* pInstance);
    };

    struct DashRingParameter {
        bool UseDashRing;
        float OutOfControl;
        float KeepVelocity;
        float Speed;
        bool PosConst;
        bool VeloConst;
        bool Spin;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DashRingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DashRingParameter* pInstance);
        static void Clean(DashRingParameter* pInstance);
    };

    struct ConeCollision {
        float angle;
        float nearClip;
        float farClip;
        float offset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ConeCollision* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ConeCollision* pInstance);
        static void Clean(ConeCollision* pInstance);
    };

    struct ObjDivingAirPlaneSpawner {
        bool isEventDriven;
        VolumeTriggerSpawner volume;
        float startStayTime;
        float lowDafaultPlayerSpeed;
        float lowFastPlayerSpeed;
        float highDafaultPlayerSpeed;
        float highFastPlayerSpeed;
        float verticalSpeed;
        FigureEightMove figureEightMove;
        CircleMove circleMove;
        float stayTime;
        float homingDistOffset;
        float setupWeaponTime;
        float attackWeaponTime;
        uint32_t circleWeaponNum;
        float cirlcleWeaponRange;
        uint32_t crossWeaponNum;
        float crossWeaponRange;
        float nextPatternTime;
        float targetToPlayerDist;
        float gameoverDist;
        float gameoverPlayerPos;
        csl::math::Vector3 firstNozzle;
        csl::math::Vector3 secondNozzle;
        BulletParameter mainPattern;
        BulletParameter subPattern;
        DashRingParameter dishRingParam;
        csl::math::Vector3 scale;
        bool visiableCollision;
        bool visiableWeaponDebug;
        ConeCollision lowSlipCol;
        ConeCollision highSlipCol;
        ConeCollision weaponCol;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDivingAirPlaneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDivingAirPlaneSpawner* pInstance);
        static void Clean(ObjDivingAirPlaneSpawner* pInstance);
    };

    struct ObjDownReelSpawner {
        uint32_t standLegNum;
        uint32_t standStickNum;
        float maxLength;
        float shotLength;
        float downSpeedMax;
        float upSpeedMax;
        float firstSpeed;
        float shotAngle;
        float outOfControl;
        bool isExtendOver;
        bool isOneTimeUp;
        bool eventDriven;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDownReelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDownReelSpawner* pInstance);
        static void Clean(ObjDownReelSpawner* pInstance);
    };

    struct ObjDriftEndVolumeSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDriftEndVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDriftEndVolumeSpawner* pInstance);
        static void Clean(ObjDriftEndVolumeSpawner* pInstance);
    };

    struct ObjDriftPanelSpawner {
        float speed;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDriftPanelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDriftPanelSpawner* pInstance);
        static void Clean(ObjDriftPanelSpawner* pInstance);
    };

    struct ObjDropBridgeSpawner {
        bool isEventOn;
        float dropWaitTime;
        float animSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDropBridgeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDropBridgeSpawner* pInstance);
        static void Clean(ObjDropBridgeSpawner* pInstance);
    };

    struct ObjDropBridgeSVSpawner {
        enum class ModelType : int8_t {
            TYPE_A = 0,
            TYPE_B = 1,
            TYPE_E = 2,
            TYPE_F = 3,
        };

        ModelType modelType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDropBridgeSVSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDropBridgeSVSpawner* pInstance);
        static void Clean(ObjDropBridgeSVSpawner* pInstance);
    };

    struct ObjDropFloorSpawner {
        int32_t blockNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDropFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDropFloorSpawner* pInstance);
        static void Clean(ObjDropFloorSpawner* pInstance);
    };

    struct ObjDropTowerSpawner {
        enum class PiecesType : int8_t {
            TYPE_A = 0,
            TYPE_B = 1,
            TYPE_C = 2,
            TYPE_D = 3,
        };

        int32_t piecesNum;
        float dropTime;
        PiecesType piecesType[29];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDropTowerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDropTowerSpawner* pInstance);
        static void Clean(ObjDropTowerSpawner* pInstance);
    };

    struct ObjGoalTriggerSpawner {
        enum class GoalActionType : int8_t {
            GOALACTIONTYPE_STOP = 0,
            GOALACTIONTYPE_BRAKE = 1,
            GOALACTIONTYPE_DASH = 2,
        };

        float goalTime;
        GoalActionType actionType;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGoalTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGoalTriggerSpawner* pInstance);
        static void Clean(ObjGoalTriggerSpawner* pInstance);
    };

    struct ObjGrindThornSpawner {
        bool reverse;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGrindThornSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGrindThornSpawner* pInstance);
        static void Clean(ObjGrindThornSpawner* pInstance);
    };

    struct GunTruckAppear {
        bool bySwitch;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GunTruckAppear* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GunTruckAppear* pInstance);
        static void Clean(GunTruckAppear* pInstance);
    };

    struct GunTruckMove {
        enum class MoveType : uint8_t {
            Fixed = 0,
            TwoPt = 1,
            OnPath = 2,
        };

        MoveType moveType;
        float keepDistance;
        csl::math::Vector3 twoPtDest;
        csl::ut::VariableString pathName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GunTruckMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GunTruckMove* pInstance);
        static void Clean(GunTruckMove* pInstance);
    };

    struct GunTruckAttack {
        bool changeParam;
        float shotStartAngle;
        float shotDuration;
        float shotAngVel;
        float shotRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GunTruckAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GunTruckAttack* pInstance);
        static void Clean(GunTruckAttack* pInstance);
    };

    struct GunTruckDie {
        enum class DieType : uint8_t {
            Distance = 0,
            Time = 1,
            Unlimited = 2,
        };

        DieType dieType;
        float dieDistance;
        float dieTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GunTruckDie* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GunTruckDie* pInstance);
        static void Clean(GunTruckDie* pInstance);
    };

    struct ObjGunTruckSpawner {
        GunTruckAppear appear;
        GunTruckMove move;
        GunTruckAttack attack[3];
        GunTruckDie die;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGunTruckSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGunTruckSpawner* pInstance);
        static void Clean(ObjGunTruckSpawner* pInstance);
    };

    struct ObjHanggliderSpawner {
        enum class MoveType : int8_t {
            MOVE_POINT = 0,
            MOVE_PATH = 1,
        };

        MoveType moveType;
        csl::math::Vector3 moveVector;
        float waitTime;
        csl::ut::VariableString pathName;
        float finishDist;
        float moveSpeed;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHanggliderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHanggliderSpawner* pInstance);
        static void Clean(ObjHanggliderSpawner* pInstance);
    };

    struct HelicopterMoveParam {
        enum class MoveType : int8_t {
            MOVE_POINT = 0,
            MOVE_PATH = 1,
        };

        MoveType moveType;
        csl::math::Vector3 moveVector;
        float finishVectorRatio;
        float waitTime;
        csl::ut::VariableString pathName;
        float finishDist;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HelicopterMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HelicopterMoveParam* pInstance);
        static void Clean(HelicopterMoveParam* pInstance);
    };

    struct ObjHelicopterCarrySpawner {
        enum class CatchType : int8_t {
            RIGHT = 0,
            LEFT = 1,
        };

        HelicopterMoveParam firstMove;
        HelicopterMoveParam secondMove;
        CatchType catchType;
        bool eventDriven;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHelicopterCarrySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHelicopterCarrySpawner* pInstance);
        static void Clean(ObjHelicopterCarrySpawner* pInstance);
    };

    struct ShotInfo {
        float distance;
        float height;
        float outStrength;
        float inStrength;
        float inAngle;
        float impulseSpeedOn;
        float outOfControl;
        float motionTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ShotInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ShotInfo* pInstance);
        static void Clean(ShotInfo* pInstance);
    };

    struct ObjJumpPanelClassicSpawner {
        ShotInfo lowShot;
        ShotInfo highShot;
        float directionMoveSpeed;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjJumpPanelClassicSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjJumpPanelClassicSpawner* pInstance);
        static void Clean(ObjJumpPanelClassicSpawner* pInstance);
    };

    struct JumpSelectorLaunch {
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JumpSelectorLaunch* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JumpSelectorLaunch* pInstance);
        static void Clean(JumpSelectorLaunch* pInstance);
    };

    struct ObjJumpSelectorSpawner {
        enum class JumpSelectorType : uint8_t {
            JUMP = 0,
            ATTACK = 1,
            SELECT = 2,
        };

        JumpSelectorType type;
        float inputTime;
        JumpSelectorLaunch launchJump;
        JumpSelectorLaunch launchAttack;
        float outOfControlMiss;
        float collisionRadius;
        bool reusable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjJumpSelectorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjJumpSelectorSpawner* pInstance);
        static void Clean(ObjJumpSelectorSpawner* pInstance);
    };

    struct ObjLaserFenceSpawner {
        enum class ActionType : int8_t {
            ACT_LOOP = 0,
            ACT_ONCE = 1,
            ACT_KEEP = 2,
            NUM_ACT_TYPE = 3,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        ActionType actionType;
        TimeType timeType;
        float laserLength;
        float waitTime;
        float activeTime;
        float phase;
        bool isEventDriven;
        bool isSE;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLaserFenceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLaserFenceSpawner* pInstance);
        static void Clean(ObjLaserFenceSpawner* pInstance);
    };

    struct ObjLineEffectGeneratorSpawner {
        bool bySwitch;
        csl::math::Vector3 appearRange;
        float intervalMin;
        float intervalMax;
        float distance;
        csl::math::Vector2 moveRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLineEffectGeneratorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLineEffectGeneratorSpawner* pInstance);
        static void Clean(ObjLineEffectGeneratorSpawner* pInstance);
    };

    struct ObjNormalFloorSpawner {
        enum class SizeType : int8_t {
            SIZE_A = 0,
            SIZE_B = 1,
            SIZE_C = 2,
            SIZE_D = 3,
            SIZE_E = 4,
            SIZE_F = 5,
            SIZE_G = 6,
            SIZE_H = 7,
            SIZE_I = 8,
            SIZE_J = 9,
            NUM_SIZE_TYPE = 10,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        SizeType sizeType;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        bool eventDriven;
        bool isFall;
        float waitFallTime;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNormalFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNormalFloorSpawner* pInstance);
        static void Clean(ObjNormalFloorSpawner* pInstance);
    };

    struct ObjThroughFloorSpawner {
        enum class Visual : int8_t {
            Floor2m = 0,
            Floor3m = 1,
            Floor5m = 2,
            Floor7m = 3,
            NumVisuals = 4,
        };

        Visual visual;
        bool canGoThrough;
        bool doesRespawn;
        float respawnTime;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjThroughFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjThroughFloorSpawner* pInstance);
        static void Clean(ObjThroughFloorSpawner* pInstance);
    };

    struct ObjOperationGuideVolumeSpawner {
        enum class GuideType : int32_t {
            SideStep = 0,
            Boarding = 1,
            Diving = 2,
            Drift = 3,
        };

        float lifetime;
        VolumeTriggerSpawner volume;
        GuideType guideType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOperationGuideVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOperationGuideVolumeSpawner* pInstance);
        static void Clean(ObjOperationGuideVolumeSpawner* pInstance);
    };

    struct ObjPipeCapSpawner {
        uint32_t springId;
        csl::ut::VariableString pathName;
        bool isRideOnOnly;
        float pipeMoveVelocity;
        float shotVelocity;
        float colliderHeight;
        float colliderRadius;
        float signalSec;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPipeCapSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPipeCapSpawner* pInstance);
        static void Clean(ObjPipeCapSpawner* pInstance);
    };

    struct ObjPipeSpringSpawner {
        float velocitySpring;
        float outOfControlSpring;
        float velocityPipeOut;
        float outOfControlPipeOut;
        float closeSec;
        bool isStartClose;
        float colliderHeight;
        float colliderRadius;
        float openSec;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPipeSpringSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPipeSpringSpawner* pInstance);
        static void Clean(ObjPipeSpringSpawner* pInstance);
    };

    struct ObjPoleSpawner {
        enum class Type : int8_t {
            FV = 0,
            SV = 1,
        };

        Type type;
        bool isHorming;
        bool usedPillar;
        uint32_t sideBarNum;
        uint32_t pillarNum;
        float distanceOffset;
        csl::math::Vector3 colloffset;
        csl::math::Vector3 collisionSize;
        csl::math::Vector3 successShotVelocity;
        csl::math::Vector3 failShotVelocity;
        float outOfControlTime;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPoleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPoleSpawner* pInstance);
        static void Clean(ObjPoleSpawner* pInstance);
    };

    struct ObjPurpleRockSpawner {
        enum class ViewType : int8_t {
            SV = 0,
            FV = 1,
            NumViewTypes = 2,
        };

        ViewType viewType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPurpleRockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPurpleRockSpawner* pInstance);
        static void Clean(ObjPurpleRockSpawner* pInstance);
    };

    struct ObjPushBlockSpawner {
        csl::math::Vector3 size;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPushBlockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPushBlockSpawner* pInstance);
        static void Clean(ObjPushBlockSpawner* pInstance);
    };

    struct ObjRingGeneratorSpawner {
        float interval;
        PathMovement pathMovement;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRingGeneratorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRingGeneratorSpawner* pInstance);
        static void Clean(ObjRingGeneratorSpawner* pInstance);
    };

    struct ObjRollingFloorSpawner {
        enum class ViewType : int8_t {
            SV = 0,
            FV = 1,
            NumViewTypes = 2,
        };

        enum class FloorVisual : int8_t {
            FloorA = 0,
            FloorB = 1,
            FloorC = 2,
            FloorD = 3,
            FloorE = 4,
            FloorF = 5,
            FloorG = 6,
            NoFloor = 7,
            NumFloorVisuals = 8,
        };

        enum class PoleVisual : int8_t {
            PoleA = 0,
            NoPole = 1,
            NumPoleVisuals = 2,
        };

        ViewType viewType;
        FloorVisual floorVisual;
        PoleVisual poleVisual;
        float floorOffsetY;
        float rotateAnglePerSec;
        float initialAngle;
        float rotateRange;
        bool isClockwise;
        bool eventDriven;
        bool doesPlaySE;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRollingFloorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRollingFloorSpawner* pInstance);
        static void Clean(ObjRollingFloorSpawner* pInstance);
    };

    struct RotateBlockJumpParam {
        bool isEnable;
        bool isSpin;
        float velocityMax;
        float velocityMin;
        float judgeHeightRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RotateBlockJumpParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RotateBlockJumpParam* pInstance);
        static void Clean(RotateBlockJumpParam* pInstance);
    };

    struct ObjRotateBlockSpawner {
        enum class BasePointType : int8_t {
            Center = 0,
            Edge = 1,
        };

        enum class StartType : int8_t {
            Diagonal_1 = 0,
            Diagonal_2 = 1,
            Diagonal_3 = 2,
            Diagonal_4 = 3,
            Line_1 = 4,
            Line_2 = 5,
            Line_3 = 6,
            Line_4 = 7,
            Num = 8,
        };

        enum class MoveType : int8_t {
            None = 0,
            Once = 1,
            Loop = 2,
        };

        enum class AnimCurve : int8_t {
            Linear = 0,
            EaseIn = 1,
            EaseOut = 2,
            EaseInOut = 3,
        };

        enum class PressType : int8_t {
            None = 0,
            DeadAll = 1,
            DeadEdge = 2,
        };

        float blockExtents;
        int32_t numBlock;
        BasePointType basePointType;
        StartType startType;
        MoveType moveType;
        bool isClockWise;
        AnimCurve animCurve;
        float rotateTime;
        float rotateWaitTime;
        float rotateAngle;
        float offsetRatio;
        float moveRatio;
        bool eventDriven;
        bool rideOnDriven;
        PressType pressType;
        RotateBlockJumpParam jumpParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotateBlockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotateBlockSpawner* pInstance);
        static void Clean(ObjRotateBlockSpawner* pInstance);
    };

    struct ObjRotateThornBallAxisParam {
        float radius;
        uint32_t ballNum;
        float ballInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotateThornBallAxisParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotateThornBallAxisParam* pInstance);
        static void Clean(ObjRotateThornBallAxisParam* pInstance);
    };

    struct ObjRotateThornBallSpawner {
        enum class RotateType : int8_t {
            TYPE_RIGHT = 0,
            TYPE_LEFT = 1,
        };

        enum class StartType : int8_t {
            START_WAIT = 0,
            START_ROTATE = 1,
        };

        enum class PlaceType : int8_t {
            ON_GROUND = 0,
            IN_AIR = 1,
            NUM_PLACES = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        RotateType rotateType;
        float angularVelocity;
        StartType startType;
        PlaceType placeType;
        TimeType timeType;
        bool eventDriven;
        bool showCenterObj;
        uint32_t axisNum;
        ObjRotateThornBallAxisParam axisParam[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotateThornBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotateThornBallSpawner* pInstance);
        static void Clean(ObjRotateThornBallSpawner* pInstance);
    };

    struct ObjSideReelSpawner {
        bool visiableLegModel;
        uint32_t standLegNum;
        float length;
        float upSpeedMax;
        float firstSpeed;
        float shotAngle;
        float outOfControl;
        bool isOneTimeUp;
        bool eventDriven;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSideReelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSideReelSpawner* pInstance);
        static void Clean(ObjSideReelSpawner* pInstance);
    };

    struct ObjSideViewPathVolumeSpawner {
        csl::ut::VariableString pathName;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSideViewPathVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSideViewPathVolumeSpawner* pInstance);
        static void Clean(ObjSideViewPathVolumeSpawner* pInstance);
    };

    struct ObjSpringBoardSpawner {
        enum class Visual : int8_t {
            Normal = 0,
            Sky = 1,
        };

        Visual visual;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;
        bool isEventOn;
        bool isHorizon;
        bool isVisible;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpringBoardSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpringBoardSpawner* pInstance);
        static void Clean(ObjSpringBoardSpawner* pInstance);
    };

    struct ObjSpringClassicSpawner {
        enum class Visual : int8_t {
            Red = 0,
            Yellow = 1,
        };

        Visual visual;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;
        bool usedYaw;
        bool isEventOn;
        bool isHorizon;
        bool isVisible;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpringClassicSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpringClassicSpawner* pInstance);
        static void Clean(ObjSpringClassicSpawner* pInstance);
    };

    struct ObjStopWatchSpawner {
        float extendTime;
        float collisionRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStopWatchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStopWatchSpawner* pInstance);
        static void Clean(ObjStopWatchSpawner* pInstance);
    };

    struct SwingReelImpulse {
        float addSpeed;
        float outOfControl;
        float motionTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SwingReelImpulse* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SwingReelImpulse* pInstance);
        static void Clean(SwingReelImpulse* pInstance);
    };

    struct SwingReelPath {
        uint32_t targetObj;
        csl::math::Vector3 targetOffset;
        float outStrength;
        float inStrength;
        float outUpPower;
        float inElev;
        float pathRoll;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SwingReelPath* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SwingReelPath* pInstance);
        static void Clean(SwingReelPath* pInstance);
    };

    struct SwingReelVertical {
        float moveRange;
        float launchAngleSum;
        float period;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SwingReelVertical* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SwingReelVertical* pInstance);
        static void Clean(SwingReelVertical* pInstance);
    };

    struct SwingReelHorizontal {
        enum class RotateDirection : int8_t {
            Left = 0,
            Right = 1,
        };

        RotateDirection rotateDirection;
        float ropeTiltMax;
        float ropeTiltTime;
        float launchAngleSum;
        float period;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SwingReelHorizontal* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SwingReelHorizontal* pInstance);
        static void Clean(SwingReelHorizontal* pInstance);
    };

    struct ObjSwingReelSpawner {
        enum class SwingReelType : int8_t {
            TypeVertical = 0,
            TypeHorizontal = 1,
        };

        SwingReelType type;
        float ropeLength;
        bool eventDriven;
        float handleDownTime;
        SwingReelImpulse impulseParam;
        SwingReelPath pathParam;
        SwingReelVertical vertParam;
        SwingReelHorizontal horzParam;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSwingReelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSwingReelSpawner* pInstance);
        static void Clean(ObjSwingReelSpawner* pInstance);
    };

    struct ObjSwitchUsualSpawner {
        enum class Condition : int8_t {
            COND_ON_TRIGGER = 0,
            COND_TIMER = 1,
            COND_ON_STAY = 2,
        };

        Condition condition;
        float lifetime;
        bool usedRigidCol;
        bool eventDriven;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSwitchUsualSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSwitchUsualSpawner* pInstance);
        static void Clean(ObjSwitchUsualSpawner* pInstance);
    };

    struct ObjTimeStartVolumeSpawner {
        enum class Condition : int8_t {
            COND_ON_TRIGGER = 0,
            COND_PULSE = 1,
            COND_TIMER_ONCE = 2,
            COND_TIMER = 3,
            COND_ON_STAY = 4,
        };

        Condition condition;
        float lifetime;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeStartVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeStartVolumeSpawner* pInstance);
        static void Clean(ObjTimeStartVolumeSpawner* pInstance);
    };

    struct ObjTimeStopWatchVolumeSpawner {
        enum class Condition : int8_t {
            COND_ON_TRIGGER = 0,
            COND_PULSE = 1,
            COND_TIMER_ONCE = 2,
            COND_TIMER = 3,
            COND_ON_STAY = 4,
        };

        Condition condition;
        float lifetime;
        bool eventDriven;
        VolumeTriggerSpawner volume;
        ActionNotification actions[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeStopWatchVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeStopWatchVolumeSpawner* pInstance);
        static void Clean(ObjTimeStopWatchVolumeSpawner* pInstance);
    };

    struct ShotParam {
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ShotParam* pInstance);
        static void Clean(ShotParam* pInstance);
    };

    struct ObjTrampolineSpawner {
        float autoJumpTime;
        ShotParam lowShot;
        ShotParam middleShot;
        ShotParam highShot;
        float size;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTrampolineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTrampolineSpawner* pInstance);
        static void Clean(ObjTrampolineSpawner* pInstance);
    };

    struct ObjTrapBallSpawner {
        enum class MoveType : int8_t {
            Straight = 0,
            Half = 1,
            Quater = 2,
            Num = 3,
        };

        enum class NumType : int8_t {
            Type_1 = 0,
            Type_2 = 1,
            Type_3 = 2,
            Num = 3,
        };

        enum class LauncherType : int8_t {
            Straight = 0,
            CurveLeft = 1,
            CurveRight = 2,
            Num = 3,
        };

        MoveType moveType;
        NumType numType;
        float distance;
        float distanceHalf;
        float velocity;
        float velocityOnAnim;
        float waitSec;
        bool isBack;
        LauncherType launcherTypeA;
        LauncherType launcherTypeB;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTrapBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTrapBallSpawner* pInstance);
        static void Clean(ObjTrapBallSpawner* pInstance);
    };

    struct ObjUpDownPoleSpawner {
        int32_t barLengthNum;
        float speed;
        float moveHeight;
        float phase;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUpDownPoleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUpDownPoleSpawner* pInstance);
        static void Clean(ObjUpDownPoleSpawner* pInstance);
    };

    struct ObjUpDownPolePillarSpawner {
        enum class BaseType : int8_t {
            Grond = 0,
            Sky = 1,
        };

        int32_t pillarLengthNum;
        BaseType baseType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUpDownPolePillarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUpDownPolePillarSpawner* pInstance);
        static void Clean(ObjUpDownPolePillarSpawner* pInstance);
    };

    struct ObjUpReelSpawner {
        float length;
        float upSpeedMax;
        float firstSpeed;
        float outOfControl;
        bool isOneTimeUp;
        bool eventDriven;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUpReelSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUpReelSpawner* pInstance);
        static void Clean(ObjUpReelSpawner* pInstance);
    };

    struct ObjWallJumpBlockSpawner {
        float width;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWallJumpBlockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWallJumpBlockSpawner* pInstance);
        static void Clean(ObjWallJumpBlockSpawner* pInstance);
    };

    struct ObjWarpStoneSpawner {
        enum class Visual : int8_t {
            SV = 0,
            FV = 1,
            NumVisuals = 2,
        };

        Visual visual;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarpStoneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarpStoneSpawner* pInstance);
        static void Clean(ObjWarpStoneSpawner* pInstance);
    };

    struct ObjWarpStoneEndSpawner {
        enum class Visual : int8_t {
            SV = 0,
            FV = 1,
            NumVisuals = 2,
        };

        Visual visual;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarpStoneEndSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarpStoneEndSpawner* pInstance);
        static void Clean(ObjWarpStoneEndSpawner* pInstance);
    };

    struct ObjWoodBridgeSpawner {
        enum class ViewType : int8_t {
            FV = 0,
            SV = 1,
        };

        ViewType viewType;
        float flexValue;
        uint32_t logNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWoodBridgeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWoodBridgeSpawner* pInstance);
        static void Clean(ObjWoodBridgeSpawner* pInstance);
    };

    struct ObjWoodBridgeBreakSpawner {
        float shakeWaitTime;
        float shakeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWoodBridgeBreakSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWoodBridgeBreakSpawner* pInstance);
        static void Clean(ObjWoodBridgeBreakSpawner* pInstance);
    };

    struct ObjWoodSwingSpawner {
        enum class SizeType : int8_t {
            SIZE_3m = 0,
            SIZE_4m = 1,
            SIZE_5m = 2,
            SIZE_7m = 3,
            NUM_SIZE_TYPE = 4,
        };

        enum class StartType : int8_t {
            CENTER = 0,
            LEFT = 1,
            RIGHT = 2,
        };

        float speed;
        float width;
        float waitTime;
        float phase;
        bool eventDriven;
        SizeType sizeType;
        bool display;
        StartType stAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWoodSwingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWoodSwingSpawner* pInstance);
        static void Clean(ObjWoodSwingSpawner* pInstance);
    };

    struct EnemyPracticeNotifierConfig {
        bool usePracticeNotifier;
        int8_t practiceNo;
        int8_t tipsNo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyPracticeNotifierConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyPracticeNotifierConfig* pInstance);
        static void Clean(EnemyPracticeNotifierConfig* pInstance);
    };

    struct EnemyAquaballSpawner {
        int32_t no;
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool respawnableByMeteorShower;
        bool isSonicSet;
        csl::ut::VariableString movePathName;
        float captureLimitTimeOffset;
        float moveSpeedOffset;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballSpawner* pInstance);
        static void Clean(EnemyAquaballSpawner* pInstance);
    };

    struct EnemyBatabataSpawner {
        enum class ViewType : int8_t {
            FV = 0,
            SV = 1,
        };

        ViewType viewType;
        float velocity;
        float searchDistance;
        csl::math::Vector3 targetPos;
        bool isEventDriven;
        bool isRespawn;
        bool isHomingAttack;
        float respawnTime;
        float waitTime;
        float moveHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBatabataSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBatabataSpawner* pInstance);
        static void Clean(EnemyBatabataSpawner* pInstance);
    };

    struct BeetonMoveParam {
        enum class BeetonMoveType : int8_t {
            FIXED = 0,
            TWO_POINT = 1,
            PATH = 2,
        };

        BeetonMoveType moveType;
        csl::math::Vector3 destOffset;
        csl::ut::VariableString pathName;
        float moveSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BeetonMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BeetonMoveParam* pInstance);
        static void Clean(BeetonMoveParam* pInstance);
    };

    struct BeetonAttackParam {
        bool isAttack;
        float bulletSpeed;
        float prepareTime;
        float searchDistance;
        float searchAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BeetonAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BeetonAttackParam* pInstance);
        static void Clean(BeetonAttackParam* pInstance);
    };

    struct EnemyBeetonSpawner {
        bool isFV;
        bool doesRespawn;
        float respawnTime;
        BeetonMoveParam moveParam;
        BeetonAttackParam attackParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBeetonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBeetonSpawner* pInstance);
        static void Clean(EnemyBeetonSpawner* pInstance);
    };

    struct EnemyBirdSpawner {
        int32_t no;
        uint32_t level;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> territories;
        bool respawnableByMeteorShower;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdSpawner* pInstance);
        static void Clean(EnemyBirdSpawner* pInstance);
    };

    struct ObjBirdLaserSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBirdLaserSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBirdLaserSpawner* pInstance);
        static void Clean(ObjBirdLaserSpawner* pInstance);
    };

    struct SonicSetParam {
        bool isSonicSet;
        float searchRadiusOffset;
        float attackMoveSpeedOffset;
        float chaseMoveSpeedOffset;
        float moveDistanceFront;
        float moveDistanceBack;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SonicSetParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SonicSetParam* pInstance);
        static void Clean(SonicSetParam* pInstance);
    };

    struct EnemyBommerSpawner {
        int32_t no;
        int32_t level;
        uint32_t territoryId;
        bool respawnableByMeteorShower;
        SonicSetParam sonicSetParam;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerSpawner* pInstance);
        static void Clean(EnemyBommerSpawner* pInstance);
    };

    struct EnemyBubbleSpawner {
        int32_t no;
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isSonicSet;
        float eyesightDistance;
        bool respawnableByMeteorShower;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleSpawner* pInstance);
        static void Clean(EnemyBubbleSpawner* pInstance);
    };

    struct EnemyDefenderSpawner {
        int32_t no;
        int32_t level;
        uint32_t territoryId;
        bool isSonicSet;
        float guardDistance;
        float boomerangDistance;
        bool respawnableByMeteorShower;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenderSpawner* pInstance);
        static void Clean(EnemyDefenderSpawner* pInstance);
    };

    struct EggRoboAppearParam {
        enum class AppearType : int8_t {
            Fix = 0,
            Path = 1,
            TwoPoint = 2,
        };

        enum class EasingType : uint8_t {
            LINEAR_EASEIN = 0,
            LINEAR_EASEOUT = 1,
            LINEAR_EASEINOUT = 2,
            QUADRATIC_EASEIN = 3,
            QUADRATIC_EASEOUT = 4,
            QUADRATIC_EASEINOUT = 5,
            CUBIC_EASEIN = 6,
            CUBIC_EASEOUT = 7,
            CUBIC_EASEINOUT = 8,
            QUARTIC_EASEIN = 9,
            QUARTIC_EASEOUT = 10,
            QUARTIC_EASEINOUT = 11,
            QUINTIC_EASEIN = 12,
            QUINTIC_EASEOUT = 13,
            QUINTIC_EASEINOUT = 14,
            SINE_EASEIN = 15,
            SINE_EASEOUT = 16,
            SINE_EASEINOUT = 17,
            EXPONENTAL_EASEIN = 18,
            EXPONENTAL_EASEOUT = 19,
            EXPONENTAL_EASEINOUT = 20,
            CIRCULAR_EASEIN = 21,
            CIRCULAR_EASEOUT = 22,
            CIRCULAR_EASEINOUT = 23,
            BACK_EASEIN = 24,
            BACK_EASEOUT = 25,
            BACK_EASEINOUT = 26,
            BOUNCE_EASEIN = 27,
            BOUNCE_EASEOUT = 28,
            BOUNCE_EASEINOUT = 29,
            ELASITC_EASEIN = 30,
            ELASITC_EASEOUT = 31,
            ELASITC_EASEINOUT = 32,
            NUM_EASINGTYPES = 33,
        };

        AppearType appearType;
        bool eventDriven;
        csl::ut::VariableString pathName;
        csl::math::Vector3 offsetTwoPoint;
        float time;
        EasingType easingTypePath;
        bool isLand;
        bool isAppearEff;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EggRoboAppearParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EggRoboAppearParam* pInstance);
        static void Clean(EggRoboAppearParam* pInstance);
    };

    struct EggRoboSearchParam {
        enum class MoveType : int8_t {
            Fixed = 0,
            Offset = 1,
        };

        enum class EasingType : uint8_t {
            LINEAR_EASEIN = 0,
            LINEAR_EASEOUT = 1,
            LINEAR_EASEINOUT = 2,
            QUADRATIC_EASEIN = 3,
            QUADRATIC_EASEOUT = 4,
            QUADRATIC_EASEINOUT = 5,
            CUBIC_EASEIN = 6,
            CUBIC_EASEOUT = 7,
            CUBIC_EASEINOUT = 8,
            QUARTIC_EASEIN = 9,
            QUARTIC_EASEOUT = 10,
            QUARTIC_EASEINOUT = 11,
            QUINTIC_EASEIN = 12,
            QUINTIC_EASEOUT = 13,
            QUINTIC_EASEINOUT = 14,
            SINE_EASEIN = 15,
            SINE_EASEOUT = 16,
            SINE_EASEINOUT = 17,
            EXPONENTAL_EASEIN = 18,
            EXPONENTAL_EASEOUT = 19,
            EXPONENTAL_EASEINOUT = 20,
            CIRCULAR_EASEIN = 21,
            CIRCULAR_EASEOUT = 22,
            CIRCULAR_EASEINOUT = 23,
            BACK_EASEIN = 24,
            BACK_EASEOUT = 25,
            BACK_EASEINOUT = 26,
            BOUNCE_EASEIN = 27,
            BOUNCE_EASEOUT = 28,
            BOUNCE_EASEINOUT = 29,
            ELASITC_EASEIN = 30,
            ELASITC_EASEOUT = 31,
            ELASITC_EASEINOUT = 32,
            NUM_EASINGTYPES = 33,
        };

        MoveType moveType;
        csl::math::Vector3 moveOffset;
        float speed;
        float searchDistance;
        float searchAngle;
        bool isTakeOffLandAfterFound;
        csl::math::Vector3 landOffset;
        float landTime;
        EasingType landEasingType;
        csl::math::Vector3 eyesightOffsetDirection;
        csl::math::Vector3 eyesightRotateAxis;
        float eyesightRotateAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EggRoboSearchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EggRoboSearchParam* pInstance);
        static void Clean(EggRoboSearchParam* pInstance);
    };

    struct EggRoboAttackLaserParam {
        float colliderDistance;
        float colliderThickness;
        float colliderAngle;
        float speed;
        float lifeTime;
        float chargeTime;
        uint32_t countContinuous;
        float intervalContinuous;
        float coolTime;
        float shotArcAngleFv;
        uint32_t shotArcBulletCountFv;
        bool isGraviry;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EggRoboAttackLaserParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EggRoboAttackLaserParam* pInstance);
        static void Clean(EggRoboAttackLaserParam* pInstance);
    };

    struct EggRoboAttackMissileParam {
        float colliderDistance;
        float colliderAngle;
        float speed;
        float lifeTime;
        float explodeTime;
        float trackRate;
        float traceStartTime;
        float chargeTime;
        float coolTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EggRoboAttackMissileParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EggRoboAttackMissileParam* pInstance);
        static void Clean(EggRoboAttackMissileParam* pInstance);
    };

    struct EggRoboAttackParam {
        enum class WeaponType : int8_t {
            Laser = 0,
            Missile = 1,
            Num = 2,
        };

        WeaponType weaponType;
        bool isLookTarget;
        float trackAngleSpeed;
        float targetLostTime;
        EggRoboAttackLaserParam laserParam;
        EggRoboAttackMissileParam missileParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EggRoboAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EggRoboAttackParam* pInstance);
        static void Clean(EggRoboAttackParam* pInstance);
    };

    struct EggRoboReviveParam {
        enum class ReviveType : int8_t {
            None = 0,
            DeadPoint = 1,
            ArgumentPoint = 2,
            SameAppear = 3,
        };

        ReviveType reviveType;
        float time;
        uint32_t locatorId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EggRoboReviveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EggRoboReviveParam* pInstance);
        static void Clean(EggRoboReviveParam* pInstance);
    };

    struct EnemyEggRoboSpawner {
        enum class ViewType : int8_t {
            SV = 0,
            FV = 1,
            Num = 2,
        };

        ViewType viewType;
        EggRoboAppearParam appearParam;
        EggRoboSearchParam searchParam;
        EggRoboAttackParam attackParam;
        EggRoboReviveParam reviveParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyEggRoboSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyEggRoboSpawner* pInstance);
        static void Clean(EnemyEggRoboSpawner* pInstance);
    };

    struct EnemyGaniganiTwoPoints {
        csl::math::Vector3 pos;
        float startPosRatio;
        float moveSpeed;
        float stopTime;
        float approachDist;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyGaniganiTwoPoints* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyGaniganiTwoPoints* pInstance);
        static void Clean(EnemyGaniganiTwoPoints* pInstance);
    };

    struct EnemyGaniganiFixed {
        float searchInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyGaniganiFixed* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyGaniganiFixed* pInstance);
        static void Clean(EnemyGaniganiFixed* pInstance);
    };

    struct EnemyGaniganiShot {
        float searchRadius;
        float searchAngle;
        float searchHeight;
        float searchOffset;
        float chargeTime;
        float interval;
        float distance;
        float height;
        float speed;
        float expRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyGaniganiShot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyGaniganiShot* pInstance);
        static void Clean(EnemyGaniganiShot* pInstance);
    };

    struct EnemyGaniganiSpawner {
        enum class MoveType : uint8_t {
            TypeFixed = 0,
            TypeTwoPoints = 1,
        };

        bool isFV;
        bool isFindMotion;
        MoveType moveType;
        EnemyGaniganiTwoPoints twoPt;
        EnemyGaniganiFixed fixed;
        EnemyGaniganiShot shot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyGaniganiSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyGaniganiSpawner* pInstance);
        static void Clean(EnemyGaniganiSpawner* pInstance);
    };

    struct SVParam {
        float descentDistance;
        float descentSpeed;
        float ascentSpeed;
        float flickerSpeedOnAscent;
        float flickerSpeedAfterAscent;
        float selfDestructTime;
        float reqLStickInputTimeToBreakFree;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SVParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SVParam* pInstance);
        static void Clean(SVParam* pInstance);
    };

    struct FVParam {
        float hipsRotDegPerSec;
        float bulletVelocityY;
        float bulletVelocityMultiplier;
        float chargeTime;
        float bulletFlightTime;
        float attackInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FVParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FVParam* pInstance);
        static void Clean(FVParam* pInstance);
    };

    struct EnemyGrabberSpawner {
        enum class Placement : uint8_t {
            SV = 0,
            FV_ON_GROUND = 1,
            FV_IN_AIR = 2,
            FV_ON_RAIL = 3,
            NUM_PLACEMENTS = 4,
        };

        enum class Movement : uint8_t {
            FIXED = 0,
            TWO_POINT = 1,
            NUM_MOVEMENTS = 2,
        };

        Placement placement;
        Movement movement;
        csl::math::Vector3 dst;
        bool eventDriven;
        bool doesRespawn;
        float threadStartingYOffset;
        float respawnTime;
        float movementSpeed;
        float rotDegPerSec;
        float searchDistance;
        float searchAngle;
        SVParam svParam;
        FVParam fvParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyGrabberSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyGrabberSpawner* pInstance);
        static void Clean(EnemyGrabberSpawner* pInstance);
    };

    struct HeliTwoPoint {
        csl::math::Vector3 localDest;
        float speed;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliTwoPoint* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliTwoPoint* pInstance);
        static void Clean(HeliTwoPoint* pInstance);
    };

    struct HeliOnPath {
        enum class MOVE_PARAM : uint8_t {
            FOLLOW_PLAYER = 0,
            ONE_WAY = 1,
            TWO_WAY = 2,
        };

        csl::ut::VariableString pathName;
        MOVE_PARAM moveDir;
        float speed;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliOnPath* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliOnPath* pInstance);
        static void Clean(HeliOnPath* pInstance);
    };

    struct HeliEyeSight {
        float distance;
        float angle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliEyeSight* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliEyeSight* pInstance);
        static void Clean(HeliEyeSight* pInstance);
    };

    struct HeliAppearance {
        csl::math::Vector3 appearPosLocal;
        float speed;
        bool useSwitch;
        bool revive;
        float retireTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliAppearance* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliAppearance* pInstance);
        static void Clean(HeliAppearance* pInstance);
    };

    struct EnemyHelicopterSpawner {
        enum class MOVE_TYPE : uint8_t {
            FIXED = 0,
            TWO_POINT = 1,
            ON_PATH = 2,
        };

        MOVE_TYPE moveType;
        HeliTwoPoint twoPointParam;
        HeliOnPath onPathParam;
        HeliEyeSight eyesightParam;
        HeliAppearance appearParam;
        bool isAttackChain;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyHelicopterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyHelicopterSpawner* pInstance);
        static void Clean(EnemyHelicopterSpawner* pInstance);
    };

    struct EnemyJellymanSpawner {
        enum class Mode : int8_t {
            Human = 0,
            Wolf = 1,
            Bird = 2,
        };

        int32_t no;
        int32_t level;
        float distance;
        float tolerance;
        Mode mode;
        csl::ut::Array<uint32_t> territories;
        bool disableChangeMode;
        bool enableEffect;
        bool isEgg;
        bool respawnableByMeteorShower;
        float searchDistanceOffset;
        bool isSonicSet;
        float actionRate[5];
        float actionCoolTime[5];
        EnemyPracticeNotifierConfig practiceNotifierConfig;
        bool eventDriven;
        bool onlyHeightField;
        bool noWaveAttack;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJellymanSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJellymanSpawner* pInstance);
        static void Clean(EnemyJellymanSpawner* pInstance);
    };

    struct EnemyJumperSpawner {
        int32_t no;
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        csl::ut::Array<uint32_t> subs;
        csl::ut::Array<uint32_t> onTarget;
        float subsLifeTime;
        bool isSonicSet;
        float eyesightDistance;
        bool respawnableByMeteorShower;
        bool onlyHeightField;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSpawner* pInstance);
        static void Clean(EnemyJumperSpawner* pInstance);
    };

    struct EnemyJumperSubSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool main;
        bool air;
        csl::math::Vector3 shotDirection;
        float firstSpeed;
        float outOfControl;
        float keepVelocityDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSubSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSubSpawner* pInstance);
        static void Clean(EnemyJumperSubSpawner* pInstance);
    };

    struct EnemyLanderTwoPoints {
        csl::math::Vector3 pos;
        float startPosRatio;
        float moveSpeed;
        float stopTime;
        float escapeDist;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyLanderTwoPoints* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyLanderTwoPoints* pInstance);
        static void Clean(EnemyLanderTwoPoints* pInstance);
    };

    struct EnemyLanderShot {
        enum class ShotType : uint8_t {
            Ground = 0,
            Wall = 1,
            Ceiling = 2,
        };

        enum class SearchType : uint8_t {
            SV = 0,
            FV = 1,
        };

        enum class ShotNum : uint8_t {
            One = 1,
            Three = 3,
            Five = 5,
        };

        ShotType shotType;
        SearchType searchType;
        float searchRadius;
        float searchAngleAdd;
        float interval;
        ShotNum shotNum;
        float range;
        float distance;
        float height;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyLanderShot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyLanderShot* pInstance);
        static void Clean(EnemyLanderShot* pInstance);
    };

    struct EnemyLanderSpawner {
        enum class MoveType : uint8_t {
            Fixed = 0,
            TwoPoints = 1,
        };

        MoveType moveType;
        EnemyLanderTwoPoints twoPt;
        EnemyLanderShot shot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyLanderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyLanderSpawner* pInstance);
        static void Clean(EnemyLanderSpawner* pInstance);
    };

    struct EnemyMotoraSpawner {
        enum class Placement : uint8_t {
            WhereItsSet = 0,
            InAir = 1,
            NumPlacements = 2,
        };

        enum class Movement : uint8_t {
            Immobile = 0,
            TwoPoint = 1,
            NumMovements = 2,
        };

        Placement placement;
        Movement movement;
        csl::math::Vector3 destination;
        float movementSpeed;
        float rushSpeed;
        float knockbackSpeed;
        float tireRotAnglePerSecWhenMoving;
        float tireRotAnglePerSecWhenChargingup;
        float tireRotAnglePerSecWhenRushing;
        float searchDistance;
        float searchAngle;
        float respawnTime;
        float chargeupTime;
        float timeTilLoseSight;
        float heightToRecognizeAsCliff;
        float distanceToRecognizeObstable;
        float degreeToRotatePerSec;
        bool eventDriven;
        bool doesRespawn;
        bool doesAttack;
        bool useFindMotion;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyMotoraSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyMotoraSpawner* pInstance);
        static void Clean(EnemyMotoraSpawner* pInstance);
    };

    struct EnemyRobberMovePaths {
        csl::ut::VariableString path1;
        csl::ut::VariableString path2;
        csl::ut::VariableString path3;
        csl::ut::VariableString path4;
        csl::ut::VariableString path5;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyRobberMovePaths* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyRobberMovePaths* pInstance);
        static void Clean(EnemyRobberMovePaths* pInstance);
    };

    struct EnemyRobberSpawner {
        int32_t no;
        int32_t level;
        csl::ut::Array<uint32_t> territories;
        uint32_t emeraldDropObjID;
        EnemyRobberMovePaths movePaths;
        float searchDistanceOffset;
        bool respawnableByMeteorShower;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyRobberSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyRobberSpawner* pInstance);
        static void Clean(EnemyRobberSpawner* pInstance);
    };

    struct EnemySniperSpawner {
        int32_t no;
        int32_t level;
        float distance;
        float tolerance;
        csl::ut::Array<uint32_t> territories;
        float searchDistanceOffset;
        float battleDistanceOffset;
        bool isParrySlowDisabled;
        bool isSonicSet;
        bool respawnableByMeteorShower;
        int32_t sonicSetHpOffset;
        int32_t sonicSetGpOffset;
        float sonicSetShotSpeedOffset;
        float sonicSetHideCoreDist;
        float sonicSetShowCoreDist;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySniperSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySniperSpawner* pInstance);
        static void Clean(EnemySniperSpawner* pInstance);
    };

    struct TankSpawnerAppearance {
        bool respawn;
        float respawnTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TankSpawnerAppearance* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TankSpawnerAppearance* pInstance);
        static void Clean(TankSpawnerAppearance* pInstance);
    };

    struct TankSpawnerMainGun {
        float interval;
        bool noBlast;
        csl::math::Vector3 pos;
        float radius;
        float delay;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TankSpawnerMainGun* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TankSpawnerMainGun* pInstance);
        static void Clean(TankSpawnerMainGun* pInstance);
    };

    struct EnemyTankSpawner {
        bool attackBySwitch;
        TankSpawnerAppearance appearance;
        TankSpawnerMainGun mainGun;
        uint8_t hp;
        ActionNotification actions[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyTankSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyTankSpawner* pInstance);
        static void Clean(EnemyTankSpawner* pInstance);
    };

    struct EnemyTutorialSpawner {
        enum class HealthType : int8_t {
            One = 0,
            Infinity = 1,
        };

        enum class ForceFocusType : int8_t {
            NoneFocus = 0,
            CameraFocus = 1,
            TargetFocus = 2,
        };

        enum class ShotDirectionType : int8_t {
            Aim = 0,
            AimHorz = 1,
            Front = 2,
            Random = 3,
        };

        HealthType health;
        bool targetable;
        bool attackable;
        bool parryEnabled;
        bool recoverySmashEnabled;
        ForceFocusType forceFocus;
        float attackWaitTime;
        float attackSpanTime;
        float attackSleepTime;
        ShotDirectionType shotDirection;
        float shotSpeed;
        float shotSize;
        float respawnWaitTime;
        float respawnMoveDisatnce;
        float respawnMoveTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyTutorialSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyTutorialSpawner* pInstance);
        static void Clean(EnemyTutorialSpawner* pInstance);
    };

    struct EnemyTwisterSpawner {
        enum class MoveType : int8_t {
            Fix = 0,
            Path = 1,
            TwoPoint = 2,
        };

        enum class RotateType : int8_t {
            ChangeByTime = 0,
            OnlyNormal = 1,
            OnlyHighSpeed = 2,
        };

        int32_t no;
        int32_t level;
        MoveType moveType;
        csl::ut::VariableString pathName;
        csl::math::Vector3 twoPointOffset;
        float offsetPhase;
        float moveSpeed;
        RotateType rotateType;
        float changeTime;
        bool respawnableByMeteorShower;
        EnemyPracticeNotifierConfig practiceNotifierConfig;
        bool rigidbody;
        bool isQuest;
        bool isSonicSet;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyTwisterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyTwisterSpawner* pInstance);
        static void Clean(EnemyTwisterSpawner* pInstance);
    };

    struct ParachuteLineConfig {
        uint32_t objType[8];
        csl::math::Vector3 offSet;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ParachuteLineConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ParachuteLineConfig* pInstance);
        static void Clean(ParachuteLineConfig* pInstance);
    };

    struct ParachuteShotConfig {
        int32_t steps;
        int32_t lineNum;
        float distance;
        float range;
        bool isOrder;
        ParachuteLineConfig lineLists[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ParachuteShotConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ParachuteShotConfig* pInstance);
        static void Clean(ParachuteShotConfig* pInstance);
    };

    struct SonicSetConfig {
        bool isSonicSet;
        float jumpHeight;
        float closeDistance;
        float shotDistance;
        float blowoffSpeed;
        csl::math::Vector3 blowoffOffSet;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SonicSetConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SonicSetConfig* pInstance);
        static void Clean(SonicSetConfig* pInstance);
    };

    struct EnemyUmbrellaSpawner {
        int32_t no;
        int32_t level;
        float distance;
        float tolerance;
        csl::ut::Array<uint32_t> territories;
        ParachuteShotConfig parachute;
        bool respawnableByMeteorShower;
        SonicSetConfig sonicset;
        bool onlyHeightField;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyUmbrellaSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyUmbrellaSpawner* pInstance);
        static void Clean(EnemyUmbrellaSpawner* pInstance);
    };

    struct EnemyWolfSpawner {
        int32_t no;
        uint32_t level;
        float distance;
        float tolerance;
        csl::ut::Array<uint32_t> territories;
        float searchDistanceOffset;
        uint32_t managerId;
        bool respawnableByMeteorShower;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyWolfSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyWolfSpawner* pInstance);
        static void Clean(EnemyWolfSpawner* pInstance);
    };

    struct ObjWolfManagerSpawner {
        float effectHeightOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWolfManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWolfManagerSpawner* pInstance);
        static void Clean(ObjWolfManagerSpawner* pInstance);
    };

    struct SpawnParam {
        enum class ModeType : int8_t {
            MODE_NONE = 0,
            MODE_MAN = 1,
            MODE_WOLF = 2,
            MODE_BIRD = 3,
            MODE_RANDOM = 4,
        };

        ModeType mode;
        int32_t num;
        int32_t level;
        int32_t randLevel;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SpawnParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SpawnParam* pInstance);
        static void Clean(SpawnParam* pInstance);
    };

    struct ObjTerritorySpawner {
        enum class Shape : int8_t {
            SHAPE_CYLINDER = 0,
            SHAPE_BOX = 1,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Y_PLANE = 1,
            BASE_X_PLANE = 2,
            BASE_Z_PLANE = 3,
        };

        Shape shape;
        BasePoint basePoint;
        csl::ut::VariableString pathName;
        csl::math::Vector3 patrolSize;
        csl::math::Vector3 fightSize;
        csl::math::Vector3 patrolOffset;
        csl::math::Vector3 fightOffset;
        bool isFallReturnArea;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTerritorySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTerritorySpawner* pInstance);
        static void Clean(ObjTerritorySpawner* pInstance);
    };

    struct EnemySpawnerSpawner {
        enum class SpawnPattern : int8_t {
            Random = 0,
            Line = 1,
            Circle = 2,
            Path = 3,
        };

        enum class AreaShape : int8_t {
            Cylinder = 0,
            Box = 1,
        };

        enum class RotateType : int8_t {
            ROTATE_RANDOM = 0,
            ROTATE_FRONT = 1,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Y_PLANE = 1,
            BASE_X_PLANE = 2,
            BASE_Z_PLANE = 3,
        };

        SpawnParam spawnParam[4];
        bool eventDriven;
        bool saveEventDriven;
        bool enableEffect;
        bool isEgg;
        float searchDistanceOffset;
        SpawnPattern pattern;
        AreaShape shape;
        csl::math::Vector3 size;
        RotateType rotateType;
        BasePoint basePoint;
        bool onGround;
        csl::ut::Array<uint32_t> territories;
        bool disableChangeMode;
        bool useTerritory;
        bool isDeadRangeOut;
        ObjTerritorySpawner territoryInfo;
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySpawnerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySpawnerSpawner* pInstance);
        static void Clean(EnemySpawnerSpawner* pInstance);
    };

    struct ObjGFieldConcaveBoxSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldConcaveBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldConcaveBoxSpawner* pInstance);
        static void Clean(ObjGFieldConcaveBoxSpawner* pInstance);
    };

    struct ObjGFieldConstantSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldConstantSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldConstantSpawner* pInstance);
        static void Clean(ObjGFieldConstantSpawner* pInstance);
    };

    struct ObjGFieldFaceSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldFaceSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldFaceSplineSpawner* pInstance);
        static void Clean(ObjGFieldFaceSplineSpawner* pInstance);
    };

    struct ObjGFieldHemisphereSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldHemisphereSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldHemisphereSpawner* pInstance);
        static void Clean(ObjGFieldHemisphereSpawner* pInstance);
    };

    struct ObjGFieldInsideCylinderSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldInsideCylinderSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldInsideCylinderSplineSpawner* pInstance);
        static void Clean(ObjGFieldInsideCylinderSplineSpawner* pInstance);
    };

    struct ObjGFieldInsidePrismSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldInsidePrismSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldInsidePrismSplineSpawner* pInstance);
        static void Clean(ObjGFieldInsidePrismSplineSpawner* pInstance);
    };

    struct ObjGFieldOutsideCylinderSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldOutsideCylinderSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldOutsideCylinderSplineSpawner* pInstance);
        static void Clean(ObjGFieldOutsideCylinderSplineSpawner* pInstance);
    };

    struct ObjGFieldOutsidePrismSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldOutsidePrismSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldOutsidePrismSplineSpawner* pInstance);
        static void Clean(ObjGFieldOutsidePrismSplineSpawner* pInstance);
    };

    struct ObjGFieldSphereSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldSphereSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldSphereSpawner* pInstance);
        static void Clean(ObjGFieldSphereSpawner* pInstance);
    };

    struct ObjGFieldSvSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldSvSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldSvSplineSpawner* pInstance);
        static void Clean(ObjGFieldSvSplineSpawner* pInstance);
    };

    struct ObjHoleAuraTrainSpawner {
        csl::ut::VariableString pathName;
        bool reverse;
        uint32_t cameraUuid;
        float cameraEaseInTime;
        float cameraEaseOutTime;
        float speed;
        uint32_t exitHole;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHoleAuraTrainSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHoleAuraTrainSpawner* pInstance);
        static void Clean(ObjHoleAuraTrainSpawner* pInstance);
    };

    struct ObjHoleHideSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHoleHideSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHoleHideSpawner* pInstance);
        static void Clean(ObjHoleHideSpawner* pInstance);
    };

    struct ObjHolePopupItemSpawner {
        enum class ItemKind : uint32_t {
            Ring = 0,
            SuperRing = 1,
            SkillPiece = 2,
        };

        ItemKind item;
        uint32_t num;
        uint32_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHolePopupItemSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHolePopupItemSpawner* pInstance);
        static void Clean(ObjHolePopupItemSpawner* pInstance);
    };

    struct ObjHoleWarpSpawner {
        enum class Interpolate : int8_t {
            Linear = 0,
            LinearAbsolute = 1,
            LinearAbsoluteStable = 2,
            TargetBase = 3,
            TargetBaseStable = 4,
            FixTarget = 5,
        };

        uint32_t exitHole;
        uint32_t camera;
        float easeInTime;
        Interpolate interpolateIn;
        float easeOutTime;
        Interpolate interpolateOut;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHoleWarpSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHoleWarpSpawner* pInstance);
        static void Clean(ObjHoleWarpSpawner* pInstance);
    };

    struct ObjKnucklesPillarSpawner {
        enum class SizeType : int8_t {
            SMALL = 0,
            MIDDLE = 1,
            LARGE = 2,
            SIZETYPE_NUM = 3,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        enum class EventType : int8_t {
            EVENT_NONE = 0,
            EVENT_HIDE = 1,
            EVENT_NO_MOVE = 2,
        };

        int32_t no;
        SizeType size;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        EventType eventDriven;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnucklesPillarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnucklesPillarSpawner* pInstance);
        static void Clean(ObjKnucklesPillarSpawner* pInstance);
    };

    struct ObjKnucklesWallSpawner {
        enum class SizeType : int8_t {
            SMALL = 0,
            MIDDLE = 1,
            LARGE = 2,
            SIZETYPE_NUM = 3,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_POINT = 1,
            MOVE_PATH = 2,
        };

        enum class PatrolType : int8_t {
            PATROL_RETURN = 0,
            PATROL_LOOP = 1,
            PATROL_ONEWAY = 2,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        enum class EventType : int8_t {
            EVENT_NONE = 0,
            EVENT_HIDE = 1,
            EVENT_NO_MOVE = 2,
        };

        int32_t no;
        SizeType size;
        MoveType moveType;
        PatrolType patrolType;
        TimeType timeType;
        EventType eventDriven;
        bool isSyncRot;
        bool isSmoothMove;
        bool isReverse;
        bool isPressDead;
        csl::math::Vector3 moveVector;
        csl::ut::VariableString pathName;
        csl::ut::Array<uint32_t> locaterList;
        float waitTime;
        float phase;
        float speed;
        bool useConvex;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnucklesWallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnucklesWallSpawner* pInstance);
        static void Clean(ObjKnucklesWallSpawner* pInstance);
    };

    struct ObjDashCircleBulletSpawner {
        enum class DirectionType : int8_t {
            Front = 0,
            Back = 1,
        };

        float moveSpeed;
        DirectionType dirType;
        float ocTime;
        float dashSpeed;
        float lifeTime;
        float offsetAngle;
        float scale;
        bool groundCheck;
        bool groundNormal;
        bool specifiiedLanding;
        float specifiiedLandingOffsetHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDashCircleBulletSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDashCircleBulletSpawner* pInstance);
        static void Clean(ObjDashCircleBulletSpawner* pInstance);
    };

    struct MiniBossAshuraSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        csl::ut::Array<uint32_t> deadPoints;
        bool isWaitSpawn;
        bool isTutorial;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        csl::ut::Array<uint32_t> portalBitsLegL;
        csl::ut::Array<uint32_t> portalBitsLegR;
        float searchDistanceOffset;
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraSpawner* pInstance);
        static void Clean(MiniBossAshuraSpawner* pInstance);
    };

    struct MiniBossBladeSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool isTutorial;
        bool useNonBattleRange;
        bool respawnableByMeteorShower;
        float nonBattleRange;
        bool useTerritory;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;
        bool enableAttackOutsideArea;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeSpawner* pInstance);
        static void Clean(MiniBossBladeSpawner* pInstance);
    };

    struct TimerTrigger {
        int32_t bootNum;
        float delayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TimerTrigger* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TimerTrigger* pInstance);
        static void Clean(TimerTrigger* pInstance);
    };

    struct AttachSpringParam {
        float outOfControl;
        float firstSpeed;
        float keepVelocityDistance;
        csl::math::Vector3 direction;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AttachSpringParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AttachSpringParam* pInstance);
        static void Clean(AttachSpringParam* pInstance);
    };

    struct ObjCGGAttachmentSpawner {
        enum class AttachmentType : int8_t {
            Normal = 0,
            HA = 1,
            Spring = 2,
        };

        TimerTrigger trigger;
        AttachmentType type;
        csl::math::Vector3 moveOffset;
        float moveTime;
        float targetCursorMaxDistance;
        AttachSpringParam springParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGAttachmentSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGAttachmentSpawner* pInstance);
        static void Clean(ObjCGGAttachmentSpawner* pInstance);
    };

    struct ObjCGGBaseSpawner {
        csl::ut::Array<uint32_t> children;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGBaseSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGBaseSpawner* pInstance);
        static void Clean(ObjCGGBaseSpawner* pInstance);
    };

    struct ObjCGGBulletNormalGeneratorSpawner {
        TimerTrigger trigger;
        float distance;
        int32_t bulletCount;
        float regenerateTime;
        int32_t regenerateCount;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGBulletNormalGeneratorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGBulletNormalGeneratorSpawner* pInstance);
        static void Clean(ObjCGGBulletNormalGeneratorSpawner* pInstance);
    };

    struct ObjCGGLaserSpawner {
        enum class MoveType : int8_t {
            Fixed = 0,
            Rotate = 1,
        };

        TimerTrigger trigger;
        int32_t count;
        float offset;
        float length;
        MoveType moveType;
        float rotateTime;
        bool isClockWise;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGLaserSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGLaserSpawner* pInstance);
        static void Clean(ObjCGGLaserSpawner* pInstance);
    };

    struct ObjCGGNodeTiltAxisSpawner {
        ObjCGGBaseSpawner base;
        float angle;
        float speed;
        bool isClockWise;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGNodeTiltAxisSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGNodeTiltAxisSpawner* pInstance);
        static void Clean(ObjCGGNodeTiltAxisSpawner* pInstance);
    };

    struct ObjCGGRailSpawner {
        PathCircleParameter setParameter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGRailSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGRailSpawner* pInstance);
        static void Clean(ObjCGGRailSpawner* pInstance);
    };

    struct ObjCGGResetBindSpawner {
        TimerTrigger trigger;
        csl::ut::Array<uint32_t> nextObjects;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGResetBindSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGResetBindSpawner* pInstance);
        static void Clean(ObjCGGResetBindSpawner* pInstance);
    };

    struct ObjCGGRootTimerParam {
        float unitTime;
        float decPoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGRootTimerParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGRootTimerParam* pInstance);
        static void Clean(ObjCGGRootTimerParam* pInstance);
    };

    struct ObjCGGRootSpawner {
        ObjCGGBaseSpawner base;
        ObjCGGRootTimerParam timer;
        uint8_t railNum;
        float debugAreaRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGRootSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGRootSpawner* pInstance);
        static void Clean(ObjCGGRootSpawner* pInstance);
    };

    struct MiniBossChargerSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        int32_t cggLayerId;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerSpawner* pInstance);
        static void Clean(MiniBossChargerSpawner* pInstance);
    };

    struct MiniBossDarumaSpawner {
        enum class Mode : int8_t {
            Battle = 0,
            QuestKodamaEscort = 1,
            QuestKodamaEscort2 = 2,
            QuestDarumaBattle = 3,
        };

        uint32_t level;
        Mode mode;
        uint32_t bodyCount;
        int8_t ringPositions[4];
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool isTutorial;
        bool isAppear;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        float stompWaitTimeFirst;
        float stompWaitTime;
        float scoutDistanceOffset;
        float scoutDistanceOutsideOffset;
        bool isThorn;
        bool enabledEyeSightMask;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaSpawner* pInstance);
        static void Clean(MiniBossDarumaSpawner* pInstance);
    };

    struct FlyerPathLoopInfo {
        bool enable;
        float start;
        float end;
        uint32_t cameraActivator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerPathLoopInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerPathLoopInfo* pInstance);
        static void Clean(FlyerPathLoopInfo* pInstance);
    };

    struct MiniBossFlyerSpawner {
        uint32_t level;
        bool isWaitSpawn;
        bool isTutorial;
        bool respawnableByMeteorShower;
        csl::ut::Array<uint32_t> portalBits;
        csl::ut::VariableString pathName;
        FlyerPathLoopInfo loopInfo[5];
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossFlyerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossFlyerSpawner* pInstance);
        static void Clean(MiniBossFlyerSpawner* pInstance);
    };

    struct ObjSkierMissileSpawner {
        float speed;
        csl::math::Vector3 launchDirCorrectionAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSkierMissileSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSkierMissileSpawner* pInstance);
        static void Clean(ObjSkierMissileSpawner* pInstance);
    };

    struct ObjSkierProhibitedAreaSpawner {
        float radius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSkierProhibitedAreaSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSkierProhibitedAreaSpawner* pInstance);
        static void Clean(ObjSkierProhibitedAreaSpawner* pInstance);
    };

    struct ObjSkierPylonSpawner {
        float appearTime;
        float hideOffsetY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSkierPylonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSkierPylonSpawner* pInstance);
        static void Clean(ObjSkierPylonSpawner* pInstance);
    };

    struct SkierPathAttributeInfo {
        enum class Attribute : int8_t {
            SNAKE_MOVE_ENABLE = 0,
            JUMP_ENABLE = 1,
            TAIL_ATTACK_ENABLE = 2,
            POSTURELR_ENABLE = 3,
            COL_CONFLICT = 4,
            NONE = 5,
        };

        bool debugDraw;
        Attribute attribute;
        float start;
        float end;
        csl::ut::Array<uint32_t> pylons;
        csl::ut::Array<uint32_t> missiles;
        float avoidObjCalMargePylonOffset;
        float avoidObjCalMargeMissileOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkierPathAttributeInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkierPathAttributeInfo* pInstance);
        static void Clean(SkierPathAttributeInfo* pInstance);
    };

    struct SkierSkiAcitionRate {
        float SnakeMoveRate;
        float JumpHighRate;
        float JumpLowRate;
        float PylonRate;
        float MissileRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkierSkiAcitionRate* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkierSkiAcitionRate* pInstance);
        static void Clean(SkierSkiAcitionRate* pInstance);
    };

    struct SkierSkiActionParam {
        enum class RateType : int8_t {
            COMMON = 0,
            PHASE1 = 1,
            PHASE2 = 2,
            PHASE3 = 3,
            NONE = 4,
        };

        bool debugDraw;
        RateType type;
        float pathDist;
        SkierSkiAcitionRate rate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkierSkiActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkierSkiActionParam* pInstance);
        static void Clean(SkierSkiActionParam* pInstance);
    };

    struct SkierCameraInfo {
        enum class ActivateCondition : int8_t {
            ALL = 0,
            SNAKE_MOVE = 1,
            JUMP_HIGH = 2,
            JUMP_LOW = 3,
            PYLON = 4,
            MISSILE = 5,
        };

        bool debugDraw;
        ActivateCondition condition;
        float start;
        float end;
        uint32_t cameraActivator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkierCameraInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkierCameraInfo* pInstance);
        static void Clean(SkierCameraInfo* pInstance);
    };

    struct MiniBossSkierSpawner {
        int32_t no;
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool useTerritory;
        ObjTerritorySpawner territoryInfo;
        bool isWaitSpawn;
        bool isTutorial;
        bool respawnableByMeteorShower;
        csl::ut::Array<uint32_t> portalBits;
        csl::ut::VariableString pathName;
        float pathPNTInterpolateSpeed;
        SkierPathAttributeInfo pathInfo[20];
        SkierSkiActionParam pathAction[20];
        SkierCameraInfo cameraInfo[40];
        EnemyPracticeNotifierConfig practiceNotifierConfig;
        csl::ut::Array<uint32_t> prohibitedArea;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierSpawner* pInstance);
        static void Clean(MiniBossSkierSpawner* pInstance);
    };

    struct ObjDivingAuraTrainRoot {
        csl::ut::VariableString pathName;
        uint32_t cameraUuid;
        float cameraEaseInTime;
        float cameraEaseOutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDivingAuraTrainRoot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDivingAuraTrainRoot* pInstance);
        static void Clean(ObjDivingAuraTrainRoot* pInstance);
    };

    struct ObjDivingAuraTrainSpawner {
        enum class SetType : int8_t {
            Distance = 0,
            Quantity = 1,
        };

        SetType setType;
        float value;
        int32_t startNum;
        csl::ut::Array<uint32_t> cameraColliderUuids;
        ObjDivingAuraTrainRoot root;
        float speed;
        csl::math::Vector3 collisionScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDivingAuraTrainSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDivingAuraTrainSpawner* pInstance);
        static void Clean(ObjDivingAuraTrainSpawner* pInstance);
    };

    struct ObjSpiderDivingVolumeSpawner {
        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        bool limit;
        float easeTimeEnter;
        float easeTimeLeave;
        float outOfControlTime;
        float waitTime;
        bool velocityReset;
        StateType state;
        ActionType action;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderDivingVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderDivingVolumeSpawner* pInstance);
        static void Clean(ObjSpiderDivingVolumeSpawner* pInstance);
    };

    struct ObjSpiderNeedleSpawner {
        csl::ut::VariableString pathName;
        csl::math::Vector3 collisionSize;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderNeedleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderNeedleSpawner* pInstance);
        static void Clean(ObjSpiderNeedleSpawner* pInstance);
    };

    struct ObjSpiderRippleLaserSpawner {
        float minScale;
        float maxScale;
        float scalePeriod;
        csl::ut::VariableString pathName;
        float movePeriod;
        bool isWrapBack;
        float moveDelay;
        float depthFix;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderRippleLaserSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderRippleLaserSpawner* pInstance);
        static void Clean(ObjSpiderRippleLaserSpawner* pInstance);
    };

    struct ObjSpiderRotateLaserTurretParam {
        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        TimeType timeType;
        float time;
        float radius;
        float phase;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderRotateLaserTurretParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderRotateLaserTurretParam* pInstance);
        static void Clean(ObjSpiderRotateLaserTurretParam* pInstance);
    };

    struct ObjSpiderRotateLaserTurretSpawner {
        ObjSpiderRotateLaserTurretParam param;
        int8_t edgeNum;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderRotateLaserTurretSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderRotateLaserTurretSpawner* pInstance);
        static void Clean(ObjSpiderRotateLaserTurretSpawner* pInstance);
    };

    struct ObjSpiderThornBallMoveParam {
        enum class Direction : int8_t {
            DIR_HORIZONTAL = 0,
            DIR_VERTICAL = 1,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        float time;
        float distance;
        float phase;
        Direction direction;
        TimeType timeType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderThornBallMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderThornBallMoveParam* pInstance);
        static void Clean(ObjSpiderThornBallMoveParam* pInstance);
    };

    struct ObjSpiderThornBallRollingParam {
        enum class Direction : int8_t {
            DIR_HORIZONTAL = 0,
            DIR_VERTICAL = 1,
        };

        float time;
        float radius;
        float phase;
        Direction direction;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderThornBallRollingParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderThornBallRollingParam* pInstance);
        static void Clean(ObjSpiderThornBallRollingParam* pInstance);
    };

    struct ObjSpiderThornBallSpawner {
        enum class Type : int8_t {
            TYPE_NORMAL = 0,
            TYPE_MOVE = 1,
            TYPE_ROLLING = 2,
        };

        Type type;
        ObjSpiderThornBallMoveParam moveParam;
        ObjSpiderThornBallRollingParam rollingParam;
        VolumeTriggerSpawner volume;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderThornBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderThornBallSpawner* pInstance);
        static void Clean(ObjSpiderThornBallSpawner* pInstance);
    };

    struct ObjSpiderTwisterMoveParam {
        enum class Direction : int8_t {
            DIR_HORIZONTAL = 0,
            DIR_VERTICAL = 1,
        };

        enum class TimeType : int8_t {
            TIME_LOCAL = 0,
            TIME_GLOBAL = 1,
        };

        float time;
        float distance;
        float phase;
        Direction direction;
        TimeType timeType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderTwisterMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderTwisterMoveParam* pInstance);
        static void Clean(ObjSpiderTwisterMoveParam* pInstance);
    };

    struct ObjSpiderTwisterRollingParam {
        enum class Direction : int8_t {
            DIR_HORIZONTAL = 0,
            DIR_VERTICAL = 1,
        };

        float time;
        float radius;
        float phase;
        Direction direction;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderTwisterRollingParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderTwisterRollingParam* pInstance);
        static void Clean(ObjSpiderTwisterRollingParam* pInstance);
    };

    struct ObjSpiderTwisterSpawner {
        enum class Type : int8_t {
            TYPE_NORMAL = 0,
            TYPE_MOVE = 1,
            TYPE_ROLLING = 2,
        };

        Type type;
        ObjSpiderTwisterMoveParam moveParam;
        ObjSpiderTwisterRollingParam rollingParam;
        float rigidColliderRadius;
        float damageColliderRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSpiderTwisterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSpiderTwisterSpawner* pInstance);
        static void Clean(ObjSpiderTwisterSpawner* pInstance);
    };

    struct MiniBossSpiderSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool isTutorial;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        uint32_t locatorDiving;
        uint8_t shieldHpNormal;
        float divingBeginHeightNormal;
        csl::ut::VariableString divingSetNameNormal;
        csl::ut::VariableString divingActiveLayerNormal;
        uint8_t shieldHpAngry;
        float divingBeginHeightAngry;
        csl::ut::VariableString divingSetNameAngry;
        csl::ut::VariableString divingActiveLayerAngry;
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderSpawner* pInstance);
        static void Clean(MiniBossSpiderSpawner* pInstance);
    };

    struct ObjStriderArcLaserSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderArcLaserSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderArcLaserSpawner* pInstance);
        static void Clean(ObjStriderArcLaserSpawner* pInstance);
    };

    struct ObjStriderBulletSpawner {
        uint32_t connectToPole;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderBulletSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderBulletSpawner* pInstance);
        static void Clean(ObjStriderBulletSpawner* pInstance);
    };

    struct ObjStriderGrindRailSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderGrindRailSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderGrindRailSpawner* pInstance);
        static void Clean(ObjStriderGrindRailSpawner* pInstance);
    };

    struct ObjStriderLaserSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderLaserSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderLaserSpawner* pInstance);
        static void Clean(ObjStriderLaserSpawner* pInstance);
    };

    struct MiniBossStriderSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool isTutorial;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossStriderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossStriderSpawner* pInstance);
        static void Clean(MiniBossStriderSpawner* pInstance);
    };

    struct ObjSumoPoleSpawner {
        enum class NormalDirection : int8_t {
            Front = 0,
            Back = 1,
        };

        uint32_t connectToPole;
        NormalDirection normalDirection;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleSpawner* pInstance);
        static void Clean(ObjSumoPoleSpawner* pInstance);
    };

    struct ObjSumoPuckSpawner {
        enum class BehaviorType : int8_t {
            Bumper = 0,
            Bomb = 1,
        };

        BehaviorType behaviorType;
        float speed;
        float lifeTime;
        float timeStartDecelerate;
        float deceleration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPuckSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPuckSpawner* pInstance);
        static void Clean(ObjSumoPuckSpawner* pInstance);
    };

    struct MiniBossSumoSpawner {
        uint32_t level;
        bool isWaitSpawn;
        bool isTutorial;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        csl::ut::Array<uint32_t> poles;
        bool onlyHeightField;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoSpawner* pInstance);
        static void Clean(MiniBossSumoSpawner* pInstance);
    };

    struct MiniBossTrackerSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        csl::ut::Array<uint32_t> bases;
        csl::ut::Array<uint32_t> attackTargets;
        csl::ut::Array<uint32_t> attackTargets2;
        csl::ut::Array<uint32_t> attackTargets3;
        bool isWaitSpawn;
        bool isTutorial;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerSpawner* pInstance);
        static void Clean(MiniBossTrackerSpawner* pInstance);
    };

    struct MiniBossTrackerAttackTargetSpawner {
        enum class Type : int8_t {
            Mine = 0,
            RingHole = 1,
            MineNoMotion = 2,
        };

        Type type;
        float waitTime;
        float repeatTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerAttackTargetSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerAttackTargetSpawner* pInstance);
        static void Clean(MiniBossTrackerAttackTargetSpawner* pInstance);
    };

    struct MiniBossTrackerBaseSpawner {
        csl::ut::Array<uint32_t> gimmicks;
        float returnRadius;
        float visibleDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerBaseSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerBaseSpawner* pInstance);
        static void Clean(MiniBossTrackerBaseSpawner* pInstance);
    };

    struct MiniBossTyrantSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool isTutorial;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        int32_t no;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantSpawner* pInstance);
        static void Clean(MiniBossTyrantSpawner* pInstance);
    };

    struct ObjWarShipBirdSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarShipBirdSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarShipBirdSpawner* pInstance);
        static void Clean(ObjWarShipBirdSpawner* pInstance);
    };

    struct ObjWarShipBulletSpawner {
        int32_t railNo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarShipBulletSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarShipBulletSpawner* pInstance);
        static void Clean(ObjWarShipBulletSpawner* pInstance);
    };

    struct ObjWarshipDashRingSpawner {
        enum class Visual : int8_t {
            WarshipDashRing = 0,
            RainbowRing = 1,
            None = 2,
            Num = 3,
        };

        Visual visual;
        float OutOfControl;
        float KeepVelocity;
        float Speed;
        bool PosConst;
        bool VeloConst;
        bool Spin;
        bool AirTrick;
        ActionNotification actions[3];
        PathMovement pathMovement;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarshipDashRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarshipDashRingSpawner* pInstance);
        static void Clean(ObjWarshipDashRingSpawner* pInstance);
    };

    struct LandingLaunchParam {
        float outStrength;
        float inStrength;
        float outElev;
        float inElev;
        float speedMin;
        float speedMax;
        float speedMinLength;
        float speedMaxLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(LandingLaunchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(LandingLaunchParam* pInstance);
        static void Clean(LandingLaunchParam* pInstance);
    };

    struct ObjWarshipLandVolumeSpawner {
        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        StateType state;
        ActionType action;
        VolumeTriggerSpawner volume;
        LandingLaunchParam launchParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarshipLandVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarshipLandVolumeSpawner* pInstance);
        static void Clean(ObjWarshipLandVolumeSpawner* pInstance);
    };

    struct WarshipSpeedParam {
        enum class SpeedUseType : int8_t {
            NONE = 0,
            SET = 1,
            RESET = 2,
        };

        SpeedUseType useType;
        float highSpeed;
        float lowSpeed;
        float changeLowSpeedDistance;
        float disableDistanceMaxSpeed;
        float relativeSpeedDisableDistance;
        float speedOnJump;
        float speedDownOnJumpDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipSpeedParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipSpeedParam* pInstance);
        static void Clean(WarshipSpeedParam* pInstance);
    };

    struct WarshipMotionParam {
        enum class MotionType : int8_t {
            MOTION_NONE = 0,
            DASHRING = 1,
            BULLET = 2,
            BIRD = 3,
        };

        enum class MotionPattern : int8_t {
            START = 0,
            END = 1,
        };

        MotionType motionType;
        MotionPattern motionPattern;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipMotionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipMotionParam* pInstance);
        static void Clean(WarshipMotionParam* pInstance);
    };

    struct ObjWarshipVolumeSpawner {
        enum class StateType : int8_t {
            DEFAULTSTATE_ON = 0,
            DEFAULTSTATE_OFF = 1,
        };

        enum class ActionType : int8_t {
            ACTION_EACHTIME = 0,
            ACTION_ONCE = 1,
        };

        StateType state;
        ActionType action;
        WarshipSpeedParam speedParam;
        WarshipMotionParam motionParam;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarshipVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarshipVolumeSpawner* pInstance);
        static void Clean(ObjWarshipVolumeSpawner* pInstance);
    };

    struct WarshipLocatorInfo {
        csl::ut::VariableString attackPathName;
        csl::ut::Array<uint32_t> locaterList;
        float changeStateDistance;
        float stopAttackDistance;
        csl::ut::VariableString grindPathNames[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipLocatorInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipLocatorInfo* pInstance);
        static void Clean(WarshipLocatorInfo* pInstance);
    };

    struct WarshipCameraParam {
        float start;
        float end;
        uint32_t cameraActivator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipCameraParam* pInstance);
        static void Clean(WarshipCameraParam* pInstance);
    };

    struct WarshipPathSectionInfo {
        bool enable;
        float start;
        float end;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipPathSectionInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipPathSectionInfo* pInstance);
        static void Clean(WarshipPathSectionInfo* pInstance);
    };

    struct MiniBossWarshipSpawner {
        uint32_t level;
        csl::ut::Array<uint32_t> territories;
        bool isWaitSpawn;
        bool isTutorial;
        bool useTerritory;
        bool respawnableByMeteorShower;
        ObjTerritorySpawner territoryInfo;
        csl::ut::Array<uint32_t> portalBits;
        csl::ut::VariableString wanderPathName;
        WarshipLocatorInfo locatorInfo[3];
        int32_t eacapePathNo;
        csl::ut::Array<uint32_t> winWarpList;
        csl::ut::Array<uint32_t> eventLocatorList;
        WarshipCameraParam cameraParam[20];
        WarshipPathSectionInfo rotateInfo[20];
        WarshipPathSectionInfo wanderPathInfo;
        WarshipPathSectionInfo noBombPathInfo[10];
        EnemyPracticeNotifierConfig practiceConfig;
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipSpawner* pInstance);
        static void Clean(MiniBossWarshipSpawner* pInstance);
    };

    struct MiniBossSpawnerSpawner {
        int32_t minibossId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpawnerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpawnerSpawner* pInstance);
        static void Clean(MiniBossSpawnerSpawner* pInstance);
    };

    struct ObjBarbecueMachineSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBarbecueMachineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBarbecueMachineSpawner* pInstance);
        static void Clean(ObjBarbecueMachineSpawner* pInstance);
    };

    struct ObjBarbecueSonicSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBarbecueSonicSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBarbecueSonicSpawner* pInstance);
        static void Clean(ObjBarbecueSonicSpawner* pInstance);
    };

    struct ObjFishCoinSpawner {
        int32_t no;
        bool eventDriven;
        bool spawnByGrowFlower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFishCoinSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFishCoinSpawner* pInstance);
        static void Clean(ObjFishCoinSpawner* pInstance);
    };

    struct ObjFisherSonicSpawner {
        csl::math::Vector3 castPointCenter;
        float castPointRadius;
        csl::math::Vector3 finishPoint;
        csl::math::Vector3 largeFishPoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFisherSonicSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFisherSonicSpawner* pInstance);
        static void Clean(ObjFisherSonicSpawner* pInstance);
    };

    struct ObjFishingBigSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFishingBigSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFishingBigSpawner* pInstance);
        static void Clean(ObjFishingBigSpawner* pInstance);
    };

    struct ObjFishingSequenceSpawner {
        int32_t spotId;
        uint32_t sonicObj;
        uint32_t bigObj;
        uint32_t talkCamera;
        uint32_t fishingCamera;
        uint32_t castCamera;
        uint32_t fishingSonicPos;
        csl::math::Vector3 fishSwimCenter;
        float fishSwimRadius;
        float buoyCameraTransitTime;
        csl::math::Vector3 buoyCameraOffset;
        csl::math::Vector3 battleCameraOffset;
        csl::math::Vector3 catchCameraOffset;
        float fishingCameraTransitTime;
        csl::math::Vector3 cyberNoiseEffectPos;
        csl::math::Vector3 cyberNoiseEffectRot;
        uint32_t barbecueSonicObj;
        uint32_t barbecueMachineObj;
        uint32_t barbecueCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFishingSequenceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFishingSequenceSpawner* pInstance);
        static void Clean(ObjFishingSequenceSpawner* pInstance);
    };

    struct ObjAmySpawner {
        enum class PurposeOfUse : int8_t {
            Normal = 0,
            Quest = 1,
            Quest_Retry = 2,
            SubEvent = 3,
            NumUses = 4,
        };

        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        enum class AdditionalColliderShape : int8_t {
            Cylinder = 0,
            Box = 1,
            Sphere = 2,
            Capsule = 3,
            NumShapes = 4,
        };

        int32_t no;
        PurposeOfUse purposeOfUse;
        Value questType;
        bool eventDriven;
        csl::ut::VariableString luaName;
        csl::ut::VariableString eventName;
        bool isEndKill;
        bool useDefaultPath;
        csl::ut::Array<uint32_t> hiddenList;
        bool isUseSequenceItem;
        int32_t requiredSequenceItem;
        csl::ut::VariableString lackLuaName;
        csl::ut::VariableString inputEventName;
        bool useAdditionalCollider;
        AdditionalColliderShape additionalColliderShape;
        csl::math::Vector3 offset;
        csl::math::Vector3 extents;
        float radius;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAmySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAmySpawner* pInstance);
        static void Clean(ObjAmySpawner* pInstance);
    };

    struct ObjKnucklesSpawner {
        enum class PurposeOfUse : int8_t {
            Normal = 0,
            Quest = 1,
            Quest_Retry = 2,
            SubEvent = 3,
            NumUses = 4,
        };

        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        enum class AdditionalColliderShape : int8_t {
            Cylinder = 0,
            Box = 1,
            Sphere = 2,
            Capsule = 3,
            NumShapes = 4,
        };

        int32_t no;
        PurposeOfUse purposeOfUse;
        Value questType;
        bool eventDriven;
        csl::ut::VariableString luaName;
        csl::ut::VariableString eventName;
        bool isEndKill;
        bool useDefaultPath;
        csl::ut::Array<uint32_t> hiddenList;
        bool isUseSequenceItem;
        int32_t requiredSequenceItem;
        csl::ut::VariableString lackLuaName;
        csl::ut::VariableString inputEventName;
        bool useAdditionalCollider;
        AdditionalColliderShape additionalColliderShape;
        csl::math::Vector3 offset;
        csl::math::Vector3 extents;
        float radius;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnucklesSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnucklesSpawner* pInstance);
        static void Clean(ObjKnucklesSpawner* pInstance);
    };

    struct ObjKodamaSpawner {
        int32_t no;
        bool eventDriven;
        bool restrictMotion;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaSpawner* pInstance);
        static void Clean(ObjKodamaSpawner* pInstance);
    };

    struct ObjKodamaElderSpawner {
        int32_t no;
        uint32_t fastTravelLocator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaElderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaElderSpawner* pInstance);
        static void Clean(ObjKodamaElderSpawner* pInstance);
    };

    struct ObjKodamaEscortSpawner {
        enum class QuestType : uint8_t {
            KodamaEscortDesert = 0,
            NumQuestTypes = 1,
        };

        int32_t no;
        QuestType questType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaEscortSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaEscortSpawner* pInstance);
        static void Clean(ObjKodamaEscortSpawner* pInstance);
    };

    struct ObjKodamaHermitSpawner {
        int32_t no;
        uint32_t fastTravelLocator;
        csl::ut::VariableString eventNamePower;
        csl::ut::VariableString eventNameGuard;
        csl::ut::VariableString eventNamePowerAndGuard;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaHermitSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaHermitSpawner* pInstance);
        static void Clean(ObjKodamaHermitSpawner* pInstance);
    };

    struct ObjKodamaMapSpawner {
        enum class CharacterType : int8_t {
            Amy = 0,
            Knuckles = 1,
            Tails = 2,
            Num = 3,
        };

        CharacterType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaMapSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaMapSpawner* pInstance);
        static void Clean(ObjKodamaMapSpawner* pInstance);
    };

    struct ObjKodamaMasterSpawner {
        enum class TrialType : int8_t {
            Dragon = 0,
            Snake = 1,
            Tiger = 2,
            Crane = 3,
            Num = 4,
        };

        int32_t no;
        TrialType trialType;
        csl::ut::VariableString eventName;
        bool useDefaultPath;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaMasterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaMasterSpawner* pInstance);
        static void Clean(ObjKodamaMasterSpawner* pInstance);
    };

    struct ObjKodamaNewFormSpawner {
        enum class Value : int8_t {
            RareA = 0,
            RareB = 1,
            RareC = 2,
            RareD = 3,
            RareE = 4,
            Bronze = 5,
            Silver = 6,
            Goald = 7,
            Num = 8,
        };

        int32_t no;
        bool eventDriven;
        bool restrictMotion;
        Value type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaNewFormSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaNewFormSpawner* pInstance);
        static void Clean(ObjKodamaNewFormSpawner* pInstance);
    };

    struct ObjKodamaQuestSpawner {
        enum class QuestType : uint8_t {
            KodamaCollectionGrass = 0,
            KodamaCollectionDesert = 1,
            NumQuestTypes = 2,
        };

        int32_t no;
        QuestType questType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaQuestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaQuestSpawner* pInstance);
        static void Clean(ObjKodamaQuestSpawner* pInstance);
    };

    struct ObjKodamaChildSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaChildSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaChildSpawner* pInstance);
        static void Clean(ObjKodamaChildSpawner* pInstance);
    };

    struct ObjKodamaDiscipleSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaDiscipleSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaDiscipleSpawner* pInstance);
        static void Clean(ObjKodamaDiscipleSpawner* pInstance);
    };

    struct ObjKodamaLoverSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaLoverSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaLoverSpawner* pInstance);
        static void Clean(ObjKodamaLoverSpawner* pInstance);
    };

    struct ObjKodamaMotherSpawner {
        enum class PurposeOfUse : uint8_t {
            Normal = 0,
            Quest = 1,
            NumTypes = 2,
        };

        int32_t no;
        bool eventDriven;
        PurposeOfUse purposeOfUse;
        float modelScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaMotherSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaMotherSpawner* pInstance);
        static void Clean(ObjKodamaMotherSpawner* pInstance);
    };

    struct ObjKodamaSoldierSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaSoldierSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaSoldierSpawner* pInstance);
        static void Clean(ObjKodamaSoldierSpawner* pInstance);
    };

    struct ObjKodamaWarriorSpawner {
        int32_t no;
        bool eventDriven;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaWarriorSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaWarriorSpawner* pInstance);
        static void Clean(ObjKodamaWarriorSpawner* pInstance);
    };

    struct ObjSageSpawner {
        enum class PurposeOfUse : int8_t {
            Normal = 0,
            Quest = 1,
            SubEvent = 2,
            NumUses = 3,
        };

        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        enum class AdditionalColliderShape : int8_t {
            Cylinder = 0,
            Box = 1,
            Sphere = 2,
            Capsule = 3,
            NumShapes = 4,
        };

        int32_t no;
        PurposeOfUse purposeOfUse;
        Value questType;
        bool eventDriven;
        csl::ut::VariableString luaName;
        csl::ut::VariableString eventName;
        bool isEndKill;
        bool useDefaultPath;
        csl::ut::Array<uint32_t> hiddenList;
        bool isUseSequenceItem;
        int32_t requiredSequenceItem;
        csl::ut::VariableString inputEventName;
        bool useAdditionalCollider;
        AdditionalColliderShape additionalColliderShape;
        csl::math::Vector3 offset;
        csl::math::Vector3 extents;
        float radius;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSageSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSageSpawner* pInstance);
        static void Clean(ObjSageSpawner* pInstance);
    };

    struct ObjTailsSpawner {
        enum class PurposeOfUse : int8_t {
            Normal = 0,
            Quest = 1,
            Quest_Retry = 2,
            SubEvent = 3,
            NumUses = 4,
        };

        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        int32_t no;
        PurposeOfUse purposeOfUse;
        Value questType;
        bool eventDriven;
        csl::ut::VariableString luaName;
        csl::ut::VariableString eventName;
        bool isEndKill;
        bool useDefaultPath;
        csl::ut::Array<uint32_t> hiddenList;
        bool isUseSequenceItem;
        int32_t requiredSequenceItem;
        csl::ut::VariableString lackLuaName;
        csl::ut::VariableString inputEventName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTailsSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTailsSpawner* pInstance);
        static void Clean(ObjTailsSpawner* pInstance);
    };

    struct PathMoveCameraParam {
        float azimuth;
        float elevation;
        float distance;
        float zRoll;
        float fovy;
        csl::math::Vector3 frameOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathMoveCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathMoveCameraParam* pInstance);
        static void Clean(PathMoveCameraParam* pInstance);
    };

    struct ObjPathMoveFieldSpawner {
        PathMoveCameraParam cameraParam;
        csl::ut::VariableString pathName;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPathMoveFieldSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPathMoveFieldSpawner* pInstance);
        static void Clean(ObjPathMoveFieldSpawner* pInstance);
    };

    struct DropQuestItemParam {
        int32_t dropNum;
        float velocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DropQuestItemParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DropQuestItemParam* pInstance);
        static void Clean(DropQuestItemParam* pInstance);
    };

    struct ObjQuestBoxSpawner {
        enum class BoxSizeType : int8_t {
            SMALL = 0,
            MIDDLE = 1,
            LARGE = 2,
            SIZETYPE_NUM = 3,
        };

        BoxSizeType size;
        int32_t heightBoxNum;
        int32_t SideBoxNum;
        int32_t depthBoxNum;
        DropQuestItemParam dropItemParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuestBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuestBoxSpawner* pInstance);
        static void Clean(ObjQuestBoxSpawner* pInstance);
    };

    struct ObjQuestBreakBoxSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuestBreakBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuestBreakBoxSpawner* pInstance);
        static void Clean(ObjQuestBreakBoxSpawner* pInstance);
    };

    struct GoalBoxParam {
        float depth;
        float height;
        float width;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GoalBoxParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GoalBoxParam* pInstance);
        static void Clean(GoalBoxParam* pInstance);
    };

    struct ObjQuestDrawBridgeGoalSpawner {
        GoalBoxParam BoxPram;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuestDrawBridgeGoalSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuestDrawBridgeGoalSpawner* pInstance);
        static void Clean(ObjQuestDrawBridgeGoalSpawner* pInstance);
    };

    struct ObjKodamaEscortDarumaSpawner {
        uint32_t level;
        uint32_t bodyCount;
        float stompWaitTime;
        bool isThorn;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaEscortDarumaSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaEscortDarumaSpawner* pInstance);
        static void Clean(ObjKodamaEscortDarumaSpawner* pInstance);
    };

    struct ObjBeeFlowerSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBeeFlowerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBeeFlowerSpawner* pInstance);
        static void Clean(ObjBeeFlowerSpawner* pInstance);
    };

    struct ObjBeeSwarmSpawner {
        int8_t beeNum;
        float beeInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBeeSwarmSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBeeSwarmSpawner* pInstance);
        static void Clean(ObjBeeSwarmSpawner* pInstance);
    };

    struct ObjGrassRestoreVolumeSpawner {
        csl::math::Vector3 extents;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGrassRestoreVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGrassRestoreVolumeSpawner* pInstance);
        static void Clean(ObjGrassRestoreVolumeSpawner* pInstance);
    };

    struct ObjMowingGrassSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMowingGrassSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMowingGrassSpawner* pInstance);
        static void Clean(ObjMowingGrassSpawner* pInstance);
    };

    struct ObjResultViewCameraStoreSpawner {
        uint32_t camera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjResultViewCameraStoreSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjResultViewCameraStoreSpawner* pInstance);
        static void Clean(ObjResultViewCameraStoreSpawner* pInstance);
    };

    struct ObjQuestEndPositionSpawner {
        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        enum class Condition : int8_t {
            COND_FAILED = 0,
            COND_CLEARED = 1,
        };

        Value questType;
        Condition condition;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuestEndPositionSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuestEndPositionSpawner* pInstance);
        static void Clean(ObjQuestEndPositionSpawner* pInstance);
    };

    struct ObjQuestStartPositionSpawner {
        enum class Value : int8_t {
            KodamaCollection01 = 0,
            Mowing = 1,
            KodamaEscort = 2,
            KodamaCollection02 = 3,
            DarumaBattle = 4,
            CollectItem = 5,
            DrawBridge = 6,
            NumQuestTypes = 7,
        };

        Value questType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuestStartPositionSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuestStartPositionSpawner* pInstance);
        static void Clean(ObjQuestStartPositionSpawner* pInstance);
    };

    struct ObjEnemyBulletPatternPreviewSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEnemyBulletPatternPreviewSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEnemyBulletPatternPreviewSpawner* pInstance);
        static void Clean(ObjEnemyBulletPatternPreviewSpawner* pInstance);
    };

    struct ObjHomingLaserTargetManagerSpawner {
        csl::ut::Array<uint32_t> enemyIds;
        uint32_t bossId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHomingLaserTargetManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHomingLaserTargetManagerSpawner* pInstance);
        static void Clean(ObjHomingLaserTargetManagerSpawner* pInstance);
    };

    struct ObjShootingEnemyCoreSpawner {
        int32_t no;
        csl::ut::VariableString luaName;
        int32_t hp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShootingEnemyCoreSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShootingEnemyCoreSpawner* pInstance);
        static void Clean(ObjShootingEnemyCoreSpawner* pInstance);
    };

    struct ChangeWaveCondition {
        bool coreEnemyHpRemain;
        float coreEnemyRemanHpPersentage;
        bool timeLimitFlag;
        float limitTime;
        bool normalEnemyAllClear;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChangeWaveCondition* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChangeWaveCondition* pInstance);
        static void Clean(ChangeWaveCondition* pInstance);
    };

    struct ObjShootingEnemyManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> enemyIds;
        csl::ut::VariableString luaName;
        ChangeWaveCondition changeWaveCondition;
        bool startScriptAfterSerif;
        csl::ut::VariableString soundName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShootingEnemyManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShootingEnemyManagerSpawner* pInstance);
        static void Clean(ObjShootingEnemyManagerSpawner* pInstance);
    };

    struct ObjShootingEnemyNormalSpawner {
        enum class HpType : uint8_t {
            HpS = 0,
            HpM = 1,
            HpL = 2,
        };

        int32_t no;
        HpType hpType;
        csl::ut::VariableString luaName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShootingEnemyNormalSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShootingEnemyNormalSpawner* pInstance);
        static void Clean(ObjShootingEnemyNormalSpawner* pInstance);
    };

    struct ObjShootingEnemyWaveManagerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> enemyManagerIds;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShootingEnemyWaveManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShootingEnemyWaveManagerSpawner* pInstance);
        static void Clean(ObjShootingEnemyWaveManagerSpawner* pInstance);
    };

    struct ObjAmbSoundVolumeSpawner {
        enum class ShapeType : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_CAPSULE = 3,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Z_PLANE = 1,
        };

        int32_t id;
        ShapeType shape;
        BasePoint basePoint;
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAmbSoundVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAmbSoundVolumeSpawner* pInstance);
        static void Clean(ObjAmbSoundVolumeSpawner* pInstance);
    };

    struct ObjChangeBGMAisacVolumeSpawner {
        csl::ut::VariableString aisacName;
        float targetAisacValue;
        float fadeInTime;
        float fadeOutTime;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChangeBGMAisacVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChangeBGMAisacVolumeSpawner* pInstance);
        static void Clean(ObjChangeBGMAisacVolumeSpawner* pInstance);
    };

    struct ObjChangeBGMTriggerSpawner {
        csl::ut::VariableString cueName;
        float fadeOutTime;
        float playDelayTime;
        float fadeInTime;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChangeBGMTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChangeBGMTriggerSpawner* pInstance);
        static void Clean(ObjChangeBGMTriggerSpawner* pInstance);
    };

    struct ObjChangeBGMVolumeSpawner {
        enum class ShapeType : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_CAPSULE = 3,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Z_PLANE = 1,
        };

        int32_t id;
        ShapeType shape;
        BasePoint basePoint;
        float width;
        float height;
        float depth;
        bool isStop;
        bool oneTime;
        bool autoRemoveRequest;
        int32_t defaultBgmId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChangeBGMVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChangeBGMVolumeSpawner* pInstance);
        static void Clean(ObjChangeBGMVolumeSpawner* pInstance);
    };

    struct ObjChangeSEAisacVolumeSpawner {
        csl::ut::VariableString aisacName;
        float targetAisacValue;
        float fadeInTime;
        float fadeOutTime;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjChangeSEAisacVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjChangeSEAisacVolumeSpawner* pInstance);
        static void Clean(ObjChangeSEAisacVolumeSpawner* pInstance);
    };

    struct ObjExtentSoundSourceSpawner {
        enum class PlayMode : int8_t {
            PLAYMODE_LOOP = 0,
            PLAYMODE_ONE_SHOT = 1,
            PLAYMODE_PERIODIC = 2,
        };

        enum class Shape : int8_t {
            SHAPE_SPHERE = 0,
        };

        csl::ut::VariableString cueName;
        PlayMode playMode;
        float timeOffset;
        float playInterval;
        float volume;
        Shape shape;
        csl::math::Vector3 hearingRange;
        csl::math::Vector3 undampedRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjExtentSoundSourceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjExtentSoundSourceSpawner* pInstance);
        static void Clean(ObjExtentSoundSourceSpawner* pInstance);
    };

    struct ObjOneShotBGMTriggerSpawner {
        enum class ShapeType : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Z_PLANE = 1,
        };

        csl::ut::VariableString cueName;
        float fadeTime;
        ShapeType shape;
        BasePoint basePoint;
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOneShotBGMTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOneShotBGMTriggerSpawner* pInstance);
        static void Clean(ObjOneShotBGMTriggerSpawner* pInstance);
    };

    struct ObjOneShotSoundTriggerSpawner {
        enum class SoundPositionType : int8_t {
            SOUND_POS_CENTER = 0,
            SOUND_POS_MANUAL = 1,
        };

        enum class ShapeType : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Z_PLANE = 1,
        };

        csl::ut::VariableString cueName;
        float volume;
        bool isPlay3D;
        SoundPositionType soundPositionType;
        csl::math::Vector3 soundPosition;
        ShapeType shape;
        BasePoint basePoint;
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOneShotSoundTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOneShotSoundTriggerSpawner* pInstance);
        static void Clean(ObjOneShotSoundTriggerSpawner* pInstance);
    };

    struct ObjPathSoundSourceSpawner {
        csl::ut::VariableString pathName;
        int32_t searchDivideNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPathSoundSourceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPathSoundSourceSpawner* pInstance);
        static void Clean(ObjPathSoundSourceSpawner* pInstance);
    };

    struct ObjPointSoundSourceSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPointSoundSourceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPointSoundSourceSpawner* pInstance);
        static void Clean(ObjPointSoundSourceSpawner* pInstance);
    };

    struct ObjSoundSourcePlaneSpawner {
        csl::ut::VariableString cueName;
        float volume;
        bool is3D;
        csl::math::Vector3 pos3D;
        PassPlaneTriggerSpawner planeTrigger;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSoundSourcePlaneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSoundSourcePlaneSpawner* pInstance);
        static void Clean(ObjSoundSourcePlaneSpawner* pInstance);
    };

    struct ObjSoundSourceVolumeSpawner {
        VolumeTriggerSpawner volumeTrigger;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSoundSourceVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSoundSourceVolumeSpawner* pInstance);
        static void Clean(ObjSoundSourceVolumeSpawner* pInstance);
    };

    struct ObjAlbatrossChaseSpawner {
        csl::math::Vector3 relative;
        float thresholdTime;
        float timeMin;
        float timeMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAlbatrossChaseSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAlbatrossChaseSpawner* pInstance);
        static void Clean(ObjAlbatrossChaseSpawner* pInstance);
    };

    struct ObjAlbatrossGroupSpawner {
        enum class RotAxisType : int8_t {
            ROT_AXIS_X = 0,
            ROT_AXIS_Y = 1,
            ROT_AXIS_Z = 2,
        };

        int32_t groupNum;
        csl::math::Vector3 spawmAreaSize;
        csl::math::Vector3 territorySize;
        csl::math::Vector3 offsetPos;
        csl::math::Vector3 baseMoveSpeed;
        float baseRotAngleSpeed;
        float baseRotAnglePhase;
        RotAxisType baseRotAxis;
        bool isGroupRotLock;
        float baseMoveLimitDistance;
        int32_t randomParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAlbatrossGroupSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAlbatrossGroupSpawner* pInstance);
        static void Clean(ObjAlbatrossGroupSpawner* pInstance);
    };

    struct ObjBreakableObjectSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBreakableObjectSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBreakableObjectSpawner* pInstance);
        static void Clean(ObjBreakableObjectSpawner* pInstance);
    };

    struct ObjAncientBridgeSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAncientBridgeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAncientBridgeSpawner* pInstance);
        static void Clean(ObjAncientBridgeSpawner* pInstance);
    };

    struct ObjBossNestColliderSpawner {
        enum class Shape : int8_t {
            Box = 0,
            Sphere = 1,
            Capsule = 2,
            NumShapes = 3,
        };

        int32_t no;
        Shape shape;
        csl::math::Vector3 offset;
        csl::math::Vector3 extents;
        float radius;
        float height;
        bool collidesWithCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossNestColliderSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossNestColliderSpawner* pInstance);
        static void Clean(ObjBossNestColliderSpawner* pInstance);
    };

    struct ObjGiantBridgeSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantBridgeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantBridgeSpawner* pInstance);
        static void Clean(ObjGiantBridgeSpawner* pInstance);
    };

    struct ObjGiantIncidentSpawner {
        uint32_t startPos;
        uint32_t endPos;
        uint32_t endLookAt;
        uint32_t giant;
        csl::ut::Array<uint32_t> rocks;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantIncidentSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantIncidentSpawner* pInstance);
        static void Clean(ObjGiantIncidentSpawner* pInstance);
    };

    struct ObjGiantIncidentGiantSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantIncidentGiantSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantIncidentGiantSpawner* pInstance);
        static void Clean(ObjGiantIncidentGiantSpawner* pInstance);
    };

    struct ObjGiantIncidentRockSpawner {
        enum class ModelType : int8_t {
            TYPE_A = 0,
            TYPE_B = 1,
            TYPE_C = 2,
            TYPE_NUM = 3,
        };

        ModelType modelType;
        bool isBreakable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantIncidentRockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantIncidentRockSpawner* pInstance);
        static void Clean(ObjGiantIncidentRockSpawner* pInstance);
    };

    struct ObjGiantStatueSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantStatueSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantStatueSpawner* pInstance);
        static void Clean(ObjGiantStatueSpawner* pInstance);
    };

    struct ObjGiantTowerSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantTowerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantTowerSpawner* pInstance);
        static void Clean(ObjGiantTowerSpawner* pInstance);
    };

    struct ObjCameraLimitedPanSpawner {
        enum class PositionMode : int8_t {
            POS_MODE_FIX = 0,
            POS_MODE_MAINTAIN_DISTANCE = 1,
        };

        float fovy;
        csl::math::Vector3 atBase;
        float atRadius;
        float playerRadius;
        float atOffsetY;
        PositionMode positionMode;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraLimitedPanSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraLimitedPanSpawner* pInstance);
        static void Clean(ObjCameraLimitedPanSpawner* pInstance);
    };

    struct ObjStatueSmallSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> targetList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStatueSmallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStatueSmallSpawner* pInstance);
        static void Clean(ObjStatueSmallSpawner* pInstance);
    };

    struct ObjWaterfallBreakSpawner {
        int32_t no;
        csl::ut::Array<uint32_t> hiddenList;
        float collisionWidth;
        float collisionHeight;
        float collisionDepth;
        csl::math::Vector3 collisionOffset;
        VolumeTriggerSpawner effectVolume;
        VolumeTriggerSpawner effectVolumeBreak[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWaterfallBreakSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWaterfallBreakSpawner* pInstance);
        static void Clean(ObjWaterfallBreakSpawner* pInstance);
    };

    struct ObjWaterfallStatueSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWaterfallStatueSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWaterfallStatueSpawner* pInstance);
        static void Clean(ObjWaterfallStatueSpawner* pInstance);
    };

    struct ObjAirFireBarSpawner {
        int16_t barCount;
        float rotSpeed;
        float bouncePower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAirFireBarSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAirFireBarSpawner* pInstance);
        static void Clean(ObjAirFireBarSpawner* pInstance);
    };

    struct ObjDragonActionVolumeSpawner {
        enum class ActionType : int8_t {
            MISSILE = 0,
        };

        VolumeTriggerSpawner volume;
        ActionType actionType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonActionVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonActionVolumeSpawner* pInstance);
        static void Clean(ObjDragonActionVolumeSpawner* pInstance);
    };

    struct ObjDragonAreaSubVolumeSpawner {
        VolumeTriggerSpawner volume;
        uint32_t target;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonAreaSubVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonAreaSubVolumeSpawner* pInstance);
        static void Clean(ObjDragonAreaSubVolumeSpawner* pInstance);
    };

    struct ObjDragonAreaVolumeSpawner {
        VolumeTriggerSpawner volume;
        float closeRadius;
        uint32_t dragon;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonAreaVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonAreaVolumeSpawner* pInstance);
        static void Clean(ObjDragonAreaVolumeSpawner* pInstance);
    };

    struct ObjDragonCameraChangeVolumeSpawner {
        VolumeTriggerSpawner volume;
        int32_t priority;
        float easeTimeEnter;
        float easeTimeLeave;
        float upOffset;
        float distance;
        float azimuthOffset;
        float elevationOffset;
        float roll;
        bool isChangeFocus;
        float focusRatio;
        float focusLimitAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonCameraChangeVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonCameraChangeVolumeSpawner* pInstance);
        static void Clean(ObjDragonCameraChangeVolumeSpawner* pInstance);
    };

    struct ObjDragonIncidentSpawner_EventFirstParam {
        uint32_t position;
        uint32_t lookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_EventFirstParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_EventFirstParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_EventFirstParam* pInstance);
    };

    struct ObjDragonIncidentSpawner_EventEndParam {
        uint32_t position;
        uint32_t lookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_EventEndParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_EventEndParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_EventEndParam* pInstance);
    };

    struct ObjDragonIncidentSpawner_EventRetryParam {
        uint32_t position;
        uint32_t lookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_EventRetryParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_EventRetryParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_EventRetryParam* pInstance);
    };

    struct ObjDragonIncidentSpawner_AutorunCameraParam {
        enum class PlayerOffsetType : int8_t {
            PLAYER_OFFSET_NORMAL = 0,
            PLAYER_OFFSET_ABSOLUTE = 1,
        };

        float fovy;
        float zRot;
        float distance;
        float pathOffset;
        bool reversePathFront;
        bool usePathVerticalComponent;
        bool usePathNormal;
        float angleSensitivity;
        float angleSensitivityBoost;
        float azimuthOffsetDeg;
        float elevationOffsetDeg;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        PlayerOffsetType playerOffsetType;
        float interpolateTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_AutorunCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_AutorunCameraParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_AutorunCameraParam* pInstance);
    };

    struct ObjDragonIncidentSpawner_AutorunParam {
        csl::ut::VariableString pathName;
        float speed;
        float boostSpeed;
        float boostSpeedMax;
        float width;
        ObjDragonIncidentSpawner_AutorunCameraParam cameraIntro;
        ObjDragonIncidentSpawner_AutorunCameraParam cameraMain;
        csl::ut::Array<uint32_t> cameraCollision;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_AutorunParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_AutorunParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_AutorunParam* pInstance);
    };

    struct ObjDragonIncidentSpawner_MissilePresetParam {
        float heightOffset;
        float firstPathOffset;
        float approachPathOffset;
        float approachSpeed;
        float attackSpeed;
        float aimTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_MissilePresetParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_MissilePresetParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_MissilePresetParam* pInstance);
    };

    struct ObjDragonIncidentSpawner_MissileCommonParam {
        ObjDragonIncidentSpawner_MissilePresetParam presets[10];
        float explodeRadius;
        float explodeTime;
        uint32_t damageRings;
        float dummyIntervalMin;
        float dummyIntervalMax;
        uint32_t dummyPresetMax;
        bool dummyDamage;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner_MissileCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner_MissileCommonParam* pInstance);
        static void Clean(ObjDragonIncidentSpawner_MissileCommonParam* pInstance);
    };

    struct ObjDragonIncidentSpawner {
        uint32_t dragon;
        ObjDragonIncidentSpawner_EventFirstParam eventFirst;
        ObjDragonIncidentSpawner_EventEndParam eventEnd;
        ObjDragonIncidentSpawner_EventRetryParam eventRetry;
        ObjDragonIncidentSpawner_AutorunParam autorun;
        ObjDragonIncidentSpawner_MissileCommonParam missile;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentSpawner* pInstance);
        static void Clean(ObjDragonIncidentSpawner* pInstance);
    };

    struct ObjDragonIncidentCameraTriggerSpawner {
        uint32_t dragonIncident;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentCameraTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentCameraTriggerSpawner* pInstance);
        static void Clean(ObjDragonIncidentCameraTriggerSpawner* pInstance);
    };

    struct ObjDragonIncidentDragonSpawner {
        uint32_t incident;
        float height;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentDragonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentDragonSpawner* pInstance);
        static void Clean(ObjDragonIncidentDragonSpawner* pInstance);
    };

    struct ObjDragonIncidentMissileSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentMissileSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentMissileSpawner* pInstance);
        static void Clean(ObjDragonIncidentMissileSpawner* pInstance);
    };

    struct ObjDragonIncidentMissileGroupSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentMissileGroupSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentMissileGroupSpawner* pInstance);
        static void Clean(ObjDragonIncidentMissileGroupSpawner* pInstance);
    };

    struct ObjDragonIncidentMissileTriggerSpawner {
        uint32_t dragonIncident;
        csl::math::Vector3 firstOffset;
        csl::math::Vector3 secondOffset;
        csl::math::Vector3 finishOffset;
        uint32_t preset;
        bool aimPlayer;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonIncidentMissileTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonIncidentMissileTriggerSpawner* pInstance);
        static void Clean(ObjDragonIncidentMissileTriggerSpawner* pInstance);
    };

    struct ObjDragonStatusVolumeSpawner {
        VolumeTriggerSpawner volume;
        bool disableMissile;
        bool keepChase;
        bool changeMotion;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDragonStatusVolumeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDragonStatusVolumeSpawner* pInstance);
        static void Clean(ObjDragonStatusVolumeSpawner* pInstance);
    };

    struct ObjGiantBallSpawner {
        bool eventObject;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantBallSpawner* pInstance);
        static void Clean(ObjGiantBallSpawner* pInstance);
    };

    struct ObjGiantCraneSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantCraneSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantCraneSpawner* pInstance);
        static void Clean(ObjGiantCraneSpawner* pInstance);
    };

    struct ObjGiantOrbSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantOrbSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantOrbSpawner* pInstance);
        static void Clean(ObjGiantOrbSpawner* pInstance);
    };

    struct ObjGiantOrbMountSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantOrbMountSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantOrbMountSpawner* pInstance);
        static void Clean(ObjGiantOrbMountSpawner* pInstance);
    };

    struct CraneGrid {
        uint8_t row;
        uint8_t col;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CraneGrid* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CraneGrid* pInstance);
        static void Clean(CraneGrid* pInstance);
    };

    struct OrbMountParam {
        CraneGrid pos;
        float rotate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OrbMountParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OrbMountParam* pInstance);
        static void Clean(OrbMountParam* pInstance);
    };

    struct ObjGiantCraneManagerSpawner {
        int32_t no;
        uint8_t row;
        uint8_t col;
        float gridSize;
        uint8_t correctableGrid;
        float craneSpeed;
        float armSpeed;
        float timeCatch;
        CraneGrid cranePos;
        CraneGrid orbPos[4];
        OrbMountParam orbMount[4];
        GimmickCameraOptionalParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantCraneManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantCraneManagerSpawner* pInstance);
        static void Clean(ObjGiantCraneManagerSpawner* pInstance);
    };

    struct ObjGiantShieldSpawner {
        enum class VisualType : int8_t {
            Normal = 0,
            Broken = 1,
        };

        VisualType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantShieldSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantShieldSpawner* pInstance);
        static void Clean(ObjGiantShieldSpawner* pInstance);
    };

    struct ObjLandSlideSpawner {
        int32_t dummy;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLandSlideSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLandSlideSpawner* pInstance);
        static void Clean(ObjLandSlideSpawner* pInstance);
    };

    struct ObjSandSmokeSpawner {
        enum class EffectColor : uint8_t {
            Yellow = 0,
            Red = 1,
            White = 2,
            NumColor = 3,
        };

        enum class AreaType : uint8_t {
            Circle = 0,
            Square = 1,
        };

        EffectColor color;
        AreaType areaType;
        csl::math::Vector3 size;
        float amount;
        float minDist;
        float duration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSandSmokeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSandSmokeSpawner* pInstance);
        static void Clean(ObjSandSmokeSpawner* pInstance);
    };

    struct ObjBossCloudSpawner {
        int32_t no;
        float distance;
        VolumeTriggerSpawner volume;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossCloudSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossCloudSpawner* pInstance);
        static void Clean(ObjBossCloudSpawner* pInstance);
    };

    struct ObjBrokenRobotSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBrokenRobotSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBrokenRobotSpawner* pInstance);
        static void Clean(ObjBrokenRobotSpawner* pInstance);
    };

    struct ObjBumperSpawner {
        enum class BumperMark : int8_t {
            MarkStar = 0,
            MarkSircle = 1,
            MarkPlain = 2,
            MarkMax = 3,
        };

        BumperMark bumperMark;
        int32_t score;
        float impluse;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBumperSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBumperSpawner* pInstance);
        static void Clean(ObjBumperSpawner* pInstance);
    };

    struct ObjCrackGroundSpawner {
        enum class ModelType : int8_t {
            ModelType_1 = 0,
            ModelType_2 = 1,
        };

        ModelType type;
        csl::ut::Array<uint32_t> hiddenList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCrackGroundSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCrackGroundSpawner* pInstance);
        static void Clean(ObjCrackGroundSpawner* pInstance);
    };

    struct ObjDeviceControllerSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDeviceControllerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDeviceControllerSpawner* pInstance);
        static void Clean(ObjDeviceControllerSpawner* pInstance);
    };

    struct ObjDiveSwitchSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDiveSwitchSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDiveSwitchSpawner* pInstance);
        static void Clean(ObjDiveSwitchSpawner* pInstance);
    };

    struct ObjDrawBridgeSpawner {
        int32_t no;
        float rotate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDrawBridgeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDrawBridgeSpawner* pInstance);
        static void Clean(ObjDrawBridgeSpawner* pInstance);
    };

    struct ObjEnergyBallSpawner {
        int8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEnergyBallSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEnergyBallSpawner* pInstance);
        static void Clean(ObjEnergyBallSpawner* pInstance);
    };

    struct ObjEnergyBallLauncherSpawner {
        float speed;
        float gravity;
        float firstReflectionAngle;
        int32_t scoreThatGivesEnergy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEnergyBallLauncherSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEnergyBallLauncherSpawner* pInstance);
        static void Clean(ObjEnergyBallLauncherSpawner* pInstance);
    };

    struct ObjEnvAnalyzerSpawner {
        int32_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEnvAnalyzerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEnvAnalyzerSpawner* pInstance);
        static void Clean(ObjEnvAnalyzerSpawner* pInstance);
    };

    struct ObjEruptionControlDeviceManagerredRingNodeUse {
        bool useNode[15];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEruptionControlDeviceManagerredRingNodeUse* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEruptionControlDeviceManagerredRingNodeUse* pInstance);
        static void Clean(ObjEruptionControlDeviceManagerredRingNodeUse* pInstance);
    };

    struct ObjEruptionControlDeviceManagerSpawner {
        uint32_t easyLvFailedCount[3];
        float speed;
        float gravity;
        float reflectDampingRatio;
        float reflectDampingSpeed;
        float maxSlope;
        float supportDistance;
        float slideDampingRatio;
        float slideDampingSpeedMin;
        int32_t maxBallCount;
        float firstReflectionAngle;
        int32_t scoreThatGivesEnergy;
        int32_t scoreOpenShutter;
        int32_t scoreThatRolloverBonus;
        int32_t ringCount2;
        int32_t ringCount4;
        int32_t ringCount8;
        int32_t ringCount16;
        int32_t ringCount32;
        int32_t ringCount64;
        int32_t ringCount128;
        int32_t ringCount256;
        float startDuration;
        float restartDuration;
        float clearedDuration;
        float failedDuration;
        float redRingDuration[3];
        int32_t scoreRedRing;
        int32_t countRedRing;
        uint32_t impluseCountFluctuation;
        float fluctuationAngle;
        csl::ut::Array<uint32_t> childs;
        csl::ut::Array<uint32_t> childsAfterClearing;
        csl::ut::Array<uint32_t> redRingNodeList;
        ObjEruptionControlDeviceManagerredRingNodeUse redRingUsePattern[9];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEruptionControlDeviceManagerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEruptionControlDeviceManagerSpawner* pInstance);
        static void Clean(ObjEruptionControlDeviceManagerSpawner* pInstance);
    };

    struct ObjFlipperSpawner {
        enum class RotateDirection : int8_t {
            Left = 0,
            Right = 1,
        };

        RotateDirection rotateDirection;
        float maxMovableAngle;
        float flipUpTime;
        float apexLaunchAngle;
        float axisLaunchAngle;
        float apexSpeed;
        float axisSpeed;
        float axisReflectionSpeedMin;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFlipperSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFlipperSpawner* pInstance);
        static void Clean(ObjFlipperSpawner* pInstance);
    };

    struct ObjKnightIncidentSpawner_FvParam {
        uint32_t startPosition;
        csl::ut::VariableString fvShieldPathName;
        uint32_t camera;
        float shieldSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_FvParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_FvParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_FvParam* pInstance);
    };

    struct ObjKnightIncidentSpawner_EventFirstParam {
        uint32_t position;
        uint32_t lookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_EventFirstParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_EventFirstParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_EventFirstParam* pInstance);
    };

    struct ObjKnightIncidentSpawner_EventEndParam {
        uint32_t position;
        uint32_t lookAt;
        float endDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_EventEndParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_EventEndParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_EventEndParam* pInstance);
    };

    struct ObjKnightIncidentSpawner_EventRetryParam {
        uint32_t position;
        uint32_t lookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_EventRetryParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_EventRetryParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_EventRetryParam* pInstance);
    };

    struct ObjKnightIncidentSpawner_FlyerParam {
        uint32_t flyer;
        csl::ut::VariableString pathName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_FlyerParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_FlyerParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_FlyerParam* pInstance);
    };

    struct ObjKnightIncidentSpawner_ShieldPresetParam {
        csl::math::Vector3 launchOffset;
        csl::math::Vector3 approachOffset;
        float approachSpeed;
        csl::math::Vector3 attackOffset;
        float attackSpeed;
        float attackReadyTime;
        float attackTime;
        csl::math::Vector3 finishOffset;
        float finishSpeed;
        float rotationY;
        float forceOfBoost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_ShieldPresetParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_ShieldPresetParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_ShieldPresetParam* pInstance);
    };

    struct ObjKnightIncidentSpawner_ShieldCommonParam {
        ObjKnightIncidentSpawner_ShieldPresetParam presets[6];
        float collisionRadius;
        uint32_t damageRings;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner_ShieldCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner_ShieldCommonParam* pInstance);
        static void Clean(ObjKnightIncidentSpawner_ShieldCommonParam* pInstance);
    };

    struct ObjKnightIncidentSpawner {
        ObjKnightIncidentSpawner_FvParam fv;
        ObjKnightIncidentSpawner_EventFirstParam eventFirst;
        ObjKnightIncidentSpawner_EventEndParam eventEnd;
        ObjKnightIncidentSpawner_EventRetryParam eventRetry;
        ObjKnightIncidentSpawner_FlyerParam flyer;
        ObjKnightIncidentSpawner_ShieldCommonParam shield;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentSpawner* pInstance);
        static void Clean(ObjKnightIncidentSpawner* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_PathLoopInfo {
        bool enable;
        float start;
        float end;
        uint32_t cameraActivator;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_PathLoopInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_PathLoopInfo* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_PathLoopInfo* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_HoleParam {
        float start;
        float end;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_HoleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_HoleParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_HoleParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_TrailParam {
        float interval;
        int32_t recordNum;
        float width;
        float wallHeight;
        ObjKnightIncidentFlyerSpawner_ConfigParam_HoleParam holes[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_TrailParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_TrailParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_TrailParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData_OneBullet {
        float vert;
        float initSpeed;
        float maxSpeed;
        float acc;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData_OneBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData_OneBullet* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData_OneBullet* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData {
        bool enabled;
        float shotAnimSpeed;
        ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData_OneBullet oneBullet[6];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam {
        ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam_TableData posTable[16];
        float readyDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_CameraParam {
        float fovy;
        float distance;
        float azimuth;
        float elevation;
        float limitRightRatio;
        float limitLeftRatio;
        float upScrollRatio;
        float limitUpScrollDistance;
        float downScrollRatio;
        float limitDownScrollDistance;
        bool isLimitPathDistance;
        float limitPathDistanceMin;
        float limitPathDistanceMax;
        bool isSmoothPath;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_CameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_CameraParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_CameraParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_QuickStepParam {
        bool enable;
        float speed;
        float boostSpeed;
        float boostSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_QuickStepParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_QuickStepParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_QuickStepParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam {
        float startSpeed;
        float decrease;
        float minSpeed;
        float targetDisableTime;
        float resetByFallTime;
        ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_ShotParam shot;
        ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_CameraParam camera;
        ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam_QuickStepParam quickStep;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner_ConfigParam {
        ObjKnightIncidentFlyerSpawner_ConfigParam_TrailParam trail;
        ObjKnightIncidentFlyerSpawner_ConfigParam_EscapeParam escape;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner_ConfigParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner_ConfigParam* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner_ConfigParam* pInstance);
    };

    struct ObjKnightIncidentFlyerSpawner {
        csl::ut::VariableString pathName;
        ObjKnightIncidentFlyerSpawner_PathLoopInfo loopInfo[5];
        int32_t no;
        ObjKnightIncidentFlyerSpawner_ConfigParam config;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentFlyerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentFlyerSpawner* pInstance);
        static void Clean(ObjKnightIncidentFlyerSpawner* pInstance);
    };

    struct ObjKnightIncidentShieldSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentShieldSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentShieldSpawner* pInstance);
        static void Clean(ObjKnightIncidentShieldSpawner* pInstance);
    };

    struct ObjKnightIncidentShieldFvSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentShieldFvSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentShieldFvSpawner* pInstance);
        static void Clean(ObjKnightIncidentShieldFvSpawner* pInstance);
    };

    struct ObjKnightIncidentShieldTriggerSpawner {
        uint32_t knightIncident;
        uint32_t preset;
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKnightIncidentShieldTriggerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKnightIncidentShieldTriggerSpawner* pInstance);
        static void Clean(ObjKnightIncidentShieldTriggerSpawner* pInstance);
    };

    struct ObjPinballDecorationSpawner {
        enum class Type : int8_t {
            TypeA = 0,
            TypeB = 1,
            TypeC = 2,
        };

        Type type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPinballDecorationSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPinballDecorationSpawner* pInstance);
        static void Clean(ObjPinballDecorationSpawner* pInstance);
    };

    struct ObjPinballReverseSpawner {
        enum class Type : int8_t {
            TypeAL = 0,
            TypeAR = 1,
            TypeB = 2,
        };

        Type type;
        float impluse;
        float offsetYColli;
        float relightingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPinballReverseSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPinballReverseSpawner* pInstance);
        static void Clean(ObjPinballReverseSpawner* pInstance);
    };

    struct ObjPinballRedRingSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPinballRedRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPinballRedRingSpawner* pInstance);
        static void Clean(ObjPinballRedRingSpawner* pInstance);
    };

    struct ObjPinballRingSpawner {
        enum class SetType : int8_t {
            EquallySpaced = 0,
            NodeID = 1,
        };

        int32_t score;
        float respawnTime;
        csl::ut::VariableString pathName;
        SetType setType;
        int8_t num;
        csl::ut::Array<uint32_t> setNodeList;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPinballRingSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPinballRingSpawner* pInstance);
        static void Clean(ObjPinballRingSpawner* pInstance);
    };

    struct ObjPinballShutterSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPinballShutterSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPinballShutterSpawner* pInstance);
        static void Clean(ObjPinballShutterSpawner* pInstance);
    };

    struct ObjRolloverSpawner {
        enum class InOutLane : int8_t {
            InLnae = 0,
            OutLane = 1,
        };

        int32_t id;
        InOutLane inOutLane;
        int32_t score;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRolloverSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRolloverSpawner* pInstance);
        static void Clean(ObjRolloverSpawner* pInstance);
    };

    struct ObjSlingshotSpawner {
        int32_t score;
        float impluse;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSlingshotSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSlingshotSpawner* pInstance);
        static void Clean(ObjSlingshotSpawner* pInstance);
    };

    struct ObjVolcanicEruptionSpawner {
        int32_t type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjVolcanicEruptionSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjVolcanicEruptionSpawner* pInstance);
        static void Clean(ObjVolcanicEruptionSpawner* pInstance);
    };

    struct ObjAmbSoundResearcherSpawner {
        float width;
        float height;
        float depth;
        float gridInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAmbSoundResearcherSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAmbSoundResearcherSpawner* pInstance);
        static void Clean(ObjAmbSoundResearcherSpawner* pInstance);
    };

    struct ObjAmbSoundTestMaterialSpawner {
        enum class Material : int8_t {
            MATERIAL_GRASS = 0,
            MATERIAL_WATER = 1,
            NUM_MATERIALS = 2,
        };

        Material material;
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAmbSoundTestMaterialSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAmbSoundTestMaterialSpawner* pInstance);
        static void Clean(ObjAmbSoundTestMaterialSpawner* pInstance);
    };

    struct AnimatorTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AnimatorTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AnimatorTestSpawner* pInstance);
        static void Clean(AnimatorTestSpawner* pInstance);
    };

    struct AnimatorTest2Spawner {
        float speed;
        float lr;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AnimatorTest2Spawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AnimatorTest2Spawner* pInstance);
        static void Clean(AnimatorTest2Spawner* pInstance);
    };

    struct AttractionMoveParam {
        enum class MoveType : int8_t {
            MoveNone = 0,
            MoveStraight = 1,
            MoveRotate = 2,
        };

        MoveType type;
        float distance;
        float cycle;
        csl::math::Vector3 axis;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AttractionMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AttractionMoveParam* pInstance);
        static void Clean(AttractionMoveParam* pInstance);
    };

    struct ObjAttractionTestSpawner {
        float weight;
        float size;
        float radius;
        float tolerance;
        float force;
        float maxSpeed;
        float enabledTime;
        float disabledTime;
        AttractionMoveParam move;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAttractionTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAttractionTestSpawner* pInstance);
        static void Clean(ObjAttractionTestSpawner* pInstance);
    };

    struct ObjAuraTrainTestRoot {
        csl::ut::VariableString pathName;
        uint32_t cameraUuid;
        float cameraEaseInTime;
        float cameraEaseOutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAuraTrainTestRoot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAuraTrainTestRoot* pInstance);
        static void Clean(ObjAuraTrainTestRoot* pInstance);
    };

    struct ObjAuraTrainTestSpawner {
        ObjAuraTrainTestRoot roots[3];
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjAuraTrainTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjAuraTrainTestSpawner* pInstance);
        static void Clean(ObjAuraTrainTestSpawner* pInstance);
    };

    struct ObjBossAttackTestSpawner {
        enum class AttackType : int8_t {
            ATTACK_TYPE_MISSILE = 0,
            ATTACK_TYPE_THUNDER = 1,
            ATTACK_TYPE_THORN_BALL = 2,
            ATTACK_TYPE_GROUND_WAVE = 3,
        };

        float activateDistance;
        float diactivateDistance;
        AttackType attackType;
        float cycle;
        float phase;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossAttackTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossAttackTestSpawner* pInstance);
        static void Clean(ObjBossAttackTestSpawner* pInstance);
    };

    struct ObjBossDecoySpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossDecoySpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossDecoySpawner* pInstance);
        static void Clean(ObjBossDecoySpawner* pInstance);
    };

    struct ObjBossShakeCameraTestSpawner {
        enum class ShakeType : int8_t {
            MINI = 0,
            SMALL = 1,
            MIDDLE = 2,
            LARGE = 3,
            EX_LARGE = 4,
        };

        ShakeType type;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossShakeCameraTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossShakeCameraTestSpawner* pInstance);
        static void Clean(ObjBossShakeCameraTestSpawner* pInstance);
    };

    struct ObjBulletHoleTestSpawner {
        float scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBulletHoleTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBulletHoleTestSpawner* pInstance);
        static void Clean(ObjBulletHoleTestSpawner* pInstance);
    };

    struct ObjMultiFocusCameraTestSpawner {
        uint32_t farLookAt;
        uint32_t nearLookAt;
        csl::math::Vector3 farOffset;
        csl::math::Vector3 nearOffset;
        float distance;
        float offsetDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMultiFocusCameraTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMultiFocusCameraTestSpawner* pInstance);
        static void Clean(ObjMultiFocusCameraTestSpawner* pInstance);
    };

    struct ObjCameraBehaviorDemoSpawner {
        enum class CameraType : int8_t {
            CAMERA_NORMAL = 0,
            CAMERA_SIMPLE = 1,
            CAMERA_POINT = 2,
        };

        CameraType cameraType;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraBehaviorDemoSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraBehaviorDemoSpawner* pInstance);
        static void Clean(ObjCameraBehaviorDemoSpawner* pInstance);
    };

    struct ObjCameraResetTestSpawner {
        enum class Type : int8_t {
            Standard = 0,
            LookAt = 1,
            Direction = 2,
        };

        Type type;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraResetTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraResetTestSpawner* pInstance);
        static void Clean(ObjCameraResetTestSpawner* pInstance);
    };

    struct ObjCharacterActionGuideTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCharacterActionGuideTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCharacterActionGuideTestSpawner* pInstance);
        static void Clean(ObjCharacterActionGuideTestSpawner* pInstance);
    };

    struct CharacterRbTestSpawner {
        enum class MoveSystem : int8_t {
            Stairs = 0,
            Slide = 1,
            Linear = 2,
            Simple = 3,
        };

        enum class QueryMode : int8_t {
            Sweep = 0,
            Raycast = 1,
            RaycastDisk = 2,
            None = 3,
        };

        float speed;
        float gravity;
        float supportDistance;
        bool appControl;
        MoveSystem moveSystem;
        QueryMode queryMode;
        bool useCache;
        bool onlyHeightField;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CharacterRbTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CharacterRbTestSpawner* pInstance);
        static void Clean(CharacterRbTestSpawner* pInstance);
    };

    struct ObjColliderQueryTestSpawner {
        enum class ShapeType : int8_t {
            SPHERE = 0,
            MOVE_SPHERE = 1,
            CAPSULE = 2,
        };

        ShapeType shape;
        float width;
        float height;
        bool hitbits[32];
        bool triggers[3];
        bool outputLog;
        bool outputScreen;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjColliderQueryTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjColliderQueryTestSpawner* pInstance);
        static void Clean(ObjColliderQueryTestSpawner* pInstance);
    };

    struct ObjColliderTestSpawner {
        enum class ShapeType : int8_t {
            SPHERE = 0,
            CAPSULE = 1,
            CYLINDER = 2,
            BOX = 3,
        };

        enum class LayerType : int8_t {
            NONE = 0,
            SOLID = 1,
            LIQUID = 2,
            THROUGH = 3,
            CAMERA = 4,
            SOLID_ONEWAY = 5,
            SOLID_THROUGH = 6,
            SOLID_TINY = 7,
            SOLID_DETAIL = 8,
            LEAF = 9,
            LAND = 10,
            RAYBLOCK = 11,
            EVENT = 12,
            RESERVED13 = 13,
            RESERVED14 = 14,
            PLAYER = 15,
            ENEMY = 16,
            ENEMY_BODY = 17,
            GIMMICK = 18,
            DYNAMICS = 19,
            RING = 20,
            CHARACTER_CONTROL = 21,
            PLAYER_ONLY = 22,
            DYNAMICS_THROUGH = 23,
            ENEMY_ONLY = 24,
            SENSOR_PLAYER = 25,
            SENSOR_RING = 26,
            SENSOR_GIMMICK = 27,
            SENSOR_LAND = 28,
            SENSOR_ALL = 29,
            RESERVED30 = 30,
            RESERVED31 = 31,
        };

        ShapeType shape;
        float width;
        float height;
        float depth;
        LayerType layer;
        bool hitbits[32];
        bool triggers[3];
        bool outputLog;
        bool outputScreen;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjColliderTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjColliderTestSpawner* pInstance);
        static void Clean(ObjColliderTestSpawner* pInstance);
    };

    struct ObjCompassTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCompassTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCompassTestSpawner* pInstance);
        static void Clean(ObjCompassTestSpawner* pInstance);
    };

    struct ObjContactTestSpawner {
        csl::math::Vector3 localOffset;
        bool compassEnabled;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjContactTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjContactTestSpawner* pInstance);
        static void Clean(ObjContactTestSpawner* pInstance);
    };

    struct ObjCyBlasterTestSpawner {
        csl::math::Vector3 releaseVel;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCyBlasterTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCyBlasterTestSpawner* pInstance);
        static void Clean(ObjCyBlasterTestSpawner* pInstance);
    };

    struct WhiteFlow {
        float m_circleRadius;
        float m_uvScrollSpeed;
        float m_twistShift;
        float m_flowSpeed;
        float m_rollOffset;
        float m_waveOffset;
        csl::math::Vector2 m_scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WhiteFlow* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WhiteFlow* pInstance);
        static void Clean(WhiteFlow* pInstance);
    };

    struct BlackFlow {
        float m_circleRadius;
        float m_uvScrollSpeed;
        float m_flowSpeed;
        float m_twistShift;
        float m_rollOffset;
        float m_waveOffset;
        float m_alphaThreshold;
        float m_uvCell1Scale;
        csl::math::Vector2 m_uvCell1Speed;
        float m_uvCell2Scale;
        csl::math::Vector2 m_uvCell2Speed;
        csl::math::Vector2 m_uvLineScale;
        csl::math::Vector2 m_scale;
        csl::ut::Color<float> m_color;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BlackFlow* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BlackFlow* pInstance);
        static void Clean(BlackFlow* pInstance);
    };

    struct ObjCyloopSlashTestSpawner {
        float m_circleVertices;
        csl::ut::Color<float> m_colorA;
        csl::ut::Color<float> m_colorB;
        float m_flowLuminance;
        WhiteFlow m_whiteFlow[3];
        BlackFlow m_blackFlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCyloopSlashTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCyloopSlashTestSpawner* pInstance);
        static void Clean(ObjCyloopSlashTestSpawner* pInstance);
    };

    struct ObjCyloopTestSpawner {
        bool collisionEnabled;
        float collisionRadius;
        float collisionHeight;
        float cyloopRadius;
        float targetOffsetUp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCyloopTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCyloopTestSpawner* pInstance);
        static void Clean(ObjCyloopTestSpawner* pInstance);
    };

    struct ObjDamageTestDefence {
        enum class Reaction : int8_t {
            Hit = 0,
            Dead = 1,
            Avoid = 2,
            Guard = 3,
            Guard_Avoid = 4,
            Guard_Flip = 5,
            Parry = 6,
        };

        enum class Status : int8_t {
            Usual = 0,
            Stunned = 1,
            Staggered = 2,
            Change = 3,
        };

        Reaction reaction;
        Status status;
        float maxStunPoint;
        float stunnedTime;
        float maxStaggerPoint;
        float staggeredTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDamageTestDefence* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDamageTestDefence* pInstance);
        static void Clean(ObjDamageTestDefence* pInstance);
    };

    struct ObjDamageTestAttack {
        enum class Attribute : int8_t {
            Normal = 0,
            BlowOff = 1,
            Quake = 2,
            Killing = 3,
            OnlyParry = 4,
        };

        enum class ParryType : int8_t {
            Disabled = 0,
            Enabled = 1,
            Enabled_Slow = 2,
        };

        enum class Kind : int8_t {
            InvalidKind = -1,
            Dead_BattleJellymanLv1 = 0,
            Dead_BattleJellymanLv2 = 1,
            Dead_BattleJellymanLv3 = 2,
            Dead_BattleJellymanLv4 = 3,
            Dead_BattleWolf = 4,
            Dead_BattleBird = 5,
            Dead_BattleSniper = 6,
            Dead_BattleTwister = 7,
            Dead_BattleBommer = 8,
            Dead_BattleBubble = 9,
            Dead_BattleDefender = 10,
            Dead_BattleUmbrella = 11,
            Dead_BattleAquaBall = 12,
            Dead_BattleJumper = 13,
            Dead_BattleBladeLv1 = 14,
            Dead_BattleBladeLv2 = 15,
            Dead_BattleBladeLv3 = 16,
            Dead_BattleBladeLv4 = 17,
            Dead_BattleDarumaLv1 = 18,
            Dead_BattleDarumaLv2 = 19,
            Dead_BattleDarumaLv3 = 20,
            Dead_BattleDarumaLv4 = 21,
            Dead_BattleSpider = 22,
            Dead_BattleCharger = 23,
            Dead_BattleFlyer = 24,
            Dead_BattleTracker = 25,
            Dead_BattleAsura = 26,
            Dead_BattleSkier = 27,
            Dead_BattleTyrant = 28,
            Dead_BattleSumo = 29,
            Dead_BattleStrider = 30,
            Dead_BattleWarship = 31,
            Dead_BattleGiantFC = 32,
            Dead_BattleGiantClimb = 33,
            Dead_BattleGiant = 34,
            Dead_BattleDragonFC = 35,
            Dead_BattleDragonClimb = 36,
            Dead_BattleDragon = 37,
            Dead_BattleKnightFC = 38,
            Dead_BattleKnightClimb = 39,
            Dead_BattleKnight = 40,
            Dead_BattleRifle = 41,
            Dead_BattleTheEnd = 42,
            Dead_Gimmick = 43,
            Dead_Fall = 44,
            Dead_Water = 45,
            Dead_Lava = 46,
            Failed_QuestKodamaCollect1 = 47,
            Failed_QuestMowingGrass = 48,
            Failed_QuestKodamaEscort = 49,
            Failed_QuestKodamaCollect2 = 50,
            Failed_QuestDarumaBattle = 51,
            Failed_QuestCollectItem = 52,
            Failed_QuestDrawBridge = 53,
            Failed_PinBall = 54,
            Failed_Hacking = 55,
            Transit_ToIsland = 56,
            Transit_ToCyber = 57,
            Transit_ToFishing = 58,
            Transit_ToHacking = 59,
            Transit_ToTheEnd = 60,
            Transit_ToSkill1 = 61,
            Transit_ToSkill2 = 62,
            Transit_ToSkill3 = 63,
            Transit_ToSkill4 = 64,
            Transit_ToSkill5 = 65,
            Transit_ToSkill6 = 66,
            Transit_ToSkill7 = 67,
            Transit_ToSkill8 = 68,
            Transit_ToSkill9 = 69,
            Transit_ToSkill10 = 70,
            Transit_ToSkill11 = 71,
            Transit_ToSkill12 = 72,
            Transit_ToSkill13 = 73,
            Transit_ToSkill14 = 74,
            Transit_ToSkill15 = 75,
            Transit_ToSkill16 = 76,
            Transit_ToSkill17 = 77,
            Transit_ToSkill18 = 78,
            Transit_ToSkill19 = 79,
            Transit_ToSkill20 = 80,
            NumKinds = 81,
        };

        bool enabled;
        float waitTime;
        int32_t damagePoint;
        Attribute attribute;
        bool counterSmash;
        csl::math::Vector3 velocity;
        ParryType parryType;
        Kind practice;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDamageTestAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDamageTestAttack* pInstance);
        static void Clean(ObjDamageTestAttack* pInstance);
    };

    struct ObjDamageTestSpawner {
        ObjDamageTestDefence defence;
        ObjDamageTestAttack attack;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDamageTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDamageTestSpawner* pInstance);
        static void Clean(ObjDamageTestSpawner* pInstance);
    };

    struct DebrisTestCommonParam {
        float gravityPow;
        float lifeTime;
        float weight;
        float friction;
        float restitution;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisTestCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisTestCommonParam* pInstance);
        static void Clean(DebrisTestCommonParam* pInstance);
    };

    struct DebrisTestImpulseVelInfo {
        csl::math::Vector3 contactPoint;
        csl::math::Vector3 direction;
        float force;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisTestImpulseVelInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisTestImpulseVelInfo* pInstance);
        static void Clean(DebrisTestImpulseVelInfo* pInstance);
    };

    struct DebrisTestExplosionVelInfo {
        csl::math::Vector3 explosionPoint;
        float explosionForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisTestExplosionVelInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisTestExplosionVelInfo* pInstance);
        static void Clean(DebrisTestExplosionVelInfo* pInstance);
    };

    struct DebrisTestRotationInfo {
        float defaultMaxAngle;
        float maxAngularVelocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisTestRotationInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisTestRotationInfo* pInstance);
        static void Clean(DebrisTestRotationInfo* pInstance);
    };

    struct ObjDebrisTestSpawner {
        DebrisTestCommonParam commonParam;
        DebrisTestImpulseVelInfo impulseVelInfo;
        DebrisTestExplosionVelInfo expolsionVelInfo;
        DebrisTestRotationInfo rotationInfo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDebrisTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDebrisTestSpawner* pInstance);
        static void Clean(ObjDebrisTestSpawner* pInstance);
    };

    struct ObjDeformableFieldSpawner {
        float width;
        uint32_t numV;
        uint32_t numH;
        float spreadSpeed;
        float damper;
        float hitReactionDistance;
        float hitAffectDistance;
        bool moveVertex;
        bool moveTransform;
        bool attrMovable;
        bool attrParkour;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDeformableFieldSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDeformableFieldSpawner* pInstance);
        static void Clean(ObjDeformableFieldSpawner* pInstance);
    };

    struct ObjDependChildTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDependChildTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDependChildTestSpawner* pInstance);
        static void Clean(ObjDependChildTestSpawner* pInstance);
    };

    struct ObjDependParentTestSpawner {
        csl::ut::Array<uint32_t> childs;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDependParentTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDependParentTestSpawner* pInstance);
        static void Clean(ObjDependParentTestSpawner* pInstance);
    };

    struct ObjDestinationTestSpawner {
        csl::math::Vector3 localOffset;
        float tolerance;
        bool useObjectID;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjDestinationTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjDestinationTestSpawner* pInstance);
        static void Clean(ObjDestinationTestSpawner* pInstance);
    };

    struct ObjEasingTestSpawner {
        enum class EasingType : int8_t {
            EASE_IN = 0,
            EASE_OUT = 1,
            EASE_INOUT = 2,
        };

        enum class CalculateType : int8_t {
            LINEAR = 0,
            QUADRATIC = 1,
            CUBIC = 2,
            QUARTIC = 3,
            QUINTIC = 4,
            SIN = 5,
            EXPONENTIAL = 6,
            CIRCULAR = 7,
            BACK = 8,
            BOUNCE = 9,
            ELASTIC = 10,
        };

        enum class ParamType : int8_t {
            PARAM_ONE = 0,
            PARAM_INV_ONE = 1,
            PARAM_HALF = 2,
            PARAM_INV_HALF = 3,
            PARAM_DOUBLE = 4,
            PARAM_INV_DOUBLE = 5,
        };

        enum class OperationType : int8_t {
            OP_NONE = 0,
            OP_ADD = 1,
            OP_SUB = 2,
            OP_MULTI = 3,
            OP_NEST = 4,
        };

        EasingType m_ease1;
        CalculateType m_calc1;
        ParamType m_param1;
        EasingType m_ease2;
        CalculateType m_calc2;
        ParamType m_param2;
        OperationType m_op;
        float m_previewTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEasingTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEasingTestSpawner* pInstance);
        static void Clean(ObjEasingTestSpawner* pInstance);
    };

    struct MoveParam {
        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_CONSTANT = 1,
            MOVE_ROTATE = 2,
        };

        MoveType type;
        float distance;
        float cycle;
        csl::math::Vector3 axis;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MoveParam* pInstance);
        static void Clean(MoveParam* pInstance);
    };

    struct ObjEffectTestSpawner {
        csl::ut::VariableString name;
        float cycle;
        csl::math::Vector3 offset;
        MoveParam move;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEffectTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEffectTestSpawner* pInstance);
        static void Clean(ObjEffectTestSpawner* pInstance);
    };

    struct EventPlayTestParam {
        enum class StartType : uint8_t {
            Stand = 0,
            Fixed = 1,
            Frozen = 2,
        };

        csl::ut::VariableString eventName;
        bool setRootMatrix;
        bool noUnload;
        StartType playerStartType;
        float cameraInterpolateTime;
        bool setCameraLookAt;
        csl::math::Vector3 cameraLookAt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EventPlayTestParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EventPlayTestParam* pInstance);
        static void Clean(EventPlayTestParam* pInstance);
    };

    struct ObjEventPlayTestSpawner {
        bool eventDriven;
        bool preload;
        EventPlayTestParam param;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEventPlayTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEventPlayTestSpawner* pInstance);
        static void Clean(ObjEventPlayTestSpawner* pInstance);
    };

    struct ObjExternalControlTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjExternalControlTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjExternalControlTestSpawner* pInstance);
        static void Clean(ObjExternalControlTestSpawner* pInstance);
    };

    struct ObjFlipMouthTestSpawner {
        bool autoFlip;
        bool forceFlip;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFlipMouthTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFlipMouthTestSpawner* pInstance);
        static void Clean(ObjFlipMouthTestSpawner* pInstance);
    };

    struct ObjFlowDustTestSpawner {
        bool wind;
        float emitInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFlowDustTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFlowDustTestSpawner* pInstance);
        static void Clean(ObjFlowDustTestSpawner* pInstance);
    };

    struct ObjFxParamChangerSpawner {
        enum class InterpolateType : int8_t {
            LINEAR = 0,
            SIN_CURVE = 1,
        };

        uint32_t sourceParamNo;
        uint32_t targetParamNo;
        float time;
        InterpolateType interpolateType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFxParamChangerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFxParamChangerSpawner* pInstance);
        static void Clean(ObjFxParamChangerSpawner* pInstance);
    };

    struct ObjGeometrizeBillboardTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGeometrizeBillboardTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGeometrizeBillboardTestSpawner* pInstance);
        static void Clean(ObjGeometrizeBillboardTestSpawner* pInstance);
    };

    struct ObjGeometrizeTestSpawner {
        enum class Shape : int32_t {
            Polyline = 0,
            Tube = 1,
        };

        enum class RenderPreset : int32_t {
            Opaque = 0,
            Transparent = 1,
            Add = 2,
        };

        enum class Coord : int8_t {
            World = 0,
            Local = 1,
        };

        enum class NodeCoord : int8_t {
            NodeWorldAuto = 0,
            NodeLocal = 1,
        };

        Shape m_shape;
        RenderPreset m_preset;
        Coord m_coord;
        NodeCoord m_nodeCoord;
        int32_t m_numSegments;
        float m_segmentDistance;
        float m_maxDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGeometrizeTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGeometrizeTestSpawner* pInstance);
        static void Clean(ObjGeometrizeTestSpawner* pInstance);
    };

    struct ObjGeometryInstanceTestSpawner {
        uint32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGeometryInstanceTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGeometryInstanceTestSpawner* pInstance);
        static void Clean(ObjGeometryInstanceTestSpawner* pInstance);
    };

    struct ObjGiantGTestSpawner {
        float scale;
        float moveSpeed;
        float moveDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGiantGTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGiantGTestSpawner* pInstance);
        static void Clean(ObjGiantGTestSpawner* pInstance);
    };

    struct ObjGimmickScriptTestSpawner {
        int32_t no;
        csl::ut::VariableString luaName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGimmickScriptTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGimmickScriptTestSpawner* pInstance);
        static void Clean(ObjGimmickScriptTestSpawner* pInstance);
    };

    struct ObjGrindTestSpawner {
        float length;
        float cycle;
        bool closed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGrindTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGrindTestSpawner* pInstance);
        static void Clean(ObjGrindTestSpawner* pInstance);
    };

    struct ObjHeightCheckerSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHeightCheckerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHeightCheckerSpawner* pInstance);
        static void Clean(ObjHeightCheckerSpawner* pInstance);
    };

    struct ObjHeightFieldTestSpawner {
        csl::ut::VariableString resFile;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHeightFieldTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHeightFieldTestSpawner* pInstance);
        static void Clean(ObjHeightFieldTestSpawner* pInstance);
    };

    struct ObjHomingTargetTestSpawner {
        float phantomSize;
        bool hasPhantom;
        float rigidbodySize;
        bool hasRigidbody;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHomingTargetTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHomingTargetTestSpawner* pInstance);
        static void Clean(ObjHomingTargetTestSpawner* pInstance);
    };

    struct HsmTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HsmTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HsmTestSpawner* pInstance);
        static void Clean(HsmTestSpawner* pInstance);
    };

    struct ObjFootIKTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjFootIKTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjFootIKTestSpawner* pInstance);
        static void Clean(ObjFootIKTestSpawner* pInstance);
    };

    struct ObjLevitateTestSpawner {
        enum class Shape : int8_t {
            Sphere = 0,
            Box = 1,
        };

        float height;
        Shape shape;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLevitateTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLevitateTestSpawner* pInstance);
        static void Clean(ObjLevitateTestSpawner* pInstance);
    };

    struct ObjLookAtTargetTestSpawner {
        csl::ut::VariableString objectName;
        float runningTime;
        float idleTime;
        float easeInTime;
        float easeOutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLookAtTargetTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLookAtTargetTestSpawner* pInstance);
        static void Clean(ObjLookAtTargetTestSpawner* pInstance);
    };

    struct ObjLuaTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLuaTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLuaTestSpawner* pInstance);
        static void Clean(ObjLuaTestSpawner* pInstance);
    };

    struct ObjMaterialTestSpawner {
        float radius;
        float intervalDist;
        float intervalAngle;
        float rayLength;
        bool tracePlayer;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMaterialTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMaterialTestSpawner* pInstance);
        static void Clean(ObjMaterialTestSpawner* pInstance);
    };

    struct ObjMessageTestSpawner {
        uint32_t receiver;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMessageTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMessageTestSpawner* pInstance);
        static void Clean(ObjMessageTestSpawner* pInstance);
    };

    struct ObjMissileLauncherSpawner {
        enum class MissileMoveType : int8_t {
            Straight = 0,
            Homing = 1,
        };

        MissileMoveType moveType;
        uint8_t maxShotCount;
        float shotInterval;
        float waitTime;
        float storeDist;
        float maxMoveSpeed;
        float minMoveSpeed;
        float explosionRadius;
        float explosionDuration;
        float rotateSpeedMax;
        float rotateSpeedMin;
        float eyesightAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMissileLauncherSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMissileLauncherSpawner* pInstance);
        static void Clean(ObjMissileLauncherSpawner* pInstance);
    };

    struct ObjMockSpawner {
        enum class Kind : int8_t {
            PuzzleSmall = 0,
            PuzzleMiddle = 1,
            PuzzleLarge = 2,
            EnemyCrowd = 3,
            BossSmall = 4,
            Boss = 5,
            Portal = 6,
            Num = 7,
        };

        Kind m_kind;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMockSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMockSpawner* pInstance);
        static void Clean(ObjMockSpawner* pInstance);
    };

    struct ObjMotionBlendCameraTestSpawner {
        csl::ut::VariableString resource0;
        csl::ut::VariableString resource1;
        csl::ut::VariableString resource2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMotionBlendCameraTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMotionBlendCameraTestSpawner* pInstance);
        static void Clean(ObjMotionBlendCameraTestSpawner* pInstance);
    };

    struct ObjMotionCameraTestSpawner {
        csl::ut::VariableString resource;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMotionCameraTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMotionCameraTestSpawner* pInstance);
        static void Clean(ObjMotionCameraTestSpawner* pInstance);
    };

    struct ObjMovieTestSpawner {
        csl::ut::VariableString name;
        int8_t audioTrackNo;
        int8_t subAudioTrackNo;
        int8_t extraAudioTrackNo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMovieTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMovieTestSpawner* pInstance);
        static void Clean(ObjMovieTestSpawner* pInstance);
    };

    struct ObjNarrationTestSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNarrationTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNarrationTestSpawner* pInstance);
        static void Clean(ObjNarrationTestSpawner* pInstance);
    };

    struct NaviPathData {
        csl::ut::VariableString pathName;
        float pathRangeMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(NaviPathData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(NaviPathData* pInstance);
        static void Clean(NaviPathData* pInstance);
    };

    struct ObjNavigationPathTestSpawner {
        enum class PointType : int8_t {
            POINT_TYPE_NONE = 0,
            POINT_TYPE_START_PLAYER_POS = 1,
            POINT_TYPE_END_PLAYER_POS = 2,
        };

        NaviPathData naviPathDatas[16];
        uint32_t startPointObj;
        uint32_t endPointObj;
        PointType pointType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNavigationPathTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNavigationPathTestSpawner* pInstance);
        static void Clean(ObjNavigationPathTestSpawner* pInstance);
    };

    struct ObjNavMeshFindPathTestSpawner {
        csl::math::Vector3 destination;
        csl::math::Vector3 searchPosition;
        bool immediate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNavMeshFindPathTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNavMeshFindPathTestSpawner* pInstance);
        static void Clean(ObjNavMeshFindPathTestSpawner* pInstance);
    };

    struct ObjNpcTestSpawner {
        int32_t no;
        bool eventDriven;
        csl::ut::VariableString luaName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNpcTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNpcTestSpawner* pInstance);
        static void Clean(ObjNpcTestSpawner* pInstance);
    };

    struct ObjOnewayFloorTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOnewayFloorTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOnewayFloorTestSpawner* pInstance);
        static void Clean(ObjOnewayFloorTestSpawner* pInstance);
    };

    struct OverlapTestSpawner {
        enum class LayerType : int8_t {
            NONE_GROUP = 0,
            LAND = 1,
            RAYBLOCK = 2,
            THROUGH = 3,
            OBJECT = 4,
        };

        LayerType layer;
        bool childLoopLeft;
        bool childLoopRight;
        bool childSolid;
        bool childLiquid;
        bool childThrough;
        float searchSize;
        bool cache;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OverlapTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OverlapTestSpawner* pInstance);
        static void Clean(OverlapTestSpawner* pInstance);
    };

    struct ObjOverlayTestSpawner {
        enum class Kind : int8_t {
            Toast = 0,
            ToastOrder = 1,
            ToastOrderPositive = 2,
            ToastOrderNegative = 3,
            ToastOrderFeed = 4,
            ToastOrderPositiveFeed = 5,
            ToastOrderNegativeFeed = 6,
            Window = 7,
            HeaderWindow = 8,
            TutorialWindow = 9,
            DialogWindow = 10,
            Caption = 11,
            CaptionByManual = 12,
            CaptionByExternal = 13,
            CaptionSelectBox = 14,
            Objective = 15,
            ObjectiveClear = 16,
            ObjectiveByExternal = 17,
            ObjectiveQuest = 18,
            OperationGuide = 19,
        };

        Kind kind;
        csl::ut::VariableString label;
        csl::ut::VariableString cue;
        csl::ut::VariableString tag;
        csl::ut::VariableString replaceLabel;
        csl::ut::VariableString replaceTexture;
        float time;
        bool block;
        bool unselected;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjOverlayTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjOverlayTestSpawner* pInstance);
        static void Clean(ObjOverlayTestSpawner* pInstance);
    };

    struct ObjPassPlaneTestSpawner {
        PassPlaneTriggerSpawner passPlane;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPassPlaneTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPassPlaneTestSpawner* pInstance);
        static void Clean(ObjPassPlaneTestSpawner* pInstance);
    };

    struct ObjPathBuildTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPathBuildTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPathBuildTestSpawner* pInstance);
        static void Clean(ObjPathBuildTestSpawner* pInstance);
    };

    struct ObjPbaTestSpawner {
        csl::ut::VariableString modelName;
        csl::ut::VariableString skeletonName;
        csl::ut::VariableString animatorName;
        csl::ut::VariableString animStateName;
        csl::ut::VariableString pathName;
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjPbaTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjPbaTestSpawner* pInstance);
        static void Clean(ObjPbaTestSpawner* pInstance);
    };

    struct ObjRaycastTestSpawner {
        enum class RaycastType : int8_t {
            World = 0,
            Cache = 1,
            HeightField = 2,
        };

        bool hitbits[32];
        bool preSimulate;
        RaycastType type;
        float searchSize;
        uint8_t divideNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRaycastTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRaycastTestSpawner* pInstance);
        static void Clean(ObjRaycastTestSpawner* pInstance);
    };

    struct ObjReactiveTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjReactiveTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjReactiveTestSpawner* pInstance);
        static void Clean(ObjReactiveTestSpawner* pInstance);
    };

    struct ObjBlockObjectTestSpawner {
        enum class ShapeType : int8_t {
            SPHERE = 0,
            CAPSULE = 1,
            CYLINDER = 2,
            BOX = 3,
            MESH = 4,
        };

        enum class LayerType : int8_t {
            NONE = 0,
            SOLID = 1,
            LIQUID = 2,
            THROUGH = 3,
            CAMERA = 4,
            SOLID_ONEWAY = 5,
            SOLID_THROUGH = 6,
            SOLID_TINY = 7,
            SOLID_DETAIL = 8,
            LEAF = 9,
            LAND = 10,
            RAYBLOCK = 11,
            EVENT = 12,
            RESERVED13 = 13,
            RESERVED14 = 14,
            PLAYER = 15,
            ENEMY = 16,
            ENEMY_BODY = 17,
            GIMMICK = 18,
            DYNAMICS = 19,
            RING = 20,
            CHARACTER_CONTROL = 21,
            PLAYER_ONLY = 22,
            DYNAMICS_THROUGH = 23,
            ENEMY_ONLY = 24,
            SENSOR_PLAYER = 25,
            SENSOR_RING = 26,
            SENSOR_GIMMICK = 27,
            SENSOR_LAND = 28,
            SENSOR_ALL = 29,
            RESERVED30 = 30,
            RESERVED31 = 31,
        };

        enum class MaterialType : int8_t {
            MAT_NONE = 0,
            MAT_STONE = 1,
            MAT_EARTH = 2,
            MAT_WOOD = 3,
            MAT_GRASS = 4,
            MAT_IRON = 5,
            MAT_SAND = 6,
            MAT_LAVA = 7,
            MAT_GLASS = 8,
            MAT_SNOW = 9,
            MAT_NO_ENTRY = 10,
            MAT_ICE = 11,
            MAT_WATER = 12,
            MAT_SEA = 13,
            MAT_DAMAGE = 14,
            MAT_DEAD = 15,
            MAT_FLOWER0 = 16,
            MAT_FLOWER1 = 17,
            MAT_FLOWER2 = 18,
            MAT_AIR = 19,
            MAT_DEADLEAVES = 20,
            MAT_WIREMESH = 21,
            MAT_DEAD_ANYDIR = 22,
            MAT_DAMAGE_THROUGH = 23,
            MAT_DRY_GRASS = 24,
            MAT_RELIC = 25,
            MAT_GIANT = 26,
            MAT_GRAVEL = 27,
            MAT_MUD_WATER = 28,
            MAT_SAND2 = 29,
            MAT_SAND3 = 30,
        };

        ShapeType shape;
        csl::ut::VariableString meshResourceName;
        float width;
        float height;
        float depth;
        csl::math::Vector3 localTranslation;
        csl::math::Quaternion localRotation;
        csl::math::Vector3 localScale;
        LayerType layer;
        MaterialType material;
        bool attributes[24];
        bool movable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBlockObjectTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBlockObjectTestSpawner* pInstance);
        static void Clean(ObjBlockObjectTestSpawner* pInstance);
    };

    struct ObjRigidBodyTestSpawner {
        enum class ShapeType : int8_t {
            SPHERE = 0,
            CAPSULE = 1,
            CYLINDER = 2,
            BOX = 3,
            MESH = 4,
        };

        enum class LayerType : int8_t {
            NONE = 0,
            SOLID = 1,
            LIQUID = 2,
            THROUGH = 3,
            CAMERA = 4,
            SOLID_ONEWAY = 5,
            SOLID_THROUGH = 6,
            SOLID_TINY = 7,
            SOLID_DETAIL = 8,
            LEAF = 9,
            LAND = 10,
            RAYBLOCK = 11,
            EVENT = 12,
            RESERVED13 = 13,
            RESERVED14 = 14,
            PLAYER = 15,
            ENEMY = 16,
            ENEMY_BODY = 17,
            GIMMICK = 18,
            DYNAMICS = 19,
            RING = 20,
            CHARACTER_CONTROL = 21,
            PLAYER_ONLY = 22,
            DYNAMICS_THROUGH = 23,
            ENEMY_ONLY = 24,
            SENSOR_PLAYER = 25,
            SENSOR_RING = 26,
            SENSOR_GIMMICK = 27,
            SENSOR_LAND = 28,
            SENSOR_ALL = 29,
            RESERVED30 = 30,
            RESERVED31 = 31,
        };

        enum class MaterialType : int8_t {
            MAT_NONE = 0,
            MAT_STONE = 1,
            MAT_EARTH = 2,
            MAT_WOOD = 3,
            MAT_GRASS = 4,
            MAT_IRON = 5,
            MAT_SAND = 6,
            MAT_LAVA = 7,
            MAT_GLASS = 8,
            MAT_SNOW = 9,
            MAT_NO_ENTRY = 10,
            MAT_ICE = 11,
            MAT_WATER = 12,
            MAT_SEA = 13,
            MAT_DAMAGE = 14,
            MAT_DEAD = 15,
            MAT_FLOWER0 = 16,
            MAT_FLOWER1 = 17,
            MAT_FLOWER2 = 18,
            MAT_AIR = 19,
            MAT_DEADLEAVES = 20,
            MAT_WIREMESH = 21,
            MAT_DEAD_ANYDIR = 22,
            MAT_DAMAGE_THROUGH = 23,
            MAT_DRY_GRASS = 24,
            MAT_RELIC = 25,
            MAT_GIANT = 26,
            MAT_GRAVEL = 27,
            MAT_MUD_WATER = 28,
            MAT_SAND2 = 29,
            MAT_SAND3 = 30,
        };

        ShapeType shape;
        csl::ut::VariableString meshResourceName;
        float width;
        float height;
        float depth;
        LayerType layer;
        bool hitbits[32];
        MaterialType material;
        bool attributes[24];
        float mass;
        float friction;
        float gravityFactor;
        float restitution;
        float allowedPenetrationDepth;
        float linearDamping;
        float angularDamping;
        float maxLinearVelocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRigidBodyTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRigidBodyTestSpawner* pInstance);
        static void Clean(ObjRigidBodyTestSpawner* pInstance);
    };

    struct ObjSampleShapeSpawner {
        enum class Shape : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_CYLINDER_MIDAIR = 3,
        };

        enum class LayerType : int8_t {
            NONE = 0,
            SOLID = 1,
            LIQUID = 2,
            THROUGH = 3,
            CAMERA = 4,
            SOLID_ONEWAY = 5,
            SOLID_THROUGH = 6,
            SOLID_TINY = 7,
            SOLID_DETAIL = 8,
            LEAF = 9,
            LAND = 10,
            RAYBLOCK = 11,
            EVENT = 12,
            RESERVED13 = 13,
            RESERVED14 = 14,
            PLAYER = 15,
            ENEMY = 16,
            ENEMY_BODY = 17,
            GIMMICK = 18,
            DYNAMICS = 19,
            RING = 20,
            CHARACTER_CONTROL = 21,
            PLAYER_ONLY = 22,
            DYNAMICS_THROUGH = 23,
            ENEMY_ONLY = 24,
            SENSOR_PLAYER = 25,
            SENSOR_RING = 26,
            SENSOR_GIMMICK = 27,
            SENSOR_LAND = 28,
            SENSOR_ALL = 29,
            RESERVED30 = 30,
            RESERVED31 = 31,
        };

        enum class MaterialType : int8_t {
            MAT_NONE = 0,
            MAT_STONE = 1,
            MAT_EARTH = 2,
            MAT_WOOD = 3,
            MAT_GRASS = 4,
            MAT_IRON = 5,
            MAT_SAND = 6,
            MAT_LAVA = 7,
            MAT_GLASS = 8,
            MAT_SNOW = 9,
            MAT_NO_ENTRY = 10,
            MAT_ICE = 11,
            MAT_WATER = 12,
            MAT_SEA = 13,
            MAT_DAMAGE = 14,
            MAT_DEAD = 15,
            MAT_FLOWER0 = 16,
            MAT_FLOWER1 = 17,
            MAT_FLOWER2 = 18,
            MAT_AIR = 19,
            MAT_DEADLEAVES = 20,
            MAT_WIREMESH = 21,
            MAT_DEAD_ANYDIR = 22,
            MAT_DAMAGE_THROUGH = 23,
            MAT_DRY_GRASS = 24,
            MAT_RELIC = 25,
            MAT_GIANT = 26,
            MAT_GRAVEL = 27,
            MAT_MUD_WATER = 28,
            MAT_SAND2 = 29,
            MAT_SAND3 = 30,
        };

        Shape ShapeType;
        float Width;
        float Height;
        float Depth;
        uint8_t Red;
        uint8_t Green;
        uint8_t Blue;
        uint8_t Alpha;
        bool IsEnableModel;
        bool IsEnableRigidbody;
        LayerType layer;
        MaterialType material;
        bool attributes[24];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSampleShapeSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSampleShapeSpawner* pInstance);
        static void Clean(ObjSampleShapeSpawner* pInstance);
    };

    struct ObjSavePermissionTestSpawner {
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSavePermissionTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSavePermissionTestSpawner* pInstance);
        static void Clean(ObjSavePermissionTestSpawner* pInstance);
    };

    struct ObjSearchPathSpawner {
        enum class Shape : int8_t {
            Sphere = 0,
            Aabb = 1,
            Raycast = 2,
            Plane = 3,
        };

        bool pathFilters[5];
        Shape shape;
        float size;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSearchPathSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSearchPathSpawner* pInstance);
        static void Clean(ObjSearchPathSpawner* pInstance);
    };

    struct ObjShadowCameraTestSpawner {
        float nearPlane;
        float farPlane;
        float lookAtDepth;
        float sceneRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShadowCameraTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShadowCameraTestSpawner* pInstance);
        static void Clean(ObjShadowCameraTestSpawner* pInstance);
    };

    struct ObjSlingshotTestSpawner {
        csl::ut::Array<uint32_t> routePoints;
        float speed;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSlingshotTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSlingshotTestSpawner* pInstance);
        static void Clean(ObjSlingshotTestSpawner* pInstance);
    };

    struct ObjSplineTestSpawner {
        csl::math::Vector3 target;
        float beginAngle;
        float beginForce;
        float endAngle;
        float endForce;
        bool autoForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSplineTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSplineTestSpawner* pInstance);
        static void Clean(ObjSplineTestSpawner* pInstance);
    };

    struct ObjSwayTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSwayTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSwayTestSpawner* pInstance);
        static void Clean(ObjSwayTestSpawner* pInstance);
    };

    struct ObjSweepTest2Spawner {
        enum class SweepType : int8_t {
            World = 0,
            Cache = 1,
            HeightField = 2,
        };

        float distance;
        float radius;
        float height;
        bool hitbits[32];
        bool fixedUp;
        SweepType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSweepTest2Spawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSweepTest2Spawner* pInstance);
        static void Clean(ObjSweepTest2Spawner* pInstance);
    };

    struct SweepTestSpawner {
        enum class ShapeType : int8_t {
            SPHERE = 0,
            CAPSULE = 1,
        };

        float distance;
        float radius;
        float height;
        ShapeType shape;
        bool hitbits[32];
        bool direct;
        csl::math::Vector3 shapePos;
        csl::math::Vector3 topPos;
        csl::math::Vector3 displacement;
        int32_t recursion;
        bool cache;
        int32_t count;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SweepTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SweepTestSpawner* pInstance);
        static void Clean(SweepTestSpawner* pInstance);
    };

    struct ObjTalkModeTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTalkModeTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTalkModeTestSpawner* pInstance);
        static void Clean(ObjTalkModeTestSpawner* pInstance);
    };

    struct ObjTargetSearchTestSpawner {
        enum class ViewShapeType : int8_t {
            Sphere = 0,
            Frustum = 1,
            Cone = 2,
        };

        ViewShapeType shape;
        float angle;
        float aspect;
        float nearClip;
        float farClip;
        bool maskEnabled;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTargetSearchTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTargetSearchTestSpawner* pInstance);
        static void Clean(ObjTargetSearchTestSpawner* pInstance);
    };

    struct ObjTargetTestSpawner {
        enum class ShapeType : int8_t {
            SPHERE = 0,
            BOX = 1,
        };

        enum class MoveType : int8_t {
            NONE = 0,
            SWING = 1,
            VSWING = 2,
        };

        ShapeType shape;
        float width;
        float height;
        float depth;
        csl::ut::Color<uint8_t> color;
        bool visible;
        bool enemy;
        bool focusable;
        bool damageByKIll;
        MoveType move;
        float cycle;
        float distance;
        float idlingTime;
        float pausedTime;
        float disabledTime;
        float noReplyTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTargetTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTargetTestSpawner* pInstance);
        static void Clean(ObjTargetTestSpawner* pInstance);
    };

    struct ObjCreditBoxSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCreditBoxSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCreditBoxSpawner* pInstance);
        static void Clean(ObjCreditBoxSpawner* pInstance);
    };

    struct ObjTestHangerSpawner {
        float radius;
        bool move;
        float cycle;
        float distance;
        float moveTime;
        float stopTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTestHangerSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTestHangerSpawner* pInstance);
        static void Clean(ObjTestHangerSpawner* pInstance);
    };

    struct ObjTextTestSpawner {
        csl::ut::VariableString label;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTextTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTextTestSpawner* pInstance);
        static void Clean(ObjTextTestSpawner* pInstance);
    };

    struct TinyFsmTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TinyFsmTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TinyFsmTestSpawner* pInstance);
        static void Clean(TinyFsmTestSpawner* pInstance);
    };

    struct ObjTreadmillTestSpawner {
        float minSpeed;
        float maxSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTreadmillTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTreadmillTestSpawner* pInstance);
        static void Clean(ObjTreadmillTestSpawner* pInstance);
    };

    struct ObjLifeGaugeTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLifeGaugeTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLifeGaugeTestSpawner* pInstance);
        static void Clean(ObjLifeGaugeTestSpawner* pInstance);
    };

    struct ObjUserModelMaterialTestSpawner {
        csl::math::Vector3 albedo;
        float reflectance;
        float smoothness;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUserModelMaterialTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUserModelMaterialTestSpawner* pInstance);
        static void Clean(ObjUserModelMaterialTestSpawner* pInstance);
    };

    struct ObjUserModelShaderTestSpawner {
        csl::ut::VariableString texture;
        csl::ut::VariableString vertexShaderName;
        csl::ut::VariableString pixelShaderName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUserModelShaderTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUserModelShaderTestSpawner* pInstance);
        static void Clean(ObjUserModelShaderTestSpawner* pInstance);
    };

    struct ObjUserModelTestSpawner {
        enum class RenderPresetType : int8_t {
            RENDER_PRESET_OPAQUE = 0,
            RENDER_PRESET_PUNCHTHROUGH = 1,
            RENDER_PRESET_TRANSPARENT = 2,
            RENDER_PRESET_ADD = 3,
        };

        enum class MoveType : int8_t {
            MOVE_NONE = 0,
            MOVE_SWING = 1,
            MOVE_ROTATE = 2,
        };

        RenderPresetType preset;
        csl::ut::VariableString texture;
        uint8_t red;
        uint8_t green;
        uint8_t blue;
        uint8_t alpha;
        float scale;
        csl::ut::VariableString vertexShaderName;
        csl::ut::VariableString pixelShaderName;
        bool shadowCaster;
        bool shadowReceiver;
        bool dynamic;
        MoveType move;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjUserModelTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjUserModelTestSpawner* pInstance);
        static void Clean(ObjUserModelTestSpawner* pInstance);
    };

    struct ObjVerificationTestSpawner {
        float lengthV;
        float lengthH;
        uint32_t gridV;
        uint32_t gridH;
        uint32_t splitV;
        uint32_t splitH;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjVerificationTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjVerificationTestSpawner* pInstance);
        static void Clean(ObjVerificationTestSpawner* pInstance);
    };

    struct ObjVibrationTestSpawner {
        enum class RumbleType : int8_t {
            RUMBLE_AUTO = 0,
            RUMBLE_ONESHOT = 1,
            RUMBLE_LOOP = 2,
        };

        csl::ut::VariableString name;
        RumbleType type;
        float time;
        bool enabledTimeAttn;
        bool enabledDistAttn;
        float distance;
        float easeoutTime;
        VolumeTriggerSpawner volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjVibrationTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjVibrationTestSpawner* pInstance);
        static void Clean(ObjVibrationTestSpawner* pInstance);
    };

    struct ObjVisualModelCacheTestSpawner {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjVisualModelCacheTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjVisualModelCacheTestSpawner* pInstance);
        static void Clean(ObjVisualModelCacheTestSpawner* pInstance);
    };

    struct ObjVisualModelTestSpawner {
        csl::ut::VariableString name;
        bool clipping;
        float clippingHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjVisualModelTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjVisualModelTestSpawner* pInstance);
        static void Clean(ObjVisualModelTestSpawner* pInstance);
    };

    struct ObjWarpMonitorTestSpawner {
        int32_t no;
        bool eventDriven;
        uint32_t warpObject;
        csl::math::Vector3 warpOffset;
        csl::math::Vector3 lockonOffset;
        csl::math::Vector3 reboundDir;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarpMonitorTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarpMonitorTestSpawner* pInstance);
        static void Clean(ObjWarpMonitorTestSpawner* pInstance);
    };

    struct ObjWindTestSpawner {
        enum class WindFlowType : uint8_t {
            FlowNone = 0,
            FlowDirectional = 1,
            FlowOmni = 2,
            FlowVortex = 3,
            FlowFan = 4,
        };

        enum class WindVolumnCenter : uint8_t {
            LookAt = 0,
            Object = 1,
        };

        float power;
        float radius;
        float moveComp;
        WindFlowType type;
        csl::math::Vector3 dir;
        float fanAngle;
        PathMovement pathParam;
        float easingTime;
        WindVolumnCenter volumnCenter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWindTestSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWindTestSpawner* pInstance);
        static void Clean(ObjWindTestSpawner* pInstance);
    };

    struct StandardCameraBattleParameter {
        float distance;
        float distanceSuspensionK;
        float elevationOffset;
        float azimuthMinOffset;
        float azimuthMaxOffset;
        float azimuthMinOffsetDistance;
        float azimuthMaxOffsetDistance;
        float azimuthSensitivity;
        float targetOffsetSuspensionK;
        float targetMinUpOffset;
        float targetMaxUpOffset;
        float targetFrontOffset;
        float delayAllowDistance;
        float delayLimitDistance;
        float delaySuspensionK;
        float manualControlTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraBattleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraBattleParameter* pInstance);
        static void Clean(StandardCameraBattleParameter* pInstance);
    };

    struct StandardCameraCommonParameter {
        float distance;
        float distanceSuspensionK;
        float minElevation;
        float maxElevation;
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float elevationOffset;
        float targetUpOffset;
        float targetMinUpOffsetLimit;
        float targetMaxUpOffsetLimit;
        float targetMinUpOffsetLimitDistance;
        float targetMaxUpOffsetLimitDistance;
        float targetOffsetSuspensionK;
        float delayAllowDistance;
        float delayLimitDistance;
        float delaySuspensionK;
        float autocontrolDisabledTime;
        float chaseSegmentSuspensionK;
        float chaseSegmentShortenSpeed;
        int32_t chaseSegmentMaxCount;
        float inertiaMinDecel;
        float inertiaOvershootAngle;
        float resetSuspensionK;
        float downDirectionDotThreshold;
        float baseUpLeanRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraCommonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraCommonParameter* pInstance);
        static void Clean(StandardCameraCommonParameter* pInstance);
    };

    struct StandardCameraDashParameter {
        float minDistance;
        float maxDistance;
        float minDistanceAccel;
        float maxDistanceAccel;
        float distanceSuspensionK;
        float elevationOffset;
        float azimuthSensitivity;
        float targetOffsetSuspensionK;
        float targetUpOffset;
        float delayAllowDistance;
        float delayLimitDistance;
        float delaySuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraDashParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraDashParameter* pInstance);
        static void Clean(StandardCameraDashParameter* pInstance);
    };

    struct StandardCameraCyloopParameter {
        float minDistance;
        float maxDistance;
        float elevationOffset;
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float targetUpOffset;
        float minDelayLimitDistance;
        float maxDelayLimitDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraCyloopParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraCyloopParameter* pInstance);
        static void Clean(StandardCameraCyloopParameter* pInstance);
    };

    struct StandardCameraLockonParameter {
        float distance;
        float minElevation;
        float maxElevation;
        float elevationOffset;
        float minElevationCyloop;
        float maxElevationCyloop;
        float elevationOffsetCyloop;
        float targetUpOffset;
        float delayAllowDistance;
        float delayLimitDistance;
        float delaySuspensionK;
        float panningSuspensionK;
        float interiorPanningDistance;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraLockonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraLockonParameter* pInstance);
        static void Clean(StandardCameraLockonParameter* pInstance);
    };

    struct StandardCameraWallParameter {
        float distance;
        float targetUpOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraWallParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraWallParameter* pInstance);
        static void Clean(StandardCameraWallParameter* pInstance);
    };

    struct StandardCameraLoopParameter {
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float targetUpOffset;
        float baseUpLeanRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraLoopParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraLoopParameter* pInstance);
        static void Clean(StandardCameraLoopParameter* pInstance);
    };

    struct StandardCameraOptionParameter {
        float minManualRotationSpeed;
        float maxManualRotationSpeed;
        float minDistanceScale;
        float maxDistanceScale;
        float maxElevationAddOffset;
        float minTargetUpOffsetScale;
        float maxTargetUpOffsetScale;
        float minFovyRate;
        float minLimitFovy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraOptionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraOptionParameter* pInstance);
        static void Clean(StandardCameraOptionParameter* pInstance);
    };

    struct StandardCameraConfig {
        StandardCameraCommonParameter common;
        StandardCameraDashParameter dash;
        StandardCameraCyloopParameter c;
        StandardCameraCyloopParameter cyloopSnipe;
        StandardCameraLockonParameter lockon;
        StandardCameraLockonParameter lockonCharger;
        StandardCameraLockonParameter lockonSpider;
        StandardCameraLockonParameter lockonDaruma;
        StandardCameraLockonParameter lockonNinja;
        StandardCameraLockonParameter lockonSumo;
        StandardCameraWallParameter wall;
        StandardCameraLoopParameter loop;
        StandardCameraBattleParameter battle;
        StandardCameraOptionParameter option;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StandardCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StandardCameraConfig* pInstance);
        static void Clean(StandardCameraConfig* pInstance);
    };

    struct CameraShakeRecord {
        enum class ShakeType : uint8_t {
            Directional = 0,
            WorldY = 1,
            Random = 2,
        };

        csl::ut::VariableString name;
        ShakeType type;
        float zRot;
        float duration;
        float frequency;
        float amplitude;
        float timeAttenuationRate;
        bool enableDistanceAttenuation;
        float attenuationDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CameraShakeRecord* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CameraShakeRecord* pInstance);
        static void Clean(CameraShakeRecord* pInstance);
    };

    struct CameraShakeTable {
        CameraShakeRecord records[64];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CameraShakeTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CameraShakeTable* pInstance);
        static void Clean(CameraShakeTable* pInstance);
    };

    struct AddDatabaseInfo {
        uint8_t recordNo;
        uint8_t numRecords;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AddDatabaseInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AddDatabaseInfo* pInstance);
        static void Clean(AddDatabaseInfo* pInstance);
    };

    struct ContentParameter {
        AddDatabaseInfo databases[2];
        csl::ut::VariableString stagedata;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ContentParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ContentParameter* pInstance);
        static void Clean(ContentParameter* pInstance);
    };

    struct EnemyAttackRecord {
        enum class Kind : int8_t {
            InvalidKind = -1,
            Dead_BattleJellymanLv1 = 0,
            Dead_BattleJellymanLv2 = 1,
            Dead_BattleJellymanLv3 = 2,
            Dead_BattleJellymanLv4 = 3,
            Dead_BattleWolf = 4,
            Dead_BattleBird = 5,
            Dead_BattleSniper = 6,
            Dead_BattleTwister = 7,
            Dead_BattleBommer = 8,
            Dead_BattleBubble = 9,
            Dead_BattleDefender = 10,
            Dead_BattleUmbrella = 11,
            Dead_BattleAquaBall = 12,
            Dead_BattleJumper = 13,
            Dead_BattleBladeLv1 = 14,
            Dead_BattleBladeLv2 = 15,
            Dead_BattleBladeLv3 = 16,
            Dead_BattleBladeLv4 = 17,
            Dead_BattleDarumaLv1 = 18,
            Dead_BattleDarumaLv2 = 19,
            Dead_BattleDarumaLv3 = 20,
            Dead_BattleDarumaLv4 = 21,
            Dead_BattleSpider = 22,
            Dead_BattleCharger = 23,
            Dead_BattleFlyer = 24,
            Dead_BattleTracker = 25,
            Dead_BattleAsura = 26,
            Dead_BattleSkier = 27,
            Dead_BattleTyrant = 28,
            Dead_BattleSumo = 29,
            Dead_BattleStrider = 30,
            Dead_BattleWarship = 31,
            Dead_BattleGiantFC = 32,
            Dead_BattleGiantClimb = 33,
            Dead_BattleGiant = 34,
            Dead_BattleDragonFC = 35,
            Dead_BattleDragonClimb = 36,
            Dead_BattleDragon = 37,
            Dead_BattleKnightFC = 38,
            Dead_BattleKnightClimb = 39,
            Dead_BattleKnight = 40,
            Dead_BattleRifle = 41,
            Dead_BattleTheEnd = 42,
            Dead_Gimmick = 43,
            Dead_Fall = 44,
            Dead_Water = 45,
            Dead_Lava = 46,
            Failed_QuestKodamaCollect1 = 47,
            Failed_QuestMowingGrass = 48,
            Failed_QuestKodamaEscort = 49,
            Failed_QuestKodamaCollect2 = 50,
            Failed_QuestDarumaBattle = 51,
            Failed_QuestCollectItem = 52,
            Failed_QuestDrawBridge = 53,
            Failed_PinBall = 54,
            Failed_Hacking = 55,
            Transit_ToIsland = 56,
            Transit_ToCyber = 57,
            Transit_ToFishing = 58,
            Transit_ToHacking = 59,
            Transit_ToTheEnd = 60,
            Transit_ToSkill1 = 61,
            Transit_ToSkill2 = 62,
            Transit_ToSkill3 = 63,
            Transit_ToSkill4 = 64,
            Transit_ToSkill5 = 65,
            Transit_ToSkill6 = 66,
            Transit_ToSkill7 = 67,
            Transit_ToSkill8 = 68,
            Transit_ToSkill9 = 69,
            Transit_ToSkill10 = 70,
            Transit_ToSkill11 = 71,
            Transit_ToSkill12 = 72,
            Transit_ToSkill13 = 73,
            Transit_ToSkill14 = 74,
            Transit_ToSkill15 = 75,
            Transit_ToSkill16 = 76,
            Transit_ToSkill17 = 77,
            Transit_ToSkill18 = 78,
            Transit_ToSkill19 = 79,
            Transit_ToSkill20 = 80,
            NumKinds = 81,
        };

        csl::ut::VariableString name;
        int32_t damage;
        float velocityX;
        float velocityY;
        csl::ut::VariableString hitStopName;
        csl::ut::VariableString cameraShakeName;
        Kind practice;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAttackRecord* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAttackRecord* pInstance);
        static void Clean(EnemyAttackRecord* pInstance);
    };

    struct EnemyAttackRecordBaseTable {
        EnemyAttackRecord data[192];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAttackRecordBaseTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAttackRecordBaseTable* pInstance);
        static void Clean(EnemyAttackRecordBaseTable* pInstance);
    };

    struct EnemyAttackRecordTable {
        EnemyAttackRecord data[192];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAttackRecordTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAttackRecordTable* pInstance);
        static void Clean(EnemyAttackRecordTable* pInstance);
    };

    struct EnemyDefenceRecord {
        csl::ut::VariableString name;
        float baseRate;
        float slashRate;
        float quickRate;
        float stunRate;
        float staggerRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenceRecord* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenceRecord* pInstance);
        static void Clean(EnemyDefenceRecord* pInstance);
    };

    struct EnemyDefenceRecordBaseTable {
        EnemyDefenceRecord data[64];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenceRecordBaseTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenceRecordBaseTable* pInstance);
        static void Clean(EnemyDefenceRecordBaseTable* pInstance);
    };

    struct EnemyDefenceRecordTable {
        EnemyDefenceRecord data[128];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenceRecordTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenceRecordTable* pInstance);
        static void Clean(EnemyDefenceRecordTable* pInstance);
    };

    struct Record {
        uint8_t no;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Record* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Record* pInstance);
        static void Clean(Record* pInstance);
    };

    struct DLCMhrBarbecueTokenParam {
        uint32_t rawToken;
        uint32_t rawBurnToken;
        uint32_t brownedToken;
        uint32_t charredToken;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DLCMhrBarbecueTokenParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DLCMhrBarbecueTokenParam* pInstance);
        static void Clean(DLCMhrBarbecueTokenParam* pInstance);
    };

    struct DLCMhrBarbecueParameter {
        float rawTime;
        float rawBurnTime;
        float brownedTime;
        float charredTime;
        float startwaitTime;
        float successTime;
        float missTime;
        float resultUIDelaySuccess;
        float resultUIDelayFaild;
        DLCMhrBarbecueTokenParam tokenParam[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DLCMhrBarbecueParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DLCMhrBarbecueParameter* pInstance);
        static void Clean(DLCMhrBarbecueParameter* pInstance);
    };

    struct DLCParameter {
        uint8_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DLCParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DLCParameter* pInstance);
        static void Clean(DLCParameter* pInstance);
    };

    struct DebrisParameter {
        int32_t m_maxNumPieces;
        float gravity;
        float lifeTime;
        float force;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisParameter* pInstance);
        static void Clean(DebrisParameter* pInstance);
    };

    struct GravityFieldConcaveBoxSetupParameter {
        float x;
        float y;
        float z;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldConcaveBoxSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldConcaveBoxSetupParameter* pInstance);
        static void Clean(GravityFieldConcaveBoxSetupParameter* pInstance);
    };

    struct GravityFieldConstantSetupParameter {
        float x;
        float y;
        float z;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldConstantSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldConstantSetupParameter* pInstance);
        static void Clean(GravityFieldConstantSetupParameter* pInstance);
    };

    struct GravityFieldCylinderSplineSetupParameter {
        float radius;
        csl::ut::VariableString pathName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldCylinderSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldCylinderSplineSetupParameter* pInstance);
        static void Clean(GravityFieldCylinderSplineSetupParameter* pInstance);
    };

    struct GravityFieldFaceSplineSetupParameter {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldFaceSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldFaceSplineSetupParameter* pInstance);
        static void Clean(GravityFieldFaceSplineSetupParameter* pInstance);
    };

    struct GravityFieldHemisphereSetupParameter {
        enum class Type : int8_t {
            TYPE_OUTER = 0,
            TYPE_INNER = 1,
        };

        float radius;
        float innerRadius;
        Type type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldHemisphereSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldHemisphereSetupParameter* pInstance);
        static void Clean(GravityFieldHemisphereSetupParameter* pInstance);
    };

    struct GravityFieldInsideCylinderSplineSetupParameter {
        float innerRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldInsideCylinderSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldInsideCylinderSplineSetupParameter* pInstance);
        static void Clean(GravityFieldInsideCylinderSplineSetupParameter* pInstance);
    };

    struct GravityFieldInsidePrismSplineSetupParameter {
        float innerRadius;
        int8_t divide;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldInsidePrismSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldInsidePrismSplineSetupParameter* pInstance);
        static void Clean(GravityFieldInsidePrismSplineSetupParameter* pInstance);
    };

    struct GravityFieldOutsideCylinderSplineSetupParameter {
        float innerRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldOutsideCylinderSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldOutsideCylinderSplineSetupParameter* pInstance);
        static void Clean(GravityFieldOutsideCylinderSplineSetupParameter* pInstance);
    };

    struct GravityFieldOutsidePrismSplineSetupParameter {
        float innerRadius;
        int8_t divide;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldOutsidePrismSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldOutsidePrismSplineSetupParameter* pInstance);
        static void Clean(GravityFieldOutsidePrismSplineSetupParameter* pInstance);
    };

    struct GravityFieldSphereSetupParameter {
        float radius;
        float innerRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldSphereSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldSphereSetupParameter* pInstance);
        static void Clean(GravityFieldSphereSetupParameter* pInstance);
    };

    struct GravityFieldSvSplineSetupParameter {
        csl::ut::VariableString pathName;
        float x;
        float y;
        float z;
        float tolerance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldSvSplineSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldSvSplineSetupParameter* pInstance);
        static void Clean(GravityFieldSvSplineSetupParameter* pInstance);
    };

    struct GravityFieldSetupParameter {
        int8_t prio;
        bool defaultON;
        bool fixed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GravityFieldSetupParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GravityFieldSetupParameter* pInstance);
        static void Clean(GravityFieldSetupParameter* pInstance);
    };

    struct MasterTrialStageParameter {
        csl::ut::Bitset<uint8_t> prerequisite;
        float limitTime;
        float speedUpScale;
        float recoveryHpTime;
        uint32_t recoveryHpPoint;
        uint32_t limitMistake;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MasterTrialStageParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MasterTrialStageParameter* pInstance);
        static void Clean(MasterTrialStageParameter* pInstance);
    };

    struct MasterTrialParameterElement {
        int32_t applicableFailedCount;
        MasterTrialStageParameter stages[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MasterTrialParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MasterTrialParameterElement* pInstance);
        static void Clean(MasterTrialParameterElement* pInstance);
    };

    struct MasterTrialParameters {
        float subjectViewTime;
        float readyTime;
        float clearTime;
        float failedTime;
        float clearWaitTime;
        float failedWaitTime;
        MasterTrialParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MasterTrialParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MasterTrialParameters* pInstance);
        static void Clean(MasterTrialParameters* pInstance);
    };

    struct DevConfigParameters {
        enum class Value : int8_t {
            Invalid = -1,
            Sonic = 0,
            Amy = 1,
            Knuckles = 2,
            Tails = 3,
            Num = 4,
            Default = 0,
        };

        bool autoSaveEnabled;
        bool gismoEnabled;
        bool reportEnabled;
        bool skillTreeEnabled;
        bool tutorialEnabled;
        bool arcadeModeEnabled;
        bool battleModeEnabled;
        bool cyberChallengeEnabled;
        bool practice;
        bool practiceTimeLimitEnabled;
        bool creditsEnabled;
        Value character;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DevConfigParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DevConfigParameters* pInstance);
        static void Clean(DevConfigParameters* pInstance);
    };

    struct HeightFieldConfigData {
        enum class LayerType : int8_t {
            LAYER_NONE = 0,
            LAYER_SOLID = 1,
            LAYER_LIQUID = 2,
            LAYER_THROUGH = 3,
            LAYER_CAMERA = 4,
            LAYER_SOLID_ONEWAY = 5,
            LAYER_SOLID_THROUGH = 6,
            LAYER_SOLID_TINY = 7,
            LAYER_SOLID_DETAIL = 8,
            LAYER_LEAF = 9,
            LAYER_LAND = 10,
            LAYER_RAYBLOCK = 11,
            LAYER_EVENT = 12,
            LAYER_RESERVED13 = 13,
            LAYER_RESERVED14 = 14,
            LAYER_PLAYER = 15,
            LAYER_ENEMY = 16,
            LAYER_ENEMY_BODY = 17,
            LAYER_GIMMICK = 18,
            LAYER_DYNAMICS = 19,
            LAYER_RING = 20,
            LAYER_CHARACTER_CONTROL = 21,
            LAYER_PLAYER_ONLY = 22,
            LAYER_DYNAMICS_THROUGH = 23,
            LAYER_ENEMY_ONLY = 24,
            LAYER_SENSOR_PLAYER = 25,
            LAYER_SENSOR_RING = 26,
            LAYER_SENSOR_GIMMICK = 27,
            LAYER_SENSOR_LAND = 28,
            LAYER_SENSOR_ALL = 29,
            LAYER_RESERVED30 = 30,
            LAYER_RESERVED31 = 31,
        };

        enum class MaterialType : int8_t {
            MAT_NONE = 0,
            MAT_STONE = 1,
            MAT_EARTH = 2,
            MAT_WOOD = 3,
            MAT_GRASS = 4,
            MAT_IRON = 5,
            MAT_SAND = 6,
            MAT_LAVA = 7,
            MAT_GLASS = 8,
            MAT_SNOW = 9,
            MAT_NO_ENTRY = 10,
            MAT_ICE = 11,
            MAT_WATER = 12,
            MAT_SEA = 13,
            MAT_DAMAGE = 14,
            MAT_DEAD = 15,
            MAT_FLOWER0 = 16,
            MAT_FLOWER1 = 17,
            MAT_FLOWER2 = 18,
            MAT_AIR = 19,
            MAT_DEADLEAVES = 20,
            MAT_WIREMESH = 21,
            MAT_DEAD_ANYDIR = 22,
            MAT_DAMAGE_THROUGH = 23,
            MAT_DRY_GRASS = 24,
            MAT_RELIC = 25,
            MAT_GIANT = 26,
            MAT_GRAVEL = 27,
            MAT_MUD_WATER = 28,
            MAT_SAND2 = 29,
            MAT_SAND3 = 30,
        };

        LayerType layer;
        MaterialType material;
        bool notStand;
        bool wall;
        bool parkour;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeightFieldConfigData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeightFieldConfigData* pInstance);
        static void Clean(HeightFieldConfigData* pInstance);
    };

    struct HeightFieldConfig {
        HeightFieldConfigData data[255];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeightFieldConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeightFieldConfig* pInstance);
        static void Clean(HeightFieldConfig* pInstance);
    };

    struct MonologueIslandParameters {
        float playSpanTime;
        csl::ut::VariableString labelNames[24];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MonologueIslandParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MonologueIslandParameters* pInstance);
        static void Clean(MonologueIslandParameters* pInstance);
    };

    struct MonologueMultiTextParameters {
        csl::ut::VariableString labelNames[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MonologueMultiTextParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MonologueMultiTextParameters* pInstance);
        static void Clean(MonologueMultiTextParameters* pInstance);
    };

    struct MonologueParameters {
        enum class Value : int8_t {
            SteppeIsland1 = 0,
            DesertIsland = 1,
            VolcanicIsland = 2,
            TowerIsland = 3,
            SteppeIsland2 = 4,
            Num = 5,
            ExtraIsland = 5,
            NumInExtra = 6,
        };

        MonologueIslandParameters islands[5];
        MonologueMultiTextParameters multiText[1];
        int8_t firstTheEndNotifyCount;
        int8_t theEndNotifyCount;
        Value dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MonologueParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MonologueParameters* pInstance);
        static void Clean(MonologueParameters* pInstance);
    };

    struct BakeBoxParameter {
        csl::ut::VariableString name;
        csl::math::Vector3 center;
        csl::math::Vector3 halfExtents;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BakeBoxParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BakeBoxParameter* pInstance);
        static void Clean(BakeBoxParameter* pInstance);
    };

    struct BakeCameraParameter {
        csl::ut::VariableString name;
        csl::ut::Array<BakeCameraParameter> data;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BakeCameraParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BakeCameraParameter* pInstance);
        static void Clean(BakeCameraParameter* pInstance);
    };

    struct BakeCameraParameterData {
        csl::math::Vector3 target;
        csl::math::Vector3 eye;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BakeCameraParameterData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BakeCameraParameterData* pInstance);
        static void Clean(BakeCameraParameterData* pInstance);
    };

    struct BattleRushPhaseRankParameter {
        uint32_t rankTime[4];
        uint32_t rankTimeAll[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BattleRushPhaseRankParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BattleRushPhaseRankParameter* pInstance);
        static void Clean(BattleRushPhaseRankParameter* pInstance);
    };

    struct BattleRushStageParameter {
        enum class BgmType : int8_t {
            INVALID = -1,
            ENEMY_BATTLE = 0,
            FORCE_BATTLE_FIELD = 1,
            MINIBOSS_CHARGER_BATTLE = 2,
            MINIBOSS_DARUMA_BATTLE = 3,
            MINIBOSS_SPIDER_BATTLE = 4,
            MINIBOSS_BLADE_BATTLE = 5,
            MINIBOSS_FLYER_BATTLE = 6,
            MINIBOSS_TRACKER_BATTLE = 7,
            MINIBOSS_ASHURA_BATTLE = 8,
            MINIBOSS_SKIER_BATTLE = 9,
            MINIBOSS_SUMO_BATTLE = 10,
            MINIBOSS_TYRANT_BATTLE = 11,
            MINIBOSS_STRIDER_BATTLE = 12,
            MINIBOSS_WARSHIP_BATTLE = 13,
            ENEMY_AQUABALL = 14,
            TUTORIAL_BLADE_BATTLE = 15,
        };

        uint32_t numPhases;
        float phaseLimitTime[11];
        float phaseClearedTime[11];
        float phaseResultTime[11];
        BattleRushPhaseRankParameter phaseRank[11];
        BgmType phaseBgmType[11];
        uint32_t hour;
        uint32_t minute;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BattleRushStageParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BattleRushStageParameter* pInstance);
        static void Clean(BattleRushStageParameter* pInstance);
    };

    struct BattleRushParameter {
        BattleRushStageParameter stages[4];
        float viewPaseResultTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BattleRushParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BattleRushParameter* pInstance);
        static void Clean(BattleRushParameter* pInstance);
    };

    struct CyKnuckleHoleTransitionParameter {
        enum class EasingType : uint8_t {
            LINEAR_EASEIN = 0,
            LINEAR_EASEOUT = 1,
            LINEAR_EASEINOUT = 2,
            QUADRATIC_EASEIN = 3,
            QUADRATIC_EASEOUT = 4,
            QUADRATIC_EASEINOUT = 5,
            CUBIC_EASEIN = 6,
            CUBIC_EASEOUT = 7,
            CUBIC_EASEINOUT = 8,
            QUARTIC_EASEIN = 9,
            QUARTIC_EASEOUT = 10,
            QUARTIC_EASEINOUT = 11,
            QUINTIC_EASEIN = 12,
            QUINTIC_EASEOUT = 13,
            QUINTIC_EASEINOUT = 14,
            SINE_EASEIN = 15,
            SINE_EASEOUT = 16,
            SINE_EASEINOUT = 17,
            EXPONENTAL_EASEIN = 18,
            EXPONENTAL_EASEOUT = 19,
            EXPONENTAL_EASEINOUT = 20,
            CIRCULAR_EASEIN = 21,
            CIRCULAR_EASEOUT = 22,
            CIRCULAR_EASEINOUT = 23,
            BACK_EASEIN = 24,
            BACK_EASEOUT = 25,
            BACK_EASEINOUT = 26,
            BOUNCE_EASEIN = 27,
            BOUNCE_EASEOUT = 28,
            BOUNCE_EASEINOUT = 29,
            ELASITC_EASEIN = 30,
            ELASITC_EASEOUT = 31,
            ELASITC_EASEINOUT = 32,
            NUM_EASINGTYPES = 33,
        };

        float easeTime;
        EasingType easing;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyKnuckleHoleTransitionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyKnuckleHoleTransitionParameter* pInstance);
        static void Clean(CyKnuckleHoleTransitionParameter* pInstance);
    };

    struct CyKnuckleHoleParameter {
        float radiusOpenSmall;
        float radiusOpen;
        CyKnuckleHoleTransitionParameter closeToOpenSmall;
        CyKnuckleHoleTransitionParameter closeToOpen;
        CyKnuckleHoleTransitionParameter openSmallToClose;
        CyKnuckleHoleTransitionParameter openSmallToOpen;
        CyKnuckleHoleTransitionParameter openToClose;
        CyKnuckleHoleTransitionParameter openToOpenSmall;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyKnuckleHoleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyKnuckleHoleParameter* pInstance);
        static void Clean(CyKnuckleHoleParameter* pInstance);
    };

    struct GameExpParameter {
        uint32_t maxExpPointBase;
        uint32_t maxExpPointAdd;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameExpParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameExpParameter* pInstance);
        static void Clean(GameExpParameter* pInstance);
    };

    struct GameGrassInteractionParameterData {
        csl::ut::VariableString name;
        float radius;
        float height;
        float power;
        bool moveHitEnabled;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameGrassInteractionParameterData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameGrassInteractionParameterData* pInstance);
        static void Clean(GameGrassInteractionParameterData* pInstance);
    };

    struct GameGrassInteractionParameter {
        GameGrassInteractionParameterData data[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameGrassInteractionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameGrassInteractionParameter* pInstance);
        static void Clean(GameGrassInteractionParameter* pInstance);
    };

    struct GameGrindLodParameter {
        float distances[4];
        float cullingDistances[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameGrindLodParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameGrindLodParameter* pInstance);
        static void Clean(GameGrindLodParameter* pInstance);
    };

    struct GameHitStopParameterData {
        csl::ut::VariableString name;
        float scale;
        float time;
        float easeOutTime;
        float delayTime;
        bool layerPlayer;
        bool layerEnemy;
        bool layerDamagedEnemy;
        bool layerCamera;
        bool layerOthers;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameHitStopParameterData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameHitStopParameterData* pInstance);
        static void Clean(GameHitStopParameterData* pInstance);
    };

    struct GameHitStopParameter {
        GameHitStopParameterData data[64];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameHitStopParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameHitStopParameter* pInstance);
        static void Clean(GameHitStopParameter* pInstance);
    };

    struct SkillParam {
        uint8_t unlockPoint;
        uint8_t addUnlockPoint;
        bool present;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkillParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkillParam* pInstance);
        static void Clean(SkillParam* pInstance);
    };

    struct SkillLinkSetting {
        bool down;
        bool left;
        bool right;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkillLinkSetting* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkillLinkSetting* pInstance);
        static void Clean(SkillLinkSetting* pInstance);
    };

    struct SkillNodeParam {
        enum class Value : int8_t {
            Cyloop = 0,
            Smash = 1,
            QuickCyloop = 2,
            AcceleLevel = 3,
            ChargeAttack = 4,
            RecoverySmash = 5,
            AirTrick = 6,
            SonicBoom = 7,
            Crasher = 8,
            LoopKick = 9,
            SpinSlash = 10,
            StompingAttack = 11,
            HomingShot = 12,
            CrossSlash = 13,
            AutoCombo = 14,
            Dummy0 = 15,
            Dummy1 = 16,
            Dummy2 = 17,
            Dummy3 = 18,
            Dummy4 = 19,
            Num = 20,
            NumUsed = 15,
            Invalid = -1,
        };

        bool enable;
        Value skill;
        SkillLinkSetting link;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkillNodeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkillNodeParam* pInstance);
        static void Clean(SkillNodeParam* pInstance);
    };

    struct SkillTreeParam {
        SkillNodeParam nodeParams[30];
        int8_t startIndex;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SkillTreeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SkillTreeParam* pInstance);
        static void Clean(SkillTreeParam* pInstance);
    };

    struct GameSkillParameter {
        SkillParam skillParams[20];
        SkillTreeParam treeParams[1];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameSkillParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameSkillParameter* pInstance);
        static void Clean(GameSkillParameter* pInstance);
    };

    struct PhotoModeCameraParameters {
        float translationLimit;
        float translationSpeedXZ;
        float translationSpeedY;
        float elevLimit;
        float rotationSpeed;
        float rollRange;
        float rollSpeed;
        float fovyRange;
        float fovySpeed;
        float speedRatioFast;
        float speedRatioSlow;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PhotoModeCameraParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PhotoModeCameraParameters* pInstance);
        static void Clean(PhotoModeCameraParameters* pInstance);
    };

    struct PhotoModeFilterParameters {
        float sepiaSaturationOffset;
        float sepiaColorizeRate;
        float sepiaColorizeHue;
        float increaseSaturationOffset;
        int32_t warmColorROffset;
        int32_t warmColorGOffset;
        int32_t warmColorBOffset;
        int32_t coldColorROffset;
        int32_t coldColorGOffset;
        int32_t coldColorBOffset;
        float retroContrastOffset;
        int32_t retroROffset;
        int32_t retroGOffset;
        int32_t retroBOffset;
        float retroSaturationOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PhotoModeFilterParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PhotoModeFilterParameters* pInstance);
        static void Clean(PhotoModeFilterParameters* pInstance);
    };

    struct PhotoModeParameters {
        PhotoModeCameraParameters camera;
        PhotoModeFilterParameters filter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PhotoModeParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PhotoModeParameters* pInstance);
        static void Clean(PhotoModeParameters* pInstance);
    };

    struct PracticeAction {
        enum class Type : uint8_t {
            None = 0,
            ControlCamera = 1,
            Cyloop = 2,
            QuickCyloop = 3,
            FocusCamera = 4,
            Parry = 5,
            Avoid = 6,
            AcceleCombo = 7,
            Crasher = 8,
            HomingShot = 9,
            StompingAttack = 10,
            SonicBoom = 11,
            SpinSlash = 12,
            LoopKick = 13,
            CrossSlash = 14,
            ChargeAttack = 15,
            Smash = 16,
            RecoverySmash = 17,
            Jump = 18,
            DoubleJump = 19,
            HomingAttack = 20,
            Boost = 21,
            Stomping = 22,
            BoundStomping = 23,
            AirBoost = 24,
            QuickStep = 25,
            LightDash = 26,
            DropDash = 27,
            Sliding = 28,
            WallRun = 29,
            Discontinued = 30,
            AirTrick = 31,
            AirTrickEnd = 32,
            CancelHomingAttackBounceStomping = 33,
            CancelAirBoostStomping = 34,
            Squat = 35,
            SpinBoostCharge = 36,
            SpinBoost = 37,
            RunToSpinBoost = 38,
            Num = 39,
        };

        enum class Judge : int8_t {
            Succeed = 0,
            Failed = 1,
            Skiped = 2,
            Waiting = 3,
            Unknown = 4,
            NumJudges = 5,
        };

        Type action;
        Judge dummy;
        csl::ut::Bitset<uint64_t> skipableActions;
        csl::ut::VariableString label;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeAction* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeAction* pInstance);
        static void Clean(PracticeAction* pInstance);
    };

    struct PracticePrerequisite {
        csl::ut::Bitset<uint32_t> skill;
        csl::ut::Bitset<uint64_t> clearedSubject;
        csl::ut::Bitset<uint64_t> clearedSubject2;
        csl::ut::Bitset<uint64_t> clearedSubject3;
        csl::ut::Bitset<uint64_t> clearedSubject4;
        bool unlockSpinBoost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticePrerequisite* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticePrerequisite* pInstance);
        static void Clean(PracticePrerequisite* pInstance);
    };

    struct PracticeSubject {
        enum class Checker : int8_t {
            InvalidChecker = -1,
            CountActions = 0,
            CountAirTrick = 1,
            CountControlCamera = 2,
            CountInfinityCombo = 3,
            CountFiveCombo = 4,
            NumCheckers = 5,
        };

        enum class Option {
            BattleMode = 0,
            AutoComboDisabled = 1,
            QuickCyloopTutorial = 2,
            SubjectViewDisabled = 3,
        };

        Checker checker;
        PracticeAction actions[6];
        int32_t count;
        PracticePrerequisite prerequisite;
        csl::ut::Bitset<uint8_t> options;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeSubject* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeSubject* pInstance);
        static void Clean(PracticeSubject* pInstance);
    };

    struct PracticeText {
        csl::ut::VariableString labels[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeText* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeText* pInstance);
        static void Clean(PracticeText* pInstance);
    };

    struct PracticeTime {
        float readyTime;
        float countTime;
        float subjectViewTime;
        float clearedPostTime;
        float fadeoutWaitTime;
        float rebuildWaitTime1;
        float rebuildWaitTime2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeTime* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeTime* pInstance);
        static void Clean(PracticeTime* pInstance);
    };

    struct PracticeTipsPrerequisite {
        csl::ut::Bitset<uint32_t> skill;
        bool tutorialCleared;
        bool unlockArcadeMode;
        bool unlockCyberPowerBoost;
        bool unlockVeryHardMode;
        bool unlockStrongNewGame;
        bool unlockSpinBoost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeTipsPrerequisite* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeTipsPrerequisite* pInstance);
        static void Clean(PracticeTipsPrerequisite* pInstance);
    };

    struct PracticeTips {
        PracticeTipsPrerequisite prerequisite;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeTips* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeTips* pInstance);
        static void Clean(PracticeTips* pInstance);
    };

    struct PracticeSet {
        int8_t subjects[20];
        int16_t tips[100];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeSet* pInstance);
        static void Clean(PracticeSet* pInstance);
    };

    struct PracticeParameters {
        PracticeSubject subjects[200];
        PracticeText text;
        PracticeTime time;
        float notifyTime;
        PracticeTips tips[256];
        float tipsMinViewTime;
        PracticeSet sets[81];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PracticeParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PracticeParameters* pInstance);
        static void Clean(PracticeParameters* pInstance);
    };

    struct TimeServiceParam {
        float speed;
        float timeMagnification;
        int32_t addMinuteReturnFromCyber;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TimeServiceParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TimeServiceParam* pInstance);
        static void Clean(TimeServiceParam* pInstance);
    };

    struct WeatherBlockParameter {
        uint8_t blockWeights[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherBlockParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherBlockParameter* pInstance);
        static void Clean(WeatherBlockParameter* pInstance);
    };

    struct WeatherTypeParameter {
        uint8_t transitWeights[5];
        WeatherBlockParameter blockParams[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherTypeParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherTypeParameter* pInstance);
        static void Clean(WeatherTypeParameter* pInstance);
    };

    struct WeatherTimeParameter {
        uint8_t hour;
        uint8_t minute;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherTimeParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherTimeParameter* pInstance);
        static void Clean(WeatherTimeParameter* pInstance);
    };

    struct WeatherTimeControlParameter {
        WeatherTimeParameter sunriseBeginTime;
        WeatherTimeParameter dayBeginTime;
        WeatherTimeParameter sunsetBeginTime;
        WeatherTimeParameter nightBeginTime;
        WeatherTimeParameter blockTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherTimeControlParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherTimeControlParameter* pInstance);
        static void Clean(WeatherTimeControlParameter* pInstance);
    };

    struct WeatherParameters {
        WeatherTypeParameter type[5];
        WeatherTimeControlParameter timeControl;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherParameters* pInstance);
        static void Clean(WeatherParameters* pInstance);
    };

    struct EffectParameters {
        float localLightIntensityScale;
        bool dropPriorityEnabled;
        int8_t dropPriority;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EffectParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EffectParameters* pInstance);
        static void Clean(EffectParameters* pInstance);
    };

    struct AuraEffectLerpNode {
        float distance;
        float noiseTextureScrollSpeed;
        float blurScale;
        float colorGain;
        float noiseGain;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AuraEffectLerpNode* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AuraEffectLerpNode* pInstance);
        static void Clean(AuraEffectLerpNode* pInstance);
    };

    struct AuraEffectLerpParameter {
        csl::ut::VariableString name;
        AuraEffectLerpNode node[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AuraEffectLerpParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AuraEffectLerpParameter* pInstance);
        static void Clean(AuraEffectLerpParameter* pInstance);
    };

    struct AuraEffectParameters {
        AuraEffectLerpParameter params[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AuraEffectParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AuraEffectParameters* pInstance);
        static void Clean(AuraEffectParameters* pInstance);
    };

    struct GraphicsParameters {
        AuraEffectParameters aura;
        EffectParameters effect;
        WeatherParameters weather;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GraphicsParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GraphicsParameters* pInstance);
        static void Clean(GraphicsParameters* pInstance);
    };

    struct BossDragonAttackSignParam {
        float delayTime[6];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonAttackSignParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonAttackSignParam* pInstance);
        static void Clean(BossDragonAttackSignParam* pInstance);
    };

    struct BossDragonCameraParam {
        csl::ut::VariableString gazeFrame;
        csl::ut::VariableString gazeFrameMirror;
        csl::math::Vector3 gazeOffset;
        float distance;
        csl::math::Vector3 playerOffset;
        float elevationOffset;
        csl::math::Vector3 followRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonCameraParam* pInstance);
        static void Clean(BossDragonCameraParam* pInstance);
    };

    struct BossDragonChaseParam {
        float distance;
        float goalOffset;
        float speed;
        float boostSpeed;
        float width;
        float height;
        float closeDistance;
        float closeSpeedScale;
        float fastMoveDistance;
        float stunTime;
        float stunSpeedScale;
        float superBoostDelayTime;
        float superBoostTime;
        float superBoostSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonChaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonChaseParam* pInstance);
        static void Clean(BossDragonChaseParam* pInstance);
    };

    struct BossDragonCollisionParamBase {
        csl::ut::VariableString name;
        csl::ut::VariableString parentFrame;
        csl::math::Vector3 size;
        csl::math::Vector3 localPosition;
        csl::math::Vector3 localRotation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonCollisionParamBase* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonCollisionParamBase* pInstance);
        static void Clean(BossDragonCollisionParamBase* pInstance);
    };

    struct BossDragonHitBoxParam {
        csl::math::Vector3 damageVelocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonHitBoxParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonHitBoxParam* pInstance);
        static void Clean(BossDragonHitBoxParam* pInstance);
    };

    struct BossDragonHurtBoxParam {
        bool isEnableHoming;
        csl::ut::VariableString homingNode;
        csl::ut::VariableString homingNodeMirror;
        csl::math::Vector3 homingPosition;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonHurtBoxParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonHurtBoxParam* pInstance);
        static void Clean(BossDragonHurtBoxParam* pInstance);
    };

    struct BossDragonScratchParam {
        float aimTime;
        float stunTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonScratchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonScratchParam* pInstance);
        static void Clean(BossDragonScratchParam* pInstance);
    };

    struct BossDragonReflectShotParam {
        float radius;
        float speed;
        float maxSpeed;
        float accel;
        float reflectSpeedScale;
        float intervalTime;
        float lifeTime;
        float pitchOffsetRange;
        float yawOffsetRange;
        bool isBound;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonReflectShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonReflectShotParam* pInstance);
        static void Clean(BossDragonReflectShotParam* pInstance);
    };

    struct BossDragonShotParam {
        float radius;
        float speed;
        float intervalTime;
        float lifeTime;
        float pitchOffsetRange;
        float yawOffsetRange;
        int32_t count;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonShotParam* pInstance);
        static void Clean(BossDragonShotParam* pInstance);
    };

    struct BossDragonSpiralShotParam {
        float radius;
        float speed;
        float intervalTime;
        float lifeTime;
        float pitchSpeed;
        float yawSpeed;
        float circleIntervalTime;
        int32_t count;
        int32_t parriableCount;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonSpiralShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonSpiralShotParam* pInstance);
        static void Clean(BossDragonSpiralShotParam* pInstance);
    };

    struct BossDragonSplashShotParam {
        float radius;
        float speed;
        float gravity;
        float intervalTime;
        float lifeTime;
        float pitch;
        float pitchInterval;
        float yawInterval;
        int32_t count;
        int32_t parriableCount;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonSplashShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonSplashShotParam* pInstance);
        static void Clean(BossDragonSplashShotParam* pInstance);
    };

    struct BossDragonHomingLaserParam {
        float radius;
        float speed;
        float maxAccel;
        float intervalTime;
        float arrivalTime;
        float lifeTime;
        float minPitchOffset;
        float maxPitchOffset;
        float yawOffsetRange;
        int32_t count;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonHomingLaserParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonHomingLaserParam* pInstance);
        static void Clean(BossDragonHomingLaserParam* pInstance);
    };

    struct BossDragonHomingMissileParam {
        float radius;
        float length;
        float speed;
        float intervalTime;
        float lifeTime;
        float minPitchOffset;
        float maxPitchOffset;
        float yawOffsetRange;
        int32_t count;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonHomingMissileParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonHomingMissileParam* pInstance);
        static void Clean(BossDragonHomingMissileParam* pInstance);
    };

    struct BossDragonRippleLaserParam {
        float innerRadius;
        float outerRadius;
        float speed;
        float intervalTime;
        float lifeTime;
        float pitchOffsetRange;
        float yawOffsetRange;
        int32_t count;
        int32_t parriableCount;
        float intervalTimeInGroup;
        int32_t countInGroup;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonRippleLaserParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonRippleLaserParam* pInstance);
        static void Clean(BossDragonRippleLaserParam* pInstance);
    };

    struct BossDragonRippleLaserRageParam {
        float innerRadius;
        float outerRadius;
        float speed;
        float intervalTime;
        float lifeTime;
        float maxPitch;
        float maxYaw;
        int32_t verticalCount;
        int32_t horizontalCount;
        int32_t extraFrontCount;
        int32_t parriableCount;
        float intervalTimeInGroup;
        int32_t countInGroup;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonRippleLaserRageParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonRippleLaserRageParam* pInstance);
        static void Clean(BossDragonRippleLaserRageParam* pInstance);
    };

    struct BossDragonRippleLaserDummyParam {
        float innerRadius;
        float outerRadius;
        float speed;
        float intervalTime;
        float lifeTime;
        float pitchOffsetRange;
        float yawOffsetRange;
        int32_t count;
        float intervalTimeInGroup;
        int32_t countInGroup;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonRippleLaserDummyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonRippleLaserDummyParam* pInstance);
        static void Clean(BossDragonRippleLaserDummyParam* pInstance);
    };

    struct BossDragonWaveParam {
        float speed;
        float rotSpeed;
        float accel;
        float rotAccel;
        float intervalTime;
        float lifeTime;
        int32_t segmentCount;
        float waveRate;
        int32_t count;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonWaveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonWaveParam* pInstance);
        static void Clean(BossDragonWaveParam* pInstance);
    };

    struct BossDragonLaserParam {
        float radius;
        float length;
        float rotSpeed;
        float rotAccel;
        float roll;
        float intervalTime;
        float standbyTime;
        int32_t count;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonLaserParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonLaserParam* pInstance);
        static void Clean(BossDragonLaserParam* pInstance);
    };

    struct BossDragonCounterLaserParam {
        float radius;
        float speed;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonCounterLaserParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonCounterLaserParam* pInstance);
        static void Clean(BossDragonCounterLaserParam* pInstance);
    };

    struct BossDragonRingSupplyMissileParam {
        int32_t missileNum;
        float missileWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonRingSupplyMissileParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonRingSupplyMissileParam* pInstance);
        static void Clean(BossDragonRingSupplyMissileParam* pInstance);
    };

    struct BossDragonRingSupplyParam {
        csl::math::Vector3 playerPosition;
        float moveTime;
        float moveRange;
        float rotSpeed;
        BossDragonRingSupplyMissileParam missile[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonRingSupplyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonRingSupplyParam* pInstance);
        static void Clean(BossDragonRingSupplyParam* pInstance);
    };

    struct BossDragonLayoutParam {
        enum class EaseType : int8_t {
            SMOOTH = 0,
            EASE_IN = 1,
            EASE_OUT = 2,
            EASE_IN_OUT = 3,
        };

        csl::math::Vector3 bossPosition;
        float bossYaw;
        EaseType bossEaseType;
        float bossEaseTime;
        csl::math::Vector3 playerPosition;
        float playerFieldRange;
        float playerFieldHeight;
        float playerFieldYaw;
        EaseType playerEaseType;
        float playerEaseTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonLayoutParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonLayoutParam* pInstance);
        static void Clean(BossDragonLayoutParam* pInstance);
    };

    struct BossDragonMoveParam {
        csl::math::Vector3 playerNodes[8];
        csl::math::Vector3 bossNodes[8];
        int32_t playerNodeCount;
        int32_t bossNodeCount;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonMoveParam* pInstance);
        static void Clean(BossDragonMoveParam* pInstance);
    };

    struct BossDragonFireBarParam {
        float radius;
        float length;
        float rotSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonFireBarParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonFireBarParam* pInstance);
        static void Clean(BossDragonFireBarParam* pInstance);
    };

    struct BossDragonEscapeShotParam {
        uint32_t vertRatio[3];
        float initSpeed;
        float maxSpeed;
        float acc;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonEscapeShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonEscapeShotParam* pInstance);
        static void Clean(BossDragonEscapeShotParam* pInstance);
    };

    struct BossDragonObstacleParam {
        enum class Type : int8_t {
            None = 0,
            FireBar = 1,
            FireBar4 = 2,
            Spark = 3,
        };

        enum class Location : int8_t {
            Left = 0,
            Center = 1,
            Right = 2,
        };

        float distance;
        Type type;
        Location location;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonObstacleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonObstacleParam* pInstance);
        static void Clean(BossDragonObstacleParam* pInstance);
    };

    struct BossDragonHoleParam {
        float start;
        float end;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonHoleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonHoleParam* pInstance);
        static void Clean(BossDragonHoleParam* pInstance);
    };

    struct BossDragonRoadParam {
        float interval;
        int32_t recordNum;
        float width;
        BossDragonFireBarParam fireBar;
        BossDragonEscapeShotParam shot;
        BossDragonObstacleParam obstacles[64];
        BossDragonHoleParam holes[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonRoadParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonRoadParam* pInstance);
        static void Clean(BossDragonRoadParam* pInstance);
    };

    struct BossDragonLaunchParam {
        float outStrength;
        float inStrength;
        float outElev;
        float inElev;
        float speed;
        csl::math::Vector3 targetOffset;
        float launchCameraInterpolateTime;
        csl::math::Vector3 launchCameraPos;
        csl::math::Vector3 launchCameraTarget;
        float launchCameraRoll;
        float launchCameraTime;
        float fallCameraInterpolateTime;
        float fallCameraDistance;
        float fallCameraElavation;
        float landingCameraInterpolateTime;
        float landingCameraDistance;
        float landingCameraElavation;
        float landingCameraAzimuth;
        float landingCameraChangeDistance;
        float landingCameraNearInterpolateTime;
        float landingCameraNearDistance;
        float landingCameraNearElavation;
        float landingCameraNearAzimuth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonLaunchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonLaunchParam* pInstance);
        static void Clean(BossDragonLaunchParam* pInstance);
    };

    struct BossDragonQuickStepParam {
        float speed;
        float boostSpeed;
        float boostSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonQuickStepParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonQuickStepParam* pInstance);
        static void Clean(BossDragonQuickStepParam* pInstance);
    };

    struct BossDragonMissileIndividualParam {
        bool isValid;
        float rotForce;
        float maxRotForce;
        float rotForceSpeed;
        float rotDamper;
        float straightTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonMissileIndividualParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonMissileIndividualParam* pInstance);
        static void Clean(BossDragonMissileIndividualParam* pInstance);
    };

    struct BossDragonMissileFirePattern {
        float hpRatioThreshold;
        int32_t count;
        float intervalTime;
        float waitTime;
        float badRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonMissileFirePattern* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonMissileFirePattern* pInstance);
        static void Clean(BossDragonMissileFirePattern* pInstance);
    };

    struct BossDragonMissileParam {
        float radius;
        float length;
        float speed;
        float maxSpeed;
        float accel;
        float lifeTime;
        BossDragonMissileIndividualParam individuals[16];
        BossDragonMissileIndividualParam badIndividuals[8];
        BossDragonMissileFirePattern firePatterns[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonMissileParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonMissileParam* pInstance);
        static void Clean(BossDragonMissileParam* pInstance);
    };

    struct BossDragonInterruptParam {
        enum class BossDragonInterrupt : int8_t {
            NOP = 0,
            RAGE = 1,
            SPECIAL_ATTACK = 2,
            SPECIAL_ATTACK2 = 3,
        };

        float hpRatio;
        BossDragonInterrupt interrupt;
        bool forceInterrupt;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonInterruptParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonInterruptParam* pInstance);
        static void Clean(BossDragonInterruptParam* pInstance);
    };

    struct BossDragonCyloopBindParam {
        float postCameraTime[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonCyloopBindParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonCyloopBindParam* pInstance);
        static void Clean(BossDragonCyloopBindParam* pInstance);
    };

    struct BossDragonParrySlowParam {
        float scale;
        float time;
        float easeOutTime;
        bool cameraSlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonParrySlowParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonParrySlowParam* pInstance);
        static void Clean(BossDragonParrySlowParam* pInstance);
    };

    struct BossDragonParryParam {
        BossDragonParrySlowParam slowParams[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonParryParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonParryParam* pInstance);
        static void Clean(BossDragonParryParam* pInstance);
    };

    struct BossDragonNotifierParam {
        EnemyPracticeNotifierConfig notifierConfigClimb;
        EnemyPracticeNotifierConfig notifierConfigBattle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonNotifierParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonNotifierParam* pInstance);
        static void Clean(BossDragonNotifierParam* pInstance);
    };

    struct BossDragonConfig {
        enum class BossDragonSequence : int8_t {
            NOP = 0,
            BITE = 1,
            LIGHT_SCRATCH = 2,
            SCRATCH = 3,
            SHOOT = 4,
            SHOOT_NORMAL = 5,
            SHOOT_SPIRAL = 6,
            SHOOT_SPIRAL_ALTERNATE = 7,
            SHOOT_SPIRAL_VERTICAL = 8,
            SHOOT_SPLASH = 9,
            SHOOT_HOMING_LASER = 10,
            SHOOT_HOMING_MISSILE = 11,
            SHOOT_RIPPLE_LASER = 12,
            SHOOT_RIPPLE_LASER_RAGE = 13,
            SHOOT_WAVE = 14,
            SHOOT_LASER_WINDER = 15,
            SHOOT_RANDOM_LASER = 16,
            SHOOT_END = 17,
            SWAP_SIDE = 18,
            CHASE = 19,
        };

        float cruisePathSpeed;
        float patrolPathSpeed;
        float approachPathSpeedMin;
        float approachPathSpeedMax;
        float climbPathSpeed;
        float pathSpeed;
        float ringSupplyPathSpeed;
        float sideDistance;
        float shootEndTime;
        int32_t staggerPoint;
        int32_t staggerPointRage;
        float staggerTime;
        float biteParriedTime;
        float scratchParriedTime;
        int32_t knockBackStaggerCount;
        int32_t knockBackPoint;
        float knockBackTime;
        float hardStunTime;
        float cyloopBindTime;
        float cyloopBind2Time;
        float cyloopEscapeHpRatio;
        float cyloopEscapeTime;
        float fallDeadHeight;
        int32_t specialAttackDamage;
        int32_t qte1Damage;
        csl::ut::VariableString accessNodeNames[16];
        BossDragonHitBoxParam hitBoxes[32];
        BossDragonHurtBoxParam hurtBoxes[32];
        BossDragonScratchParam scratch;
        BossDragonReflectShotParam reflect;
        BossDragonShotParam shot;
        BossDragonSpiralShotParam spiral;
        BossDragonSpiralShotParam spiralAlternate;
        BossDragonSpiralShotParam spiralVertical;
        BossDragonSplashShotParam splash;
        BossDragonHomingLaserParam homingLaser;
        BossDragonHomingMissileParam homingMissile;
        BossDragonRippleLaserParam rippleLaser;
        BossDragonRippleLaserRageParam rippleLaserRage;
        BossDragonRippleLaserDummyParam rippleLaserDummy;
        BossDragonWaveParam wave;
        BossDragonLaserParam laserWinder;
        BossDragonLaserParam randomLaser;
        BossDragonCounterLaserParam counterLaser;
        BossDragonRingSupplyParam ringSupply;
        float damageRates[4];
        BossDragonLayoutParam layouts[46];
        BossDragonCameraParam cameras[47];
        BossDragonMoveParam swapMove;
        BossDragonRoadParam road;
        BossDragonLaunchParam launch;
        BossDragonQuickStepParam quickStep;
        BossDragonChaseParam chase;
        BossDragonMissileParam missile;
        BossDragonSequence seq[16];
        BossDragonSequence seq2[16];
        BossDragonInterruptParam interrupts[8];
        BossDragonCyloopBindParam cyloopBind;
        BossDragonParryParam parry[4];
        BossDragonAttackSignParam attackSign;
        BossDragonNotifierParam notifier;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDragonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDragonConfig* pInstance);
        static void Clean(BossDragonConfig* pInstance);
    };

    struct BossGiantPhaseParam {
        enum class ActionType : int8_t {
            AT_NONE = 0,
            AT_HAND_L = 1,
            AT_HAND_R = 2,
            AT_BACKHAND_L = 3,
            AT_BACKHAND_R = 4,
            AT_HEAD = 5,
            AT_HOWL = 6,
            AT_LASER = 7,
            AT_COUNTER_NORMAL = 8,
            AT_COUNTER_SP_01 = 9,
            AT_COUNTER_SP_02 = 10,
            AT_COUNTER_SP_03 = 11,
            AT_ROTATION = 12,
            AT_STEP = 13,
            AT_JUMP = 14,
            AT_TURN = 15,
            NUM_ACTION_TYPE = 16,
        };

        float attackWaitTime;
        float attackSpeedRatio;
        uint32_t knockbackCountMax;
        ActionType attackTypes[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantPhaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantPhaseParam* pInstance);
        static void Clean(BossGiantPhaseParam* pInstance);
    };

    struct BossGiantPhaseAttackActionParam {
        enum class ActionAttribute : int8_t {
            AA_NONE = 0,
            AA_ALL = 1,
            AA_FRONT = 2,
            AA_BACK = 3,
            AA_LEFT = 4,
            AA_RIGHT = 5,
        };

        ActionAttribute attribute1;
        ActionAttribute attribute2;
        float useDistanceMin;
        float useDistanceMax;
        float useHeightMin;
        float useHeightMax;
        float useAngleMin;
        float useAngleMax;
        float useAbsAngleOver;
        float useHpRatioMin;
        float useHpRatioMax;
        float useAreaOver;
        uint32_t priority;
        float coolTime;
        float initCoolTime;
        float readyTime;
        uint32_t consecutiveUsesLimit;
        float consecutiveUsesLimitCoolTime;
        bool isCounterUse;
        bool isCounterOnly;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantPhaseAttackActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantPhaseAttackActionParam* pInstance);
        static void Clean(BossGiantPhaseAttackActionParam* pInstance);
    };

    struct BossGiantCyloopFloatActionParam {
        float landingCounterHPRatio;
        float floatCounterHPRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantCyloopFloatActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantCyloopFloatActionParam* pInstance);
        static void Clean(BossGiantCyloopFloatActionParam* pInstance);
    };

    struct BossGiantThresholdRingSupplyParam {
        enum class LaserType : int8_t {
            LT_NONE = 0,
            LT_STRAIGHT = 1,
            LT_HOMING = 2,
        };

        float hpRatio;
        LaserType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantThresholdRingSupplyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantThresholdRingSupplyParam* pInstance);
        static void Clean(BossGiantThresholdRingSupplyParam* pInstance);
    };

    struct BossGiantBattleParam {
        enum class ActionType : int8_t {
            AT_NONE = 0,
            AT_HAND_L = 1,
            AT_HAND_R = 2,
            AT_BACKHAND_L = 3,
            AT_BACKHAND_R = 4,
            AT_HEAD = 5,
            AT_HOWL = 6,
            AT_LASER = 7,
            AT_COUNTER_NORMAL = 8,
            AT_COUNTER_SP_01 = 9,
            AT_COUNTER_SP_02 = 10,
            AT_COUNTER_SP_03 = 11,
            AT_ROTATION = 12,
            AT_STEP = 13,
            AT_JUMP = 14,
            AT_TURN = 15,
            NUM_ACTION_TYPE = 16,
        };

        BossGiantPhaseParam giantPhaseParams[4];
        BossGiantPhaseAttackActionParam actionParams[15];
        ActionType immediateActions[20];
        BossGiantCyloopFloatActionParam cyloopFloatAction;
        BossGiantThresholdRingSupplyParam thresholdRingSupply[3];
        float thresholdDamageEffectHPRatio[3];
        bool isDebugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantBattleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantBattleParam* pInstance);
        static void Clean(BossGiantBattleParam* pInstance);
    };

    struct BossGiantNotifierParam {
        EnemyPracticeNotifierConfig notifierConfigClimb;
        EnemyPracticeNotifierConfig notifierConfigBattle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantNotifierParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantNotifierParam* pInstance);
        static void Clean(BossGiantNotifierParam* pInstance);
    };

    struct BossGiantConfig {
        BossGiantBattleParam battleParam;
        BossGiantNotifierParam notifierParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossGiantConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossGiantConfig* pInstance);
        static void Clean(BossGiantConfig* pInstance);
    };

    struct KnightIdleConfig {
        float runSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightIdleConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightIdleConfig* pInstance);
        static void Clean(KnightIdleConfig* pInstance);
    };

    struct KnightClimbIdleConfig {
        float moveIntervalAfterSlam;
        float moveIntervalAfterMove;
        float moveIntervalAfterFall;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbIdleConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbIdleConfig* pInstance);
        static void Clean(KnightClimbIdleConfig* pInstance);
    };

    struct KnightClimbMoveConfig {
        float speedAvg;
        float angle1Min;
        float angle1Max;
        float angle2Min;
        float angle2Max;
        float move2WaitDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbMoveConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbMoveConfig* pInstance);
        static void Clean(KnightClimbMoveConfig* pInstance);
    };

    struct KnightClimbSlamLookupCameraConfig {
        float duration;
        float lockonDistance;
        float unlockDistance;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbSlamLookupCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbSlamLookupCameraConfig* pInstance);
        static void Clean(KnightClimbSlamLookupCameraConfig* pInstance);
    };

    struct KnightClimbSlamWaveConfig {
        float interval;
        uint32_t generateNum;
        float coolTime;
        float radius;
        float appearRadius;
        float keepRadius;
        float disappearRadius;
        float heightMin;
        float heightMax;
        float lifeTime;
        float modelScale;
        float modelDiameter;
        float effectDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbSlamWaveConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbSlamWaveConfig* pInstance);
        static void Clean(KnightClimbSlamWaveConfig* pInstance);
    };

    struct KnightClimbSlamConfig {
        float rotateSpeedBeforeSlam;
        float slamAnimSpeed;
        float waitTimeAfterSlam;
        float liftUpStartAnimSpeed;
        float liftUpEndAnimSpeed;
        float liftUpStartAnimSpeedMiss;
        float liftUpEndAnimSpeedMiss;
        KnightClimbSlamLookupCameraConfig lookupCam;
        KnightClimbSlamWaveConfig wave;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbSlamConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbSlamConfig* pInstance);
        static void Clean(KnightClimbSlamConfig* pInstance);
    };

    struct KnightGrindCameraConfig {
        enum class PlayerOffsetType : int8_t {
            PLAYER_OFFSET_NORMAL = 0,
            PLAYER_OFFSET_ABSOLUTE = 1,
        };

        float fovy;
        float zRot;
        float distance;
        float pathOffset;
        bool usePathVerticalComponent;
        bool usePathNormal;
        float angleSensitivity;
        float angleSensitivityBoost;
        float azimuthOffsetDeg;
        float elevationOffsetDeg;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        PlayerOffsetType playerOffsetType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightGrindCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightGrindCameraConfig* pInstance);
        static void Clean(KnightGrindCameraConfig* pInstance);
    };

    struct KnightGrindTrapConfig {
        int32_t damage;
        bool blowOff;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightGrindTrapConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightGrindTrapConfig* pInstance);
        static void Clean(KnightGrindTrapConfig* pInstance);
    };

    struct KnightGrindLaunchCameraConfig {
        csl::math::Vector3 lookAtOffset;
        csl::math::Vector3 eyeOffset;
        float duration;
        float easeTimeBegin;
        float easeTimeEnd;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightGrindLaunchCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightGrindLaunchCameraConfig* pInstance);
        static void Clean(KnightGrindLaunchCameraConfig* pInstance);
    };

    struct KnightGrindLaunchConfig {
        float outStrength;
        float inStrength;
        float outElev;
        float inElev;
        float speed;
        csl::ut::VariableString landFrameName;
        csl::math::Vector3 landOffset;
        csl::math::Vector3 landRayOffset;
        csl::math::Vector3 landOffsetAfterRaycast;
        KnightGrindLaunchCameraConfig camera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightGrindLaunchConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightGrindLaunchConfig* pInstance);
        static void Clean(KnightGrindLaunchConfig* pInstance);
    };

    struct KnightClimbGrindConfig {
        KnightGrindCameraConfig camera;
        float playerSpeed;
        KnightGrindTrapConfig trap;
        KnightGrindLaunchConfig launch;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbGrindConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbGrindConfig* pInstance);
        static void Clean(KnightClimbGrindConfig* pInstance);
    };

    struct KnightClimbTraceWaveConfig {
        float traceSpeed;
        float traceRotSpeed;
        float traceLifeTime;
        float traceWidth;
        float traceHeight;
        float traceAppearDistance;
        float traceKeepDistance;
        float traceDisappearDistance;
        float traceModelScale;
        float traceModelDiameter;
        float traceModelInterval;
        float traceCollisionDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbTraceWaveConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbTraceWaveConfig* pInstance);
        static void Clean(KnightClimbTraceWaveConfig* pInstance);
    };

    struct KnightClimbConfig {
        KnightClimbIdleConfig idle;
        KnightClimbMoveConfig move;
        KnightClimbSlamConfig slam;
        KnightClimbGrindConfig grind;
        float climbTimeLimit;
        KnightClimbTraceWaveConfig trace;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightClimbConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightClimbConfig* pInstance);
        static void Clean(KnightClimbConfig* pInstance);
    };

    struct KnightBattle1IdleConfig {
        float moveInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1IdleConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1IdleConfig* pInstance);
        static void Clean(KnightBattle1IdleConfig* pInstance);
    };

    struct KnightBattle1MoveConfig {
        float speedAvg;
        float angle1Min;
        float angle1Max;
        float angle2Min;
        float angle2Max;
        float move2WaitDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1MoveConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1MoveConfig* pInstance);
        static void Clean(KnightBattle1MoveConfig* pInstance);
    };

    struct KnightBattle1GuardConfig {
        float guardStaggerMax;
        float damageStaggerMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1GuardConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1GuardConfig* pInstance);
        static void Clean(KnightBattle1GuardConfig* pInstance);
    };

    struct KnightShieldRideConfig {
        float startDistance;
        float startXOffset;
        float startYOffset;
        float startAngle;
        float speed;
        float turnAcc;
        float turnSpeedMax;
        float areaRadius;
        float windPowerMin;
        float windPowerMax;
        float windTimeMin;
        float windTimeMax;
        float windInterval;
        float camRideElevation;
        float camRideDistance;
        csl::math::Vector3 camRideOffset;
        float camCompeteElevation;
        float camCompeteAzimuth;
        float camCompeteDistance;
        float camHitElevation;
        float camHitAzimuth;
        float camHitDistance;
        float camShakeHitLoopMagnitude;
        int32_t camShakeHitLoopFreq;
        float camShakeRejectLoopMagnitude;
        int32_t camShakeRejectLoopFreq;
        uint8_t missileNum;
        float missileInterval;
        float missileStartTime;
        float missileSpeed;
        float missileRotateSpeed;
        float missileMidPosDistance;
        float missileMidPosHeightOffset;
        float missileShotAngle;
        float missileShotStartWait;
        float missileRiseSpeed;
        float missileRiseTime;
        float missileHideTime;
        float missileAppearDistance;
        float missileAppearHeight;
        float missileAppearWidth;
        float missileLifeTime;
        float missileLifeTimeNoHit;
        float missileHitPower;
        float missileHitPowerRateDown;
        float missileHitPowerKeepTime;
        float missileHeightShakeMax;
        float missileHeightShakeMin;
        float missileWidthShake;
        float rejectCompeteDuration;
        float hitShaveDamageSum;
        uint32_t hitShaveHitNum;
        float hitShaveHitInterval;
        float damageRatio;
        float staggerValue;
        float knockbackDistance;
        float durationAfterHit;
        uint32_t missileHitPattern[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightShieldRideConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightShieldRideConfig* pInstance);
        static void Clean(KnightShieldRideConfig* pInstance);
    };

    struct KnightBattle1InterruptConfig {
        float parriedDuration;
        float slowRate;
        float slowTime;
        float cameraOffset;
        float cameraFade;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1InterruptConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1InterruptConfig* pInstance);
        static void Clean(KnightBattle1InterruptConfig* pInstance);
    };

    struct KnightBattle1CyFloat {
        float height;
        float riseDuration;
        float floatDuration;
        float fallDuration;
        float cyFallDuration;
        float cyFallDelay;
        float downDuration;
        float enableDownCounterHPRatio;
        float enableGuardHPRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1CyFloat* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1CyFloat* pInstance);
        static void Clean(KnightBattle1CyFloat* pInstance);
    };

    struct KnightThresholdRingSupplyParam {
        float hpRatio;
        int32_t missileNum;
        float missileWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightThresholdRingSupplyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightThresholdRingSupplyParam* pInstance);
        static void Clean(KnightThresholdRingSupplyParam* pInstance);
    };

    struct KnightRageShieldAttackCameraConfig {
        float interpolateTimeBegin;
        float interpolateTimeEnd;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightRageShieldAttackCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightRageShieldAttackCameraConfig* pInstance);
        static void Clean(KnightRageShieldAttackCameraConfig* pInstance);
    };

    struct KnightRageShieldConfig {
        float modelScale;
        float hitEffectScale;
        float actionGuideOffsetX;
        float actionGuideOffsetY;
        float heightOffset;
        float flySpeed;
        float flyLineWidth;
        float flyLineAfterHitWallLength;
        float flyLineDuration;
        float hitWallTargetingStart;
        float hitWallTargetingAdd;
        float hitWallTargetingSub;
        float hitWallTargeting;
        uint8_t hitWallTargetingCycle;
        float hitWallTargetAreaRadius;
        float hitWallStopDuration;
        float hitWallFlySpeed;
        float hitWallAccStartTime;
        float hitWallAccDuration;
        float parryTargetRange;
        float parryTargetAngVel;
        float parryTargetTimeLimit;
        float parryTargetLineWidth;
        float parryTargetLineLength;
        float parryFlySpeedStart;
        float parryFlySpeed;
        float parryAccStartTime;
        float parryAccDuration;
        float parryFlyLineWidth;
        float parryFlyLineDuration;
        float parryFlySuspendDuration;
        float parryFlySuspendEndDistance;
        KnightRageShieldAttackCameraConfig attackCamera;
        float damageRatio;
        float damageVelocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightRageShieldConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightRageShieldConfig* pInstance);
        static void Clean(KnightRageShieldConfig* pInstance);
    };

    struct KnightRageOverlookCameraConfig {
        float azimuth;
        float elevation;
        float distance;
        float zRoll;
        float fovy;
        csl::math::Vector3 offset;
        float followPlayerRatio;
        float lookCenterRatio;
        float interpolateTimeBegin;
        float interpolateTimeEnd;
        float controlAngAcc;
        float controlAngVel;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightRageOverlookCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightRageOverlookCameraConfig* pInstance);
        static void Clean(KnightRageOverlookCameraConfig* pInstance);
    };

    struct KnightBattle1Rage {
        KnightRageShieldConfig shield;
        KnightRageOverlookCameraConfig normalCamera;
        KnightRageOverlookCameraConfig targetingCamera;
        float moveRestartAnimSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1Rage* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1Rage* pInstance);
        static void Clean(KnightBattle1Rage* pInstance);
    };

    struct KnightAerialCamera {
        float downTime;
        float downCutChangeTime[2];
        csl::math::Vector3 downCamOffset;
        float riseTime;
        csl::math::Vector3 riseCamOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightAerialCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightAerialCamera* pInstance);
        static void Clean(KnightAerialCamera* pInstance);
    };

    struct KnightBattle1Config {
        float closedAreaRadius;
        KnightBattle1IdleConfig idle;
        KnightBattle1MoveConfig move;
        KnightBattle1GuardConfig guard;
        KnightShieldRideConfig shieldRide;
        KnightBattle1InterruptConfig interrupt;
        float normalKnockbackDistance;
        KnightBattle1CyFloat cyFloat;
        KnightThresholdRingSupplyParam ringSupply[3];
        KnightBattle1Rage rage;
        float rageHPRatio;
        float atkSpecialHPRatio;
        KnightAerialCamera aerialCamera;
        float damageEventTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle1Config* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle1Config* pInstance);
        static void Clean(KnightBattle1Config* pInstance);
    };

    struct KnightBattle2RunCamera {
        float azimuth;
        float elevation;
        float distance;
        float zRoll;
        float fovy;
        csl::math::Vector3 frameOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2RunCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2RunCamera* pInstance);
        static void Clean(KnightBattle2RunCamera* pInstance);
    };

    struct KnightBattle2RunConfig {
        float speed;
        float moveWidth;
        float moveHeight;
        csl::math::Vector3 playerOffset;
        csl::math::Vector3 playerOffsetFar;
        csl::math::Vector3 playerOffsetNear;
        csl::math::Vector3 playerOffsetTackle;
        float attackInterval;
        float attackIntervalDelayOnHit;
        KnightBattle2RunCamera camera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2RunConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2RunConfig* pInstance);
        static void Clean(KnightBattle2RunConfig* pInstance);
    };

    struct KnightBattle2ShieldSplineNode {
        enum class XType : uint8_t {
            Zero = 0,
            HitPosX = 1,
            Indivisual = 2,
        };

        bool enable;
        XType xType;
        float xIndivisual;
        float y;
        float z;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2ShieldSplineNode* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2ShieldSplineNode* pInstance);
        static void Clean(KnightBattle2ShieldSplineNode* pInstance);
    };

    struct KnightBattle2ShieldUTurnCameraConfig {
        float duration;
        float interpolateTimeBegin;
        float interpolateTimeEnd;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2ShieldUTurnCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2ShieldUTurnCameraConfig* pInstance);
        static void Clean(KnightBattle2ShieldUTurnCameraConfig* pInstance);
    };

    struct KnightBattle2ShieldConfig {
        KnightBattle2ShieldSplineNode nodesStraight[8];
        float stopPosRatioStraight;
        float stopDecStartPosRatioStraight;
        float stopAccEndPosRatioStraight;
        float stopDurationStraight;
        float speedStraight1;
        float speedStraight2;
        float hitPosXStraight;
        float uTurnEndPosStraight;
        float swordDelayStraight;
        KnightBattle2ShieldSplineNode nodesSlalom[8];
        float stopPosRatioSlalom;
        float stopDecStartPosRatioSlalom;
        float stopAccEndPosRatioSlalom;
        float stopDurationSlalom;
        float speedSlalom1;
        float speedSlalom2;
        float hitPosXSlalom;
        float uTurnEndPosSlalom;
        float magnitudeSlalomFar;
        float magnitudeSlalomNear;
        uint8_t slalomNumMin;
        uint8_t slalomNumMax;
        float slalomEndPosRatio;
        float swordDelaySlalom;
        float uTurnSpeedRatioDuringCam;
        float uTurnSpeedRatioAfterCam;
        KnightBattle2ShieldUTurnCameraConfig uTurnCamera;
        float attackLineWidth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2ShieldConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2ShieldConfig* pInstance);
        static void Clean(KnightBattle2ShieldConfig* pInstance);
    };

    struct KnightBattle2SwordConfig {
        float parriedDuration;
        float animSpeedOnDoubleAtkParried;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2SwordConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2SwordConfig* pInstance);
        static void Clean(KnightBattle2SwordConfig* pInstance);
    };

    struct KnightBattle2InterruptConfig {
        float parriedDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2InterruptConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2InterruptConfig* pInstance);
        static void Clean(KnightBattle2InterruptConfig* pInstance);
    };

    struct KnightBattle2CyFloat {
        float height;
        float riseDuration;
        float floatDuration;
        float fallDuration;
        float cyFallDuration;
        float cyFallDelay;
        float downDuration;
        float enableDownCounterHPRatio;
        float enableGuardHPRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2CyFloat* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2CyFloat* pInstance);
        static void Clean(KnightBattle2CyFloat* pInstance);
    };

    struct KnightBattle2Config {
        KnightBattle2RunConfig run;
        KnightBattle2ShieldConfig shield;
        KnightBattle2SwordConfig sword;
        KnightBattle2InterruptConfig interrupt;
        float knockbackDistance;
        KnightBattle2CyFloat cyFloat;
        KnightAerialCamera aerialCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightBattle2Config* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightBattle2Config* pInstance);
        static void Clean(KnightBattle2Config* pInstance);
    };

    struct KnightSonicSpecialConfig {
        float damageRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightSonicSpecialConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightSonicSpecialConfig* pInstance);
        static void Clean(KnightSonicSpecialConfig* pInstance);
    };

    struct KnightCyFloatSpearConfig {
        csl::math::Vector3 upOffset[8];
        csl::math::Vector3 upRotationAngle[8];
        float upMoveDistanceOffset;
        csl::math::Vector3 downOffset;
        float downMoveDelay;
        float downMoveDistance[3];
        float downMoveDuration[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightCyFloatSpearConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightCyFloatSpearConfig* pInstance);
        static void Clean(KnightCyFloatSpearConfig* pInstance);
    };

    struct KnightAttackSignParam {
        float delayTime[6];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnightAttackSignParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnightAttackSignParam* pInstance);
        static void Clean(KnightAttackSignParam* pInstance);
    };

    struct BossKnightNotifierParam {
        EnemyPracticeNotifierConfig notifierConfigClimb;
        EnemyPracticeNotifierConfig notifierConfigBattle1;
        EnemyPracticeNotifierConfig notifierConfigBattle2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossKnightNotifierParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossKnightNotifierParam* pInstance);
        static void Clean(BossKnightNotifierParam* pInstance);
    };

    struct BossKnightConfig {
        KnightIdleConfig idle;
        KnightClimbConfig climb;
        KnightBattle1Config battle1;
        KnightBattle2Config battle2;
        KnightSonicSpecialConfig sonicSpecial;
        KnightCyFloatSpearConfig cyFloatSpear;
        uint8_t knockbackStaggerCount;
        float thresholdDamageEffectHPRatio[3];
        KnightAttackSignParam attackSign;
        BossKnightNotifierParam notifier;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossKnightConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossKnightConfig* pInstance);
        static void Clean(BossKnightConfig* pInstance);
    };

    struct BossRifleAttackData {
        enum class ActionType : int8_t {
            AT_NONE = 0,
            AT_HAND_L = 1,
            AT_HAND_R = 2,
            AT_SHOT1 = 3,
            AT_SHOT2 = 4,
            AT_SHOT3 = 5,
            AT_SHOT4 = 6,
            AT_QTE_NONE = 7,
            AT_WAIT = 8,
            AT_LASER = 9,
            AT_HOMINGLASER_NORMAL = 10,
            AT_HOMINGLASER_FLY = 11,
            AT_BIT_WAVE = 12,
            AT_BIT_WAVE_END = 13,
            AT_COUNTER_BLOW = 14,
            AT_SP01 = 15,
            AT_SP02 = 16,
            NUM_ACTION_TYPE = 17,
        };

        ActionType attackType;
        csl::ut::VariableString waveName;
        csl::ut::VariableString subWaveName;
        float actionTime;
        int16_t nextStep;
        bool isBitActionReset;
        bool isFlyMoveReverse;
        bool isFlyWait;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleAttackData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleAttackData* pInstance);
        static void Clean(BossRifleAttackData* pInstance);
    };

    struct BossRifleAttackPatternParam {
        BossRifleAttackData attackDatas[16];
        BossRifleAttackData bitBreakAttackDatas[2];
        uint32_t breakBitNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleAttackPatternParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleAttackPatternParam* pInstance);
        static void Clean(BossRifleAttackPatternParam* pInstance);
    };

    struct BossRifleBattleAttackHandLaserPatternParam {
        float intarvalDistance;
        float delay;
        csl::math::Vector3 localStartPos;
        csl::math::Vector3 localEndPos;
        csl::math::Vector3 localStartDir;
        csl::math::Vector3 localEndDir;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleAttackHandLaserPatternParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleAttackHandLaserPatternParam* pInstance);
        static void Clean(BossRifleBattleAttackHandLaserPatternParam* pInstance);
    };

    struct BossRifleBattleAttackHandLaser {
        float bulletRadius;
        float bulletSpeed;
        float wayAngle;
        uint32_t wayNum;
        float limitDistance;
        float blowoffSpeed;
        float outOfControlTime;
        float keepVelocity;
        BossRifleBattleAttackHandLaserPatternParam handLeftPatterns[4];
        BossRifleBattleAttackHandLaserPatternParam handRightPatterns[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleAttackHandLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleAttackHandLaser* pInstance);
        static void Clean(BossRifleBattleAttackHandLaser* pInstance);
    };

    struct BossRifleBattleAttackHomingLaserShotPoint {
        bool isParry;
        bool isUse;
        float shotDirElevation;
        float shotDirRoll;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleAttackHomingLaserShotPoint* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleAttackHomingLaserShotPoint* pInstance);
        static void Clean(BossRifleBattleAttackHomingLaserShotPoint* pInstance);
    };

    struct BossRifleBattleAttackHomingLaserAttackParam {
        csl::ut::VariableString nodeName;
        csl::math::Vector3 nodePos;
        csl::math::Vector3 nodeFront;
        csl::math::Vector3 nodeAxis;
        float straightKeepTime;
        uint32_t parryMax;
        uint32_t num;
        uint32_t countMax;
        float initSpeed;
        float speed;
        float acceleDelay;
        float acceleTime;
        float interval;
        float intervals[8];
        float delay;
        BossRifleBattleAttackHomingLaserShotPoint points[32];
        csl::math::Vector3 fixedCameraEyePos;
        csl::math::Vector3 fixedCameraLookAtPos;
        float fixedCameraDelay;
        float fixedCameraTime;
        float fixedCameraStartEaseTime;
        float fixedCameraEndEaseTime;
        csl::math::Vector3 parryCameraEyePos;
        csl::math::Vector3 parryCameraLookAtPos;
        float parryCameraStartEaseTime;
        float parryCameraEndEaseTime;
        bool isParrySlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleAttackHomingLaserAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleAttackHomingLaserAttackParam* pInstance);
        static void Clean(BossRifleBattleAttackHomingLaserAttackParam* pInstance);
    };

    struct BossRifleBattleAttackHomingLaser {
        float bulletScale;
        float parryMoveTime;
        BossRifleBattleAttackHomingLaserAttackParam headShotParam;
        BossRifleBattleAttackHomingLaserAttackParam headShotFlyParam;
        BossRifleBattleAttackHomingLaserAttackParam normalShotParam;
        bool isDebugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleAttackHomingLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleAttackHomingLaser* pInstance);
        static void Clean(BossRifleBattleAttackHomingLaser* pInstance);
    };

    struct BossRifleBattleZoomCamera {
        float distance;
        float elevation;
        float playerHeight;
        float easeInTime;
        float easeOutTime;
        float changeParamDistanceMin;
        float changeParamDistanceMax;
        float addDistance;
        float addElevation;
        float addPlayerHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleZoomCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleZoomCamera* pInstance);
        static void Clean(BossRifleBattleZoomCamera* pInstance);
    };

    struct BossRifleBattleCameraParam {
        BossRifleBattleZoomCamera normalCamera[2];
        BossRifleBattleZoomCamera flyCamera[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleCameraParam* pInstance);
        static void Clean(BossRifleBattleCameraParam* pInstance);
    };

    struct BossRifleBattleFlyParam {
        float flyHeight;
        float flyRotationSpeed;
        float flyMoveHitDamageDownSpeedRatio;
        float flyMoveHitDamageDownSpeedTime;
        float flyMoveSpeed;
        float flyMoveCircleRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleFlyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleFlyParam* pInstance);
        static void Clean(BossRifleBattleFlyParam* pInstance);
    };

    struct BossRiflePhaseParam {
        float attackWaitTime;
        float attackSpeedRatio;
        uint32_t knockbackCountMax;
        BossRifleAttackPatternParam patterns[4];
        float patternChangeHpRatios[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRiflePhaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRiflePhaseParam* pInstance);
        static void Clean(BossRiflePhaseParam* pInstance);
    };

    struct BossRiflePhaseAttackActionParam {
        enum class ActionAttribute : int8_t {
            AA_NONE = 0,
            AA_ALL = 1,
            AA_FRONT = 2,
            AA_BACK = 3,
            AA_LEFT = 4,
            AA_RIGHT = 5,
        };

        ActionAttribute attribute1;
        ActionAttribute attribute2;
        float useDistanceMin;
        float useDistanceMax;
        float useHeightMin;
        float useHeightMax;
        float useAngleMin;
        float useAngleMax;
        float useAbsAngleOver;
        float useHpRatioMin;
        float useHpRatioMax;
        float useAreaOver;
        uint32_t priority;
        float coolTime;
        float initCoolTime;
        float readyTime;
        uint32_t consecutiveUsesLimit;
        float consecutiveUsesLimitCoolTime;
        bool isCounterUse;
        bool isCounterOnly;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRiflePhaseAttackActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRiflePhaseAttackActionParam* pInstance);
        static void Clean(BossRiflePhaseAttackActionParam* pInstance);
    };

    struct BossRifleCyloopFloatActionParam {
        float landingCounterHPRatio;
        float floatCounterHPRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleCyloopFloatActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleCyloopFloatActionParam* pInstance);
        static void Clean(BossRifleCyloopFloatActionParam* pInstance);
    };

    struct BossRifleParrySlowParam {
        float scale;
        float time;
        float easeOutTime;
        bool cameraSlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleParrySlowParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleParrySlowParam* pInstance);
        static void Clean(BossRifleParrySlowParam* pInstance);
    };

    struct BossRifleParryParam {
        BossRifleParrySlowParam homingLaserParrySlow;
        BossRifleParrySlowParam homingLaserLastParrySlow;
        BossRifleParrySlowParam homingLaserOneShotParrySlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleParryParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleParryParam* pInstance);
        static void Clean(BossRifleParryParam* pInstance);
    };

    struct BossRifleBattleParam {
        enum class ActionType : int8_t {
            AT_NONE = 0,
            AT_HAND_L = 1,
            AT_HAND_R = 2,
            AT_SHOT1 = 3,
            AT_SHOT2 = 4,
            AT_SHOT3 = 5,
            AT_SHOT4 = 6,
            AT_QTE_NONE = 7,
            AT_WAIT = 8,
            AT_LASER = 9,
            AT_HOMINGLASER_NORMAL = 10,
            AT_HOMINGLASER_FLY = 11,
            AT_BIT_WAVE = 12,
            AT_BIT_WAVE_END = 13,
            AT_COUNTER_BLOW = 14,
            AT_SP01 = 15,
            AT_SP02 = 16,
            NUM_ACTION_TYPE = 17,
        };

        BossRiflePhaseParam giantPhaseParams[4];
        BossRiflePhaseAttackActionParam actionParams[16];
        ActionType immediateActions[20];
        BossRifleCyloopFloatActionParam cyloopFloatAction;
        BossRifleBattleAttackHomingLaser attackHomingLaser;
        BossRifleBattleAttackHandLaser attackHandLaser;
        BossRifleBattleFlyParam flyParam;
        BossRifleBattleCameraParam cameraParam;
        BossRifleParryParam parryParam;
        float thresholdDamageEffectHPRatio[3];
        float qteSucceedWaitTimes[4];
        bool isDebugDraw;
        bool isSkip;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBattleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBattleParam* pInstance);
        static void Clean(BossRifleBattleParam* pInstance);
    };

    struct BossRifleNotifierParam {
        EnemyPracticeNotifierConfig notifierConfigBattle1;
        EnemyPracticeNotifierConfig notifierConfigBattle2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleNotifierParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleNotifierParam* pInstance);
        static void Clean(BossRifleNotifierParam* pInstance);
    };

    struct BossRifleConfig {
        BossRifleBattleParam battleParam;
        BossRifleNotifierParam notifierParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleConfig* pInstance);
        static void Clean(BossRifleConfig* pInstance);
    };

    struct BossRifleThresholdRingSupplyParam {
        enum class LaserType : int8_t {
            LT_NONE = 0,
            LT_STRAIGHT = 1,
            LT_HOMING = 2,
        };

        float hpRatio;
        LaserType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleThresholdRingSupplyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleThresholdRingSupplyParam* pInstance);
        static void Clean(BossRifleThresholdRingSupplyParam* pInstance);
    };

    struct BossRifleBeastAttackData {
        enum class ActionType : int8_t {
            AT_NONE = 0,
            AT_HAND_L = 1,
            AT_HAND_R = 2,
            AT_SHOT1 = 3,
            AT_SHOT2 = 4,
            AT_SHOT3 = 5,
            AT_SHOT4 = 6,
            AT_QTE_NONE = 7,
            AT_WAIT = 8,
            AT_LASER = 9,
            AT_HOMINGLASER_NORMAL = 10,
            AT_HOMINGLASER_FLY = 11,
            AT_BIT_WAVE = 12,
            AT_BIT_WAVE_END = 13,
            AT_COUNTER_BLOW = 14,
            AT_SP01 = 15,
            AT_SP02 = 16,
            NUM_ACTION_TYPE = 17,
        };

        ActionType attackType;
        csl::ut::VariableString waveName;
        csl::ut::VariableString subWaveName;
        float actionTime;
        int16_t nextStep;
        bool isBitActionReset;
        bool isFlyMoveReverse;
        bool isFlyWait;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastAttackData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastAttackData* pInstance);
        static void Clean(BossRifleBeastAttackData* pInstance);
    };

    struct BossRifleBeastAttackPatternParam {
        BossRifleBeastAttackData attackDatas[16];
        BossRifleBeastAttackData bitBreakAttackDatas[2];
        uint32_t breakBitNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastAttackPatternParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastAttackPatternParam* pInstance);
        static void Clean(BossRifleBeastAttackPatternParam* pInstance);
    };

    struct BossRifleBeastBattleAttackHandLaserPatternParam {
        float intarvalDistance;
        float delay;
        csl::math::Vector3 localStartPos;
        csl::math::Vector3 localEndPos;
        csl::math::Vector3 localStartDir;
        csl::math::Vector3 localEndDir;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleAttackHandLaserPatternParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleAttackHandLaserPatternParam* pInstance);
        static void Clean(BossRifleBeastBattleAttackHandLaserPatternParam* pInstance);
    };

    struct BossRifleBeastBattleAttackHandLaser {
        float bulletRadius;
        float bulletSpeed;
        float wayAngle;
        uint32_t wayNum;
        float limitDistance;
        float blowoffSpeed;
        float outOfControlTime;
        float keepVelocity;
        BossRifleBeastBattleAttackHandLaserPatternParam handLeftPatterns[4];
        BossRifleBeastBattleAttackHandLaserPatternParam handRightPatterns[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleAttackHandLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleAttackHandLaser* pInstance);
        static void Clean(BossRifleBeastBattleAttackHandLaser* pInstance);
    };

    struct BossRifleBeastBattleAttackHomingLaserShotPoint {
        bool isParry;
        bool isUse;
        float shotDirElevation;
        float shotDirRoll;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleAttackHomingLaserShotPoint* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleAttackHomingLaserShotPoint* pInstance);
        static void Clean(BossRifleBeastBattleAttackHomingLaserShotPoint* pInstance);
    };

    struct BossRifleBeastBattleAttackHomingLaserAttackParam {
        csl::ut::VariableString nodeName;
        csl::math::Vector3 nodePos;
        csl::math::Vector3 nodeFront;
        csl::math::Vector3 nodeAxis;
        float straightKeepTime;
        uint32_t parryMax;
        uint32_t num;
        uint32_t countMax;
        float initSpeed;
        float speed;
        float acceleDelay;
        float acceleTime;
        float interval;
        float intervals[8];
        float delay;
        BossRifleBeastBattleAttackHomingLaserShotPoint points[32];
        csl::math::Vector3 fixedCameraEyePos;
        csl::math::Vector3 fixedCameraLookAtPos;
        float fixedCameraDelay;
        float fixedCameraTime;
        float fixedCameraStartEaseTime;
        float fixedCameraEndEaseTime;
        csl::math::Vector3 parryCameraEyePos;
        csl::math::Vector3 parryCameraLookAtPos;
        float parryCameraStartEaseTime;
        float parryCameraEndEaseTime;
        bool isParrySlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleAttackHomingLaserAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleAttackHomingLaserAttackParam* pInstance);
        static void Clean(BossRifleBeastBattleAttackHomingLaserAttackParam* pInstance);
    };

    struct BossRifleBeastBattleAttackHomingLaser {
        float bulletScale;
        float parryMoveTime;
        BossRifleBeastBattleAttackHomingLaserAttackParam headShotParam;
        BossRifleBeastBattleAttackHomingLaserAttackParam headShotFlyParam;
        BossRifleBeastBattleAttackHomingLaserAttackParam normalShotParam;
        bool isDebugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleAttackHomingLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleAttackHomingLaser* pInstance);
        static void Clean(BossRifleBeastBattleAttackHomingLaser* pInstance);
    };

    struct BossRifleBeastBattleZoomCamera {
        float distance;
        float elevation;
        float playerHeight;
        float easeInTime;
        float easeOutTime;
        float changeParamDistanceMin;
        float changeParamDistanceMax;
        float addDistance;
        float addElevation;
        float addPlayerHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleZoomCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleZoomCamera* pInstance);
        static void Clean(BossRifleBeastBattleZoomCamera* pInstance);
    };

    struct BossRifleBeastBattleCameraParam {
        BossRifleBeastBattleZoomCamera normalCamera[2];
        BossRifleBeastBattleZoomCamera flyCamera[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleCameraParam* pInstance);
        static void Clean(BossRifleBeastBattleCameraParam* pInstance);
    };

    struct BossRifleBeastBattleFlyParam {
        float flyHeight;
        float flyRotationSpeed;
        float flyMoveHitDamageDownSpeedRatio;
        float flyMoveHitDamageDownSpeedTime;
        float flyMoveSpeed;
        float flyMoveCircleRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleFlyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleFlyParam* pInstance);
        static void Clean(BossRifleBeastBattleFlyParam* pInstance);
    };

    struct BossRifleBeastPhaseParam {
        float attackWaitTime;
        float attackSpeedRatio;
        uint32_t knockbackCountMax;
        BossRifleBeastAttackPatternParam patterns[4];
        float patternChangeHpRatios[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastPhaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastPhaseParam* pInstance);
        static void Clean(BossRifleBeastPhaseParam* pInstance);
    };

    struct BossRifleBeastPhaseAttackActionParam {
        enum class ActionAttribute : int8_t {
            AA_NONE = 0,
            AA_ALL = 1,
            AA_FRONT = 2,
            AA_BACK = 3,
            AA_LEFT = 4,
            AA_RIGHT = 5,
        };

        ActionAttribute attribute1;
        ActionAttribute attribute2;
        float useDistanceMin;
        float useDistanceMax;
        float useHeightMin;
        float useHeightMax;
        float useAngleMin;
        float useAngleMax;
        float useAbsAngleOver;
        float useHpRatioMin;
        float useHpRatioMax;
        float useAreaOver;
        uint32_t priority;
        float coolTime;
        float initCoolTime;
        float readyTime;
        uint32_t consecutiveUsesLimit;
        float consecutiveUsesLimitCoolTime;
        bool isCounterUse;
        bool isCounterOnly;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastPhaseAttackActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastPhaseAttackActionParam* pInstance);
        static void Clean(BossRifleBeastPhaseAttackActionParam* pInstance);
    };

    struct BossRifleBeastCyloopFloatActionParam {
        float landingCounterHPRatio;
        float floatCounterHPRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastCyloopFloatActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastCyloopFloatActionParam* pInstance);
        static void Clean(BossRifleBeastCyloopFloatActionParam* pInstance);
    };

    struct BossRifleBeastParrySlowParam {
        float scale;
        float time;
        float easeOutTime;
        bool cameraSlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastParrySlowParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastParrySlowParam* pInstance);
        static void Clean(BossRifleBeastParrySlowParam* pInstance);
    };

    struct BossRifleBeastParryParam {
        BossRifleBeastParrySlowParam homingLaserParrySlow;
        BossRifleBeastParrySlowParam homingLaserLastParrySlow;
        BossRifleBeastParrySlowParam homingLaserOneShotParrySlow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastParryParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastParryParam* pInstance);
        static void Clean(BossRifleBeastParryParam* pInstance);
    };

    struct BossRifleBeastBattleParam {
        enum class ActionType : int8_t {
            AT_NONE = 0,
            AT_HAND_L = 1,
            AT_HAND_R = 2,
            AT_SHOT1 = 3,
            AT_SHOT2 = 4,
            AT_SHOT3 = 5,
            AT_SHOT4 = 6,
            AT_QTE_NONE = 7,
            AT_WAIT = 8,
            AT_LASER = 9,
            AT_HOMINGLASER_NORMAL = 10,
            AT_HOMINGLASER_FLY = 11,
            AT_BIT_WAVE = 12,
            AT_BIT_WAVE_END = 13,
            AT_COUNTER_BLOW = 14,
            AT_SP01 = 15,
            AT_SP02 = 16,
            NUM_ACTION_TYPE = 17,
        };

        BossRifleBeastPhaseParam giantPhaseParams[4];
        BossRifleBeastPhaseAttackActionParam actionParams[16];
        ActionType immediateActions[20];
        BossRifleBeastCyloopFloatActionParam cyloopFloatAction;
        BossRifleBeastBattleAttackHomingLaser attackHomingLaser;
        BossRifleBeastBattleAttackHandLaser attackHandLaser;
        BossRifleBeastBattleFlyParam flyParam;
        BossRifleBeastBattleCameraParam cameraParam;
        BossRifleBeastParryParam parryParam;
        float thresholdDamageEffectHPRatio[3];
        float qteSucceedWaitTimes[4];
        bool isDebugDraw;
        bool isSkip;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastBattleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastBattleParam* pInstance);
        static void Clean(BossRifleBeastBattleParam* pInstance);
    };

    struct BossRifleBeastNotifierParam {
        EnemyPracticeNotifierConfig notifierConfigBattle1;
        EnemyPracticeNotifierConfig notifierConfigBattle2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastNotifierParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastNotifierParam* pInstance);
        static void Clean(BossRifleBeastNotifierParam* pInstance);
    };

    struct BossRifleBeastConfig {
        BossRifleBeastBattleParam battleParam;
        BossRifleBeastNotifierParam notifierParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastConfig* pInstance);
        static void Clean(BossRifleBeastConfig* pInstance);
    };

    struct BossRifleBeastThresholdRingSupplyParam {
        enum class LaserType : int8_t {
            LT_NONE = 0,
            LT_STRAIGHT = 1,
            LT_HOMING = 2,
        };

        float hpRatio;
        LaserType type;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossRifleBeastThresholdRingSupplyParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossRifleBeastThresholdRingSupplyParam* pInstance);
        static void Clean(BossRifleBeastThresholdRingSupplyParam* pInstance);
    };

    struct LaserTargetConfig {
        float scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(LaserTargetConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(LaserTargetConfig* pInstance);
        static void Clean(LaserTargetConfig* pInstance);
    };

    struct SerifConfig {
        bool useHpBorder;
        float hpBorder;
        bool useWaveId;
        uint8_t waveId;
        float delayTime;
        csl::ut::VariableString voice;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SerifConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SerifConfig* pInstance);
        static void Clean(SerifConfig* pInstance);
    };

    struct NotifierConfig {
        uint8_t waveId;
        EnemyPracticeNotifierConfig practiceNotifierConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(NotifierConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(NotifierConfig* pInstance);
        static void Clean(NotifierConfig* pInstance);
    };

    struct UIConfig {
        float borderLifeRatio;
        float sonicDamageRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UIConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UIConfig* pInstance);
        static void Clean(UIConfig* pInstance);
    };

    struct BossTheEndConfig {
        LaserTargetConfig target;
        SerifConfig serifConfigs[26];
        NotifierConfig notifierConfigStart;
        NotifierConfig notifierConfigLaser;
        UIConfig uiConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossTheEndConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossTheEndConfig* pInstance);
        static void Clean(BossTheEndConfig* pInstance);
    };

    struct BossColliderStatus {
        enum class ColliderActiveType : int8_t {
            Always = 0,
            OnContactActive = 1,
            OnContactInactive = 2,
            OnMotionActive = 3,
            OnMotionInactive = 4,
            Manual = 5,
            NUM_COLLIDER_ACTIVE_TYPE = 6,
        };

        enum class ColliderProperty : int16_t {
            CpNone = 0,
            CpBattleUse = 1,
            CpBattleUnuse = 2,
            CpRestPoint = 3,
            CpHomingTarget = 4,
            CpPerceive = 5,
            CpDamage = 6,
            CpAttack = 7,
            CpContactActive = 8,
            CpContactInactive = 9,
            CpMotionActive = 10,
            CpMotionInactive = 11,
            CpManual = 12,
            CpUpperSide = 13,
            CpLowerSide = 14,
            CpFrontSide = 15,
            CpBackSide = 16,
            CpLeftSide = 17,
            CpRightSide = 18,
            CpPointA = 19,
            CpPointB = 20,
            CpPointC = 21,
            CpPointD = 22,
            CpCyloopDownUnuse = 23,
            CpDummyDamage = 24,
            NUM_COLLIDER_PROPERTY = 25,
        };

        ColliderActiveType type;
        ColliderProperty propertys[4];
        csl::ut::VariableString text;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossColliderStatus* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossColliderStatus* pInstance);
        static void Clean(BossColliderStatus* pInstance);
    };

    struct BossAttackCollisionParam {
        enum class AttackType : int8_t {
            AT_NONE = 0,
            AT_BLOWOFF = 1,
            AT_SLAMDOWNWARD = 2,
            AT_KILLING = 3,
            AT_NOTPARRY = 4,
            AT_NOTDAMAGE = 5,
            NUM_ATTACK_TYPE = 6,
        };

        bool isUse;
        csl::ut::VariableString attachNodeName;
        float damageVelocityRaito;
        AttackType types[4];
        BossColliderStatus status;
        float size;
        csl::math::Vector3 offset;
        csl::ut::VariableString parryCounterTargetCollisionName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossAttackCollisionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossAttackCollisionParam* pInstance);
        static void Clean(BossAttackCollisionParam* pInstance);
    };

    struct BossAttackCollisionConfig {
        BossAttackCollisionParam attackCollisions[64];
        bool isDebugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossAttackCollisionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossAttackCollisionConfig* pInstance);
        static void Clean(BossAttackCollisionConfig* pInstance);
    };

    struct PlayerMoveableRangeParam {
        csl::ut::Array<uint32_t> initPositions;
        csl::ut::VariableString heightTargetNodeName;
        float heightMoveSpeed;
        float bossToPlayerDistanceMin;
        float bossToPlayerDistanceMax;
        float offsetHeightMin;
        float offsetHeightMax;
        float areaDistanceMin;
        float areaDistanceMax;
        float playerSpawnDistance;
        float playerRespawnDistance;
        float playerRespawnDistance2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerMoveableRangeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerMoveableRangeParam* pInstance);
        static void Clean(PlayerMoveableRangeParam* pInstance);
    };

    struct BossPhaseParam {
        bool isUse;
        bool isUsePillar;
        float phaseChangeHpRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossPhaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossPhaseParam* pInstance);
        static void Clean(BossPhaseParam* pInstance);
    };

    struct BossLockOnCameraParam {
        enum class EaseType : int8_t {
            ET_Sin = 0,
            ET_Cubic = 1,
            ET_Quadratic = 2,
        };

        float easeTime;
        EaseType easeType;
        csl::ut::VariableString mainLookAtNodeName;
        csl::math::Vector3 mainLookOffsetPos;
        csl::ut::VariableString subLookAtNodeName;
        csl::math::Vector3 subLookOffsetPos;
        float distance;
        csl::math::Vector3 playerOffsetPos;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossLockOnCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossLockOnCameraParam* pInstance);
        static void Clean(BossLockOnCameraParam* pInstance);
    };

    struct BossStatusConfig {
        uint32_t healthPoint;
        float stunTime;
        float maxStunPoint[3];
        float maxStaggerPoint[5];
        uint16_t exp;
        PlayerMoveableRangeParam moveRangeParam;
        PlayerMoveableRangeParam cyloopDamageMoveRangeParam;
        BossPhaseParam phaseParams[8];
        BossLockOnCameraParam cameraParam;
        bool isDebugDraw;
        uint32_t debugDrawPhaseIndex;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossStatusConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossStatusConfig* pInstance);
        static void Clean(BossStatusConfig* pInstance);
    };

    struct BossPillarParam {
        enum class GimmickType : int8_t {
            GT_A = 0,
            GT_B = 1,
            GT_C = 2,
            GT_D = 3,
            GT_E = 4,
            NUM_GIMMICK_TYPE = 5,
        };

        enum class AttackType : int8_t {
            AT_A = 0,
            AT_B = 1,
            AT_C = 2,
            AT_D = 3,
            AT_E = 4,
            NUM_ATTACK_TYPE = 5,
        };

        bool isUse;
        float gimmickPhaseTime;
        float attackPhaseTime;
        bool isUnique;
        GimmickType gimmickType;
        float gimmickIntervalTime;
        AttackType attackType;
        float attackIntervalTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossPillarParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossPillarParam* pInstance);
        static void Clean(BossPillarParam* pInstance);
    };

    struct BossPillarConfig {
        enum class GimmickType : int8_t {
            GT_A = 0,
            GT_B = 1,
            GT_C = 2,
            GT_D = 3,
            GT_E = 4,
            NUM_GIMMICK_TYPE = 5,
        };

        enum class AttackType : int8_t {
            AT_A = 0,
            AT_B = 1,
            AT_C = 2,
            AT_D = 3,
            AT_E = 4,
            NUM_ATTACK_TYPE = 5,
        };

        GimmickType gimmickTypeAll;
        float gimmickIntervalTimeAll;
        AttackType attackTypeAll;
        float attackIntervalTimeAll;
        BossPillarParam pillars[32];
        csl::ut::VariableString spawnPositionName;
        uint32_t pillarHealthPoint;
        uint32_t pillarBreakDamage;
        float pillarBreakStun;
        bool isDebugDraw;
        uint32_t DebugDrawType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossPillarConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossPillarConfig* pInstance);
        static void Clean(BossPillarConfig* pInstance);
    };

    struct BossPerceiveCollisionParam {
        enum class CollisionType : int8_t {
            CT_SPHERE = 0,
            CT_CAPSULE = 1,
            CT_CYLINDER = 2,
            CT_BOX = 3,
            NUM_COLLISION_TYPE = 4,
        };

        bool isUse;
        int16_t priority;
        CollisionType type;
        csl::ut::VariableString attachNodeName;
        csl::ut::VariableString name;
        BossColliderStatus status;
        csl::math::Vector3 size;
        csl::math::Vector3 offset;
        csl::math::Vector3 rotation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossPerceiveCollisionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossPerceiveCollisionParam* pInstance);
        static void Clean(BossPerceiveCollisionParam* pInstance);
    };

    struct BossPerceivePartsWithCollisionConfig {
        BossPerceiveCollisionParam perceiveCollisions[64];
        bool isDebugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossPerceivePartsWithCollisionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossPerceivePartsWithCollisionConfig* pInstance);
        static void Clean(BossPerceivePartsWithCollisionConfig* pInstance);
    };

    struct BossHomingPointParam {
        BossColliderStatus status;
        float distance;
        float nextSearchDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossHomingPointParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossHomingPointParam* pInstance);
        static void Clean(BossHomingPointParam* pInstance);
    };

    struct BossMinionParam {
        uint32_t num;
        float interval;
        float liveTime;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossMinionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossMinionParam* pInstance);
        static void Clean(BossMinionParam* pInstance);
    };

    struct BossTrigerParam {
        enum class Shape : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_CAPSULE = 3,
        };

        Shape ShapeType;
        float CollisionWidth;
        float CollisionHeight;
        float CollisionDepth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossTrigerParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossTrigerParam* pInstance);
        static void Clean(BossTrigerParam* pInstance);
    };

    struct BossStickParam {
        float phaseTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossStickParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossStickParam* pInstance);
        static void Clean(BossStickParam* pInstance);
    };

    struct BossDamagePointParam {
        bool isCyloopDownUnuse;
        csl::ut::VariableString text;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDamagePointParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDamagePointParam* pInstance);
        static void Clean(BossDamagePointParam* pInstance);
    };

    struct BossDashCirclPointParam {
        int32_t focusGeometryIndex;
        int32_t focusTriangleIndex;
        float sizeScale;
        float impulseSpeed;
        float ocTime;
        float slowRateBoss;
        float slowRatePlayer;
        float slowTime;
        float slowEaseInTime;
        float slowEaseOutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDashCirclPointParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDashCirclPointParam* pInstance);
        static void Clean(BossDashCirclPointParam* pInstance);
    };

    struct BossMeshFrameParam {
        enum class PointType : int8_t {
            PT_HOMINGPOINT = 0,
            PT_HEROSAGE = 1,
            PT_MINIONGENERATOR = 2,
            PT_TRIGGER = 3,
            PT_ANCHOR = 4,
            PT_DAMAGEPOINT = 5,
            PT_STICK = 6,
            PT_DAMAGEEFFECT = 7,
            PT_DASHCIRCLE = 8,
            NUM_POINT_TYPE = 9,
        };

        bool isUse;
        uint32_t geometryIndex;
        uint32_t triangleIndex;
        PointType type;
        BossHomingPointParam homingPoint;
        BossMinionParam minionParam;
        BossTrigerParam trigger;
        BossStickParam stickParam;
        BossDamagePointParam damagePoint;
        BossDashCirclPointParam dashCirclPoint;
        int32_t linkNums[5];
        csl::math::Vector3 offsetPos;
        csl::math::Vector3 offsetRot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossMeshFrameParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossMeshFrameParam* pInstance);
        static void Clean(BossMeshFrameParam* pInstance);
    };

    struct BossMeshFrameConfig {
        BossMeshFrameParam meshShapeKeyFrames[256];
        bool isDebugDraw;
        bool isDebugDrawPoint;
        bool isDebugDrawMesh;
        bool isDebugDrawMeshIndivid;
        float debugDrawMeshTriangleDistance;
        uint32_t debugDrawMeshTriangleNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossMeshFrameConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossMeshFrameConfig* pInstance);
        static void Clean(BossMeshFrameConfig* pInstance);
    };

    struct BossBattlePhaseCollisionParam {
        bool isUse;
        csl::ut::VariableString attachNodeName;
        csl::ut::VariableString name;
        float size;
        csl::math::Vector3 offset;
        csl::math::Vector3 rotation;
        bool isParryActive;
        float cyloopRadius;
        bool onlyRigidBody;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossBattlePhaseCollisionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossBattlePhaseCollisionParam* pInstance);
        static void Clean(BossBattlePhaseCollisionParam* pInstance);
    };

    struct BossBattlePhaseCollisionConfig {
        BossBattlePhaseCollisionParam battleCollisions[16];
        bool isDebugDraw;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossBattlePhaseCollisionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossBattlePhaseCollisionConfig* pInstance);
        static void Clean(BossBattlePhaseCollisionConfig* pInstance);
    };

    struct BossDropRingConfig {
        uint32_t ringNumQuickCyloopUp;
        uint32_t ringNumQuickCyloopDown;
        uint32_t ringNumSonicSpecial;
        float ringSpawnDistance;
        float ringSuckedVelocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossDropRingConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossDropRingConfig* pInstance);
        static void Clean(BossDropRingConfig* pInstance);
    };

    struct BossBaseConfig {
        BossStatusConfig status;
        BossPillarConfig pillar;
        BossPerceivePartsWithCollisionConfig perceivPartsWithCollision;
        BossMeshFrameConfig meshShapeKeyFrame;
        BossAttackCollisionConfig attackCollision;
        BossBattlePhaseCollisionConfig battleCollision;
        BossDropRingConfig dropRing;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossBaseConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossBaseConfig* pInstance);
        static void Clean(BossBaseConfig* pInstance);
    };

    struct BossResourceInfo {
        csl::ut::VariableString modelName;
        csl::ut::VariableString animName;
        csl::math::Vector3 scale;
        csl::ut::VariableString stageName;
        csl::math::Vector3 stagePos;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossResourceInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossResourceInfo* pInstance);
        static void Clean(BossResourceInfo* pInstance);
    };

    struct HoldPoint {
        csl::ut::VariableString nodeName;
        csl::math::Vector3 offset;
        csl::math::Vector3 rot;
        csl::ut::VariableString tagName;
        int32_t nextPointId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HoldPoint* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HoldPoint* pInstance);
        static void Clean(HoldPoint* pInstance);
    };

    struct HoldPointParameter {
        HoldPoint holdPoints[128];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HoldPointParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HoldPointParameter* pInstance);
        static void Clean(HoldPointParameter* pInstance);
    };

    struct CollisionPart {
        enum class Shape : int8_t {
            SHAPE_SPHERER = 0,
            SHAPE_BOX = 1,
            SHAPE_CYLINDER = 2,
            SHAPE_CAPCULE = 3,
        };

        csl::ut::VariableString nodeName;
        Shape shape;
        bool isPhysics;
        csl::math::Vector3 size;
        csl::math::Vector3 offset;
        csl::math::Vector3 rot;
        csl::ut::VariableString tagName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CollisionPart* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CollisionPart* pInstance);
        static void Clean(CollisionPart* pInstance);
    };

    struct CollisionPartParameter {
        CollisionPart colParts[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CollisionPartParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CollisionPartParameter* pInstance);
        static void Clean(CollisionPartParameter* pInstance);
    };

    struct BossCommonParameters {
        BossResourceInfo resource;
        HoldPointParameter holdParam;
        CollisionPartParameter colParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossCommonParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossCommonParameters* pInstance);
        static void Clean(BossCommonParameters* pInstance);
    };

    struct BossStatusParameterBase {
        int32_t maxHp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossStatusParameterBase* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossStatusParameterBase* pInstance);
        static void Clean(BossStatusParameterBase* pInstance);
    };

    struct ObjCameraSpawner {
        bool IsCameraView;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCameraSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCameraSpawner* pInstance);
        static void Clean(ObjCameraSpawner* pInstance);
    };

    struct FSRow {
        uint8_t columns[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FSRow* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FSRow* pInstance);
        static void Clean(FSRow* pInstance);
    };

    struct FSLayer {
        FSRow rows[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FSLayer* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FSLayer* pInstance);
        static void Clean(FSLayer* pInstance);
    };

    struct FreeShape {
        uint8_t numLayers;
        uint8_t numRows;
        uint8_t numColumns;
        csl::math::Vector3 offsetToTopLeft;
        FSLayer layers[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FreeShape* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FreeShape* pInstance);
        static void Clean(FreeShape* pInstance);
    };

    struct Obj3DPuzzleBlockConfig {
        FreeShape freeShapes[29];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Obj3DPuzzleBlockConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Obj3DPuzzleBlockConfig* pInstance);
        static void Clean(Obj3DPuzzleBlockConfig* pInstance);
    };

    struct ActionChainScoreParameter {
        uint32_t score;
        uint32_t level1Meter;
        uint32_t level2Meter;
        uint32_t level3Meter;
        uint32_t level4Meter;
        uint32_t level5Meter;
        uint32_t level6Meter;
        uint32_t level7Meter;
        uint32_t level8Meter;
        uint32_t level9Meter;
        float delay;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainScoreParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainScoreParameter* pInstance);
        static void Clean(ActionChainScoreParameter* pInstance);
    };

    struct ActionChainAttackLevelParameter {
        uint32_t level1Param;
        uint32_t level99Param;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainAttackLevelParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainAttackLevelParameter* pInstance);
        static void Clean(ActionChainAttackLevelParameter* pInstance);
    };

    struct ActionChainAttackScoreParameter {
        ActionChainAttackLevelParameter score;
        ActionChainAttackLevelParameter level1Meter;
        ActionChainAttackLevelParameter level2Meter;
        ActionChainAttackLevelParameter level3Meter;
        ActionChainAttackLevelParameter level4Meter;
        ActionChainAttackLevelParameter level5Meter;
        ActionChainAttackLevelParameter level6Meter;
        ActionChainAttackLevelParameter level7Meter;
        ActionChainAttackLevelParameter level8Meter;
        ActionChainAttackLevelParameter level9Meter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainAttackScoreParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainAttackScoreParameter* pInstance);
        static void Clean(ActionChainAttackScoreParameter* pInstance);
    };

    struct ActionChainIntervalScoreParameter {
        float intervalTime;
        uint32_t score;
        uint32_t level1Meter;
        uint32_t level2Meter;
        uint32_t level3Meter;
        uint32_t level4Meter;
        uint32_t level5Meter;
        uint32_t level6Meter;
        uint32_t level7Meter;
        uint32_t level8Meter;
        uint32_t level9Meter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainIntervalScoreParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainIntervalScoreParameter* pInstance);
        static void Clean(ActionChainIntervalScoreParameter* pInstance);
    };

    struct ActionChainBoostScoreParameter {
        float intervalTime;
        float minSpeed;
        float maxSpeed;
        ActionChainAttackLevelParameter score;
        ActionChainAttackLevelParameter level1Meter;
        ActionChainAttackLevelParameter level2Meter;
        ActionChainAttackLevelParameter level3Meter;
        ActionChainAttackLevelParameter level4Meter;
        ActionChainAttackLevelParameter level5Meter;
        ActionChainAttackLevelParameter level6Meter;
        ActionChainAttackLevelParameter level7Meter;
        ActionChainAttackLevelParameter level8Meter;
        ActionChainAttackLevelParameter level9Meter;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainBoostScoreParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainBoostScoreParameter* pInstance);
        static void Clean(ActionChainBoostScoreParameter* pInstance);
    };

    struct ActionChainSpinBoostScoreParameter {
        float intervalTime;
        float minSpeed;
        float maxSpeed;
        ActionChainAttackLevelParameter score;
        ActionChainAttackLevelParameter level1Meter;
        ActionChainAttackLevelParameter level2Meter;
        ActionChainAttackLevelParameter level3Meter;
        ActionChainAttackLevelParameter level4Meter;
        ActionChainAttackLevelParameter level5Meter;
        ActionChainAttackLevelParameter level6Meter;
        ActionChainAttackLevelParameter level7Meter;
        ActionChainAttackLevelParameter level8Meter;
        ActionChainAttackLevelParameter level9Meter;
        float minHeight;
        float maxHeight;
        float maxHeightMagnification;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainSpinBoostScoreParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainSpinBoostScoreParameter* pInstance);
        static void Clean(ActionChainSpinBoostScoreParameter* pInstance);
    };

    struct ActionChainActionParameter {
        ActionChainScoreParameter dashRollerScore;
        ActionChainScoreParameter dashPanelScore;
        ActionChainScoreParameter jumpBoardScore;
        ActionChainScoreParameter jumpSelecterScore;
        ActionChainScoreParameter poleScore;
        ActionChainScoreParameter selectCannonScore;
        ActionChainScoreParameter springScore;
        ActionChainScoreParameter wideSpringScore;
        ActionChainScoreParameter springClassicScore;
        ActionChainScoreParameter balloonScore;
        ActionChainScoreParameter upReelScore;
        ActionChainScoreParameter wallJumpScore;
        ActionChainScoreParameter propellerSpringScore;
        ActionChainScoreParameter springPoleScore;
        ActionChainScoreParameter dashRingScore;
        ActionChainAttackScoreParameter acceleCombo1Score;
        ActionChainAttackScoreParameter acceleCombo2Score;
        ActionChainAttackScoreParameter comboFinishScore;
        ActionChainAttackScoreParameter acceleRushCombo1Score;
        ActionChainAttackScoreParameter acceleRushCombo2Score;
        ActionChainAttackScoreParameter acceleRushComboFinishScore;
        ActionChainAttackScoreParameter chargeAttackScore;
        ActionChainAttackScoreParameter smashScore;
        ActionChainAttackScoreParameter recoverySmashScore;
        ActionChainAttackScoreParameter sonicBoomScore;
        ActionChainAttackScoreParameter crasherScore;
        ActionChainAttackScoreParameter loopKickScore;
        ActionChainAttackScoreParameter spinSlashScore;
        ActionChainAttackScoreParameter stompingAttackScore;
        ActionChainAttackScoreParameter homingShotScore;
        ActionChainAttackScoreParameter crossSlashScore;
        ActionChainScoreParameter ringScore;
        ActionChainScoreParameter gismoScore;
        ActionChainScoreParameter homingScore;
        ActionChainAttackScoreParameter enemyHomingScore;
        ActionChainScoreParameter airTrickScore;
        ActionChainScoreParameter chainBoosterScore;
        ActionChainScoreParameter parryScore;
        ActionChainAttackScoreParameter quickCyloopScore;
        ActionChainScoreParameter defeatEnemyScore;
        ActionChainScoreParameter defeatMiniBossScore;
        ActionChainAttackScoreParameter slingShotScore;
        ActionChainScoreParameter rippleLaserScore;
        ActionChainIntervalScoreParameter grindRailScore;
        ActionChainIntervalScoreParameter pulleyScore;
        ActionChainIntervalScoreParameter fanScore;
        ActionChainIntervalScoreParameter wallRunScore;
        ActionChainBoostScoreParameter boostScore;
        ActionChainIntervalScoreParameter powerBoostScore;
        ActionChainIntervalScoreParameter sandSkiScore;
        ActionChainIntervalScoreParameter acceleRailScore;
        ActionChainSpinBoostScoreParameter spinBoostScore;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainActionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainActionParameter* pInstance);
        static void Clean(ActionChainActionParameter* pInstance);
    };

    struct ActionChainMeterParameter {
        uint32_t meterMax;
        float meterDecreaseTime;
        uint32_t meterDecrease;
        float decreaseWaitTime;
        float decreasePercent;
        float decreaseWaitTimeAddMeter;
        float meterResetDelayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainMeterParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainMeterParameter* pInstance);
        static void Clean(ActionChainMeterParameter* pInstance);
    };

    struct ActionChainParameter {
        ActionChainActionParameter actionParam;
        ActionChainMeterParameter level1MeterParam;
        ActionChainMeterParameter level2MeterParam;
        ActionChainMeterParameter level3MeterParam;
        ActionChainMeterParameter level4MeterParam;
        ActionChainMeterParameter level5MeterParam;
        ActionChainMeterParameter level6MeterParam;
        ActionChainMeterParameter level7MeterParam;
        ActionChainMeterParameter level8MeterParam;
        ActionChainMeterParameter level9MeterParam;
        float gimmickReuseTime;
        bool isChainBoosterLevelUp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainParameter* pInstance);
        static void Clean(ActionChainParameter* pInstance);
    };

    struct ActionChainScoreThresholdParameter {
        uint32_t scoreS;
        uint32_t scoreA;
        uint32_t scoreB;
        uint32_t scoreC;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainScoreThresholdParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainScoreThresholdParameter* pInstance);
        static void Clean(ActionChainScoreThresholdParameter* pInstance);
    };

    struct ActionChainPlaceParameter {
        float time;
        ActionChainScoreThresholdParameter scoreEasy;
        ActionChainScoreThresholdParameter scoreNormal;
        ActionChainScoreThresholdParameter scoreHard;
        ActionChainScoreThresholdParameter scoreVeryHard;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainPlaceParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainPlaceParameter* pInstance);
        static void Clean(ActionChainPlaceParameter* pInstance);
    };

    struct ActionChainStageParameter {
        ActionChainPlaceParameter placeParam[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainStageParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainStageParameter* pInstance);
        static void Clean(ActionChainStageParameter* pInstance);
    };

    struct GimmickCameraParam {
        float interoplateTimeActivate;
        float interoplateTimeDeactivate;
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 cameraPosOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GimmickCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GimmickCameraParam* pInstance);
        static void Clean(GimmickCameraParam* pInstance);
    };

    struct ObjBattingMachineConfig {
        GimmickCameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBattingMachineConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBattingMachineConfig* pInstance);
        static void Clean(ObjBattingMachineConfig* pInstance);
    };

    struct LargeBitLaserParameter {
        float rangeMin;
        float rangeMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(LargeBitLaserParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(LargeBitLaserParameter* pInstance);
        static void Clean(LargeBitLaserParameter* pInstance);
    };

    struct SmallBitLaserBulletParameter {
        float bulletRadius;
        float bulletMoveLimitDistance;
        float bitHp;
        float rotDamageAngleSpeed;
        float rotDamageSize;
        float hitDamageNotAttackTime;
        float blowoffSpeed;
        float outOfControlTime;
        float keepVelocity;
        float muzzleEffectMinTime;
        uint8_t dropRingNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SmallBitLaserBulletParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SmallBitLaserBulletParameter* pInstance);
        static void Clean(SmallBitLaserBulletParameter* pInstance);
    };

    struct SmallBitAttackPatternParameter {
        enum class BulletType : uint8_t {
            Normal = 0,
            Normal2 = 1,
            Laser = 2,
            Homing = 3,
        };

        enum class RotType : uint8_t {
            Rotation = 0,
            RoundTrip = 1,
            Aim = 2,
            Fix = 3,
        };

        enum class CameraId : uint8_t {
            Invalid = 0,
            Rotate = 1,
            Trace = 2,
            Sub = 3,
            Num = 4,
        };

        enum class FormationId : uint8_t {
            Default = 0,
            FanShaped = 1,
        };

        bool isParry;
        float time;
        float angleSpeed;
        BulletType bulletType;
        RotType rotType;
        float rotAngle;
        float phaseRotTime;
        uint32_t shootNum;
        float shootSpeed;
        float addShootSpeed;
        float shootAccel;
        float shootAccelMax;
        float shootAccelDelay;
        uint8_t wayNum;
        float wayAngle;
        float shootTime;
        float phaseShootTime;
        uint32_t periodShootCool;
        float periodShootCoolTime;
        float homingAccuracy;
        float homingDelay;
        float homingLimitAngle;
        bool isHomingLowFly;
        CameraId overlookingId;
        float waveRotationSpeed;
        float flyMoveSpeed;
        FormationId formationId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SmallBitAttackPatternParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SmallBitAttackPatternParameter* pInstance);
        static void Clean(SmallBitAttackPatternParameter* pInstance);
    };

    struct SmallBitSetPatternParameter {
        csl::ut::VariableString text;
        SmallBitAttackPatternParameter param;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SmallBitSetPatternParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SmallBitSetPatternParameter* pInstance);
        static void Clean(SmallBitSetPatternParameter* pInstance);
    };

    struct SmallBitFormationFanShaped {
        float distance;
        float height;
        float radius;
        float angleMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SmallBitFormationFanShaped* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SmallBitFormationFanShaped* pInstance);
        static void Clean(SmallBitFormationFanShaped* pInstance);
    };

    struct SmallBitFormationParameter {
        float changeTime;
        float changeDelay;
        float changeOffsetHeight;
        SmallBitFormationFanShaped fanShaped;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SmallBitFormationParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SmallBitFormationParameter* pInstance);
        static void Clean(SmallBitFormationParameter* pInstance);
    };

    struct BossBitConfig {
        LargeBitLaserParameter largeBitLaserParam;
        SmallBitLaserBulletParameter smallBitLaserParam;
        SmallBitSetPatternParameter smallBitPatternDatas[64];
        SmallBitFormationParameter smallBitFormation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BossBitConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BossBitConfig* pInstance);
        static void Clean(BossBitConfig* pInstance);
    };

    struct ObjBossRingSupplyConfig {
        RingParameter ringParam;
        float requestTime;
        float accessDistance;
        uint32_t numRings[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBossRingSupplyConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBossRingSupplyConfig* pInstance);
        static void Clean(ObjBossRingSupplyConfig* pInstance);
    };

    struct ExplosionParameter {
        csl::math::Vector3 centerPosOffsetMin;
        csl::math::Vector3 centerPosOffsetMax;
        float range;
        float powerMin;
        float powerMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ExplosionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ExplosionParameter* pInstance);
        static void Clean(ExplosionParameter* pInstance);
    };

    struct ImpulseParameter {
        csl::math::Vector3 impulseDir;
        float powerMin;
        float powerMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ImpulseParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ImpulseParameter* pInstance);
        static void Clean(ImpulseParameter* pInstance);
    };

    struct DebrisPhaseParameter {
        float marginTime;
        float nextTime;
        float gravity;
        float moveStopTime;
        bool damping;
        ExplosionParameter explosionParam;
        ImpulseParameter impulseParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisPhaseParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisPhaseParameter* pInstance);
        static void Clean(DebrisPhaseParameter* pInstance);
    };

    struct EffectDebrisParameter {
        DebrisPhaseParameter debrisPhaseParameters[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EffectDebrisParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EffectDebrisParameter* pInstance);
        static void Clean(EffectDebrisParameter* pInstance);
    };

    struct ObjEffectDebrisParameters {
        EffectDebrisParameter effectDebrisParameters[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjEffectDebrisParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjEffectDebrisParameters* pInstance);
        static void Clean(ObjEffectDebrisParameters* pInstance);
    };

    struct ElectricLineConnectData {
        int32_t challengeNo0;
        int32_t challengeNo1;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ElectricLineConnectData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ElectricLineConnectData* pInstance);
        static void Clean(ElectricLineConnectData* pInstance);
    };

    struct ElectricLineConnectParameter {
        int32_t challengeNo0;
        int32_t challengeNo1;
        ElectricLineConnectData data[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ElectricLineConnectParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ElectricLineConnectParameter* pInstance);
        static void Clean(ElectricLineConnectParameter* pInstance);
    };

    struct ElectricLineParameter {
        ElectricLineConnectParameter connect[200];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ElectricLineParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ElectricLineParameter* pInstance);
        static void Clean(ElectricLineParameter* pInstance);
    };

    struct DebrisData {
        float gravity;
        float lifeTime;
        float mass;
        float friction;
        float explosionScale;
        float impulseScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DebrisData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DebrisData* pInstance);
        static void Clean(DebrisData* pInstance);
    };

    struct EffectData {
        csl::ut::VariableString effectName;
        bool linkMotionStop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EffectData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EffectData* pInstance);
        static void Clean(EffectData* pInstance);
    };

    struct GismoBasicParam {
        csl::ut::VariableString modelName;
        csl::ut::VariableString skeltonName;
        bool noInstance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GismoBasicParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GismoBasicParam* pInstance);
        static void Clean(GismoBasicParam* pInstance);
    };

    struct GismoCollision {
        enum class ShapeType : int8_t {
            SHAPE_BOX = 0,
            SHAPE_SPHERE = 1,
            SHAPE_CAPSULE = 2,
            SHAPE_CYLINDER = 3,
            SHAPE_MESH = 4,
            SHAPE_NONE = 5,
        };

        enum class BasePoint : int8_t {
            BASE_CENTER = 0,
            BASE_Z_PLANE = 1,
            BASE_X_PLANE = 2,
            BASE_Y_PLANE = 3,
        };

        ShapeType shape;
        BasePoint basePoint;
        float width;
        float height;
        float depth;
        csl::ut::VariableString meshName;
        csl::math::Vector3 shapeOffset;
        float shapeSizeOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GismoCollision* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GismoCollision* pInstance);
        static void Clean(GismoCollision* pInstance);
    };

    struct PhysicsParam {
        float mass;
        float friction;
        float gravityFactor;
        float restitution;
        float linearDamping;
        float angularDamping;
        float maxLinearVelocity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PhysicsParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PhysicsParam* pInstance);
        static void Clean(PhysicsParam* pInstance);
    };

    struct GismoRegidBody {
        enum class RigidBodyType : int8_t {
            RIGID_BODY_NONE = 0,
            RIGID_BODY_STATIC = 1,
            RIGID_BODY_DYNAMIC = 2,
        };

        enum class RigidBodyMaterial : int8_t {
            RIGID_BODY_MAT_NONE = 0,
            RIGID_BODY_MAT_WOOD = 1,
            RIGID_BODY_MAT_IRON = 2,
            NUM_RIGID_BODY_MATS = 3,
        };

        RigidBodyType rigidBodyType;
        RigidBodyMaterial rigidBodyMaterial;
        PhysicsParam physicsParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GismoRegidBody* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GismoRegidBody* pInstance);
        static void Clean(GismoRegidBody* pInstance);
    };

    struct MotionData {
        csl::ut::VariableString motionName;
        bool syncFrame;
        bool stopEndFrame;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MotionData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MotionData* pInstance);
        static void Clean(MotionData* pInstance);
    };

    struct MirageAnimData {
        csl::ut::VariableString texSrtAnimName[3];
        csl::ut::VariableString texPatAnimName[3];
        csl::ut::VariableString matAnimName[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MirageAnimData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MirageAnimData* pInstance);
        static void Clean(MirageAnimData* pInstance);
    };

    struct ProgramMotionData {
        enum class MotionType : uint8_t {
            MOTION_SWING = 0,
            MOTION_ROTATE = 1,
            MOTION_LINEAR_SWING = 2,
        };

        MotionType motionType;
        csl::math::Vector3 axis;
        float power;
        float speedScale;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ProgramMotionData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ProgramMotionData* pInstance);
        static void Clean(ProgramMotionData* pInstance);
    };

    struct SoundData {
        csl::ut::VariableString cueName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SoundData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SoundData* pInstance);
        static void Clean(SoundData* pInstance);
    };

    struct KillData {
        enum class KillType : int8_t {
            KILL_TYPE_NOT_KILL = 0,
            KILL_TYPE_KILL = 1,
            KILL_TYPE_BREAK = 2,
            KILL_TYPE_MOTION = 3,
        };

        KillType killType;
        float killTime;
        csl::ut::VariableString breakMotionName;
        DebrisData debrisData;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KillData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KillData* pInstance);
        static void Clean(KillData* pInstance);
    };

    struct ReactionData {
        MotionData motionData;
        MirageAnimData mirageAnimData;
        ProgramMotionData programMotionData;
        EffectData effectData;
        SoundData soundData;
        KillData killData;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReactionData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReactionData* pInstance);
        static void Clean(ReactionData* pInstance);
    };

    struct GismoConfigDesignData {
        float rangeIn;
        float rangeDistance;
        GismoBasicParam basicParam;
        GismoCollision collision;
        GismoRegidBody rigidBody;
        ReactionData reactionIdle;
        ReactionData reactionEnter;
        ReactionData reactionLeave;
        ReactionData reactionStay;
        ReactionData reactionStayMove;
        ReactionData reactionDamage;
        bool ignoreMeteorShowerAndRespawnOnReenterRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GismoConfigDesignData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GismoConfigDesignData* pInstance);
        static void Clean(GismoConfigDesignData* pInstance);
    };

    struct GismoConfigPlanData {
        enum class ContactDamageType : int8_t {
            CONTACT_DAMAGE_NONE = 0,
            CONTACT_DAMAGE_LOW_SPEED = 1,
            CONTACT_DAMAGE_MIDDLE_SPEED = 2,
            CONTACT_DAMAGE_HIGH_SPEED = 3,
        };

        ContactDamageType contactDamageType;
        bool noneDamageSpin;
        bool rideOnDamage;
        bool aerialBounce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GismoConfigPlanData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GismoConfigPlanData* pInstance);
        static void Clean(GismoConfigPlanData* pInstance);
    };

    struct HackingConfig {
        uint32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HackingConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HackingConfig* pInstance);
        static void Clean(HackingConfig* pInstance);
    };

    struct PlayerMachineConfig {
        int32_t baseHp;
        int32_t lifeCount;
        int32_t lifeUpFailedCount[6];
        int32_t lifeMax;
        float gageUpVolume;
        float gageMax;
        int32_t laserNum;
        float laserInterval;
        float bulletInterval;
        float moveSpeed;
        float nodamageTime;
        float specialmoveTime;
        float bodyCol;
        float barrierCol;
        float attackRangeTime;
        float expandAttackCol;
        csl::math::Vector3 hitPos;
        csl::math::Vector3 barrierPos;
        csl::math::Vector3 expandAttackPos;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerMachineConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerMachineConfig* pInstance);
        static void Clean(PlayerMachineConfig* pInstance);
    };

    struct HomingLaserTrailConfig {
        float length;
        float minLength;
        float texWidth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HomingLaserTrailConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HomingLaserTrailConfig* pInstance);
        static void Clean(HomingLaserTrailConfig* pInstance);
    };

    struct HomingLaserConfig {
        float radius;
        float speed;
        float maxAccel;
        float arrivalTime;
        float lifeTime;
        float minYaw;
        float maxYaw;
        float depthVelocity;
        uint32_t power;
        HomingLaserTrailConfig trail;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HomingLaserConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HomingLaserConfig* pInstance);
        static void Clean(HomingLaserConfig* pInstance);
    };

    struct ElementBulletConfig {
        float radius;
        float speed;
        float scale;
        uint32_t power;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ElementBulletConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ElementBulletConfig* pInstance);
        static void Clean(ElementBulletConfig* pInstance);
    };

    struct ObjHackingPlayerMachineConfig {
        PlayerMachineConfig machine;
        HomingLaserConfig laser;
        ElementBulletConfig bullet;
        HackingConfig hacking;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHackingPlayerMachineConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHackingPlayerMachineConfig* pInstance);
        static void Clean(ObjHackingPlayerMachineConfig* pInstance);
    };

    struct TheEndConfig {
        float distance;
        float gageUpVolumeFromMiss;
        float hitViewScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TheEndConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TheEndConfig* pInstance);
        static void Clean(TheEndConfig* pInstance);
    };

    struct ObjTheEndPlayerMachineConfig {
        PlayerMachineConfig machine;
        HomingLaserConfig laser;
        ElementBulletConfig bullet;
        TheEndConfig TheEnd;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTheEndPlayerMachineConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTheEndPlayerMachineConfig* pInstance);
        static void Clean(ObjTheEndPlayerMachineConfig* pInstance);
    };

    struct ObjHoverStoneConfig {
        float hoverUpSpeed;
        float fallSpeed;
        float homingAttackBounce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHoverStoneConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHoverStoneConfig* pInstance);
        static void Clean(ObjHoverStoneConfig* pInstance);
    };

    struct CeilingInfo {
        enum class Symbol : int8_t {
            Invalid = -1,
            Seven = 0,
            Bar = 1,
            Fruit = 2,
            Bell = 3,
            NumSymbols = 4,
        };

        Symbol symbols[3];
        uint32_t rollCount;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CeilingInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CeilingInfo* pInstance);
        static void Clean(CeilingInfo* pInstance);
    };

    struct ReelParam {
        enum class Symbol : int8_t {
            Invalid = -1,
            Seven = 0,
            Bar = 1,
            Fruit = 2,
            Bell = 3,
            NumSymbols = 4,
        };

        Symbol symbols[16];
        float spinSpeedMin;
        float spinSpeedMax;
        float autoStopTimeMin;
        float autoStopTimeMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReelParam* pInstance);
        static void Clean(ReelParam* pInstance);
    };

    struct RateInfo {
        enum class Symbol : int8_t {
            Invalid = -1,
            Seven = 0,
            Bar = 1,
            Fruit = 2,
            Bell = 3,
            NumSymbols = 4,
        };

        Symbol symbols[3];
        float rate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RateInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RateInfo* pInstance);
        static void Clean(RateInfo* pInstance);
    };

    struct PayoutInfo {
        enum class Symbol : int8_t {
            Invalid = -1,
            Seven = 0,
            Bar = 1,
            Fruit = 2,
            Bell = 3,
            NumSymbols = 4,
        };

        Symbol symbols[3];
        uint32_t payout;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PayoutInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PayoutInfo* pInstance);
        static void Clean(PayoutInfo* pInstance);
    };

    struct ObjBonusSlotConfig {
        ReelParam reelParams[3];
        float spinInterval;
        RateInfo rateInfos[4];
        CeilingInfo ceilingInfos[4];
        PayoutInfo payoutInfos[4];
        uint32_t payoutOnBlank;
        bool WinEvenWithPush;
        float retrySpeed;
        float backSpeed;
        float stepSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBonusSlotConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBonusSlotConfig* pInstance);
        static void Clean(ObjBonusSlotConfig* pInstance);
    };

    struct MeteorShowerEffectParameter {
        float spawnIntervalMax;
        float spawnIntervalMin;
        float spawnHeightMax;
        float spawnHeightMin;
        float spawnHorizonMax;
        float spawnHorizonMin;
        float speedMax;
        float speedMin;
        float lengthMax;
        float lengthMin;
        float width;
        float angleMax;
        float angleMin;
        float moveTimeMax;
        float moveTimeMin;
        float fadeTimeMax;
        float fadeTimeMin;
        float spawnAngle;
        csl::math::Vector3 color;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MeteorShowerEffectParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MeteorShowerEffectParameter* pInstance);
        static void Clean(MeteorShowerEffectParameter* pInstance);
    };

    struct MeteorShowerParameter {
        float rangeFromSonicObjectsDontRespawn;
        uint32_t intervalDay;
        uint32_t startHour;
        uint32_t startMinute;
        uint32_t durationHour;
        uint32_t durationMinute;
        MeteorShowerEffectParameter effect;
        ObjBonusSlotConfig bonusSlotConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MeteorShowerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MeteorShowerParameter* pInstance);
        static void Clean(MeteorShowerParameter* pInstance);
    };

    struct ObjParticleBaseRumbleParam {
        csl::ut::VariableString name;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjParticleBaseRumbleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjParticleBaseRumbleParam* pInstance);
        static void Clean(ObjParticleBaseRumbleParam* pInstance);
    };

    struct ObjParticleBaseSoundParam {
        csl::ut::VariableString name;
        bool is3D;
        float volume;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjParticleBaseSoundParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjParticleBaseSoundParam* pInstance);
        static void Clean(ObjParticleBaseSoundParam* pInstance);
    };

    struct ObjParticleBaseSpawner {
        csl::ut::VariableString effectName;
        float scale;
        uint8_t colorR;
        uint8_t colorG;
        uint8_t colorB;
        uint8_t colorA;
        ObjParticleBaseSoundParam sound;
        ObjParticleBaseRumbleParam rumble;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjParticleBaseSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjParticleBaseSpawner* pInstance);
        static void Clean(ObjParticleBaseSpawner* pInstance);
    };

    struct SeedParameter {
        enum class SeedType : uint8_t {
            SeedSensor = 0,
            ObjItem = 1,
        };

        float suckedTime;
        SeedType seedType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SeedParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SeedParameter* pInstance);
        static void Clean(SeedParameter* pInstance);
    };

    struct ObjQuickStepSpawner {
        enum class LineType : int8_t {
            LINE2_LEFT = 0,
            LINE2_RIGHT = 1,
            LINE3 = 2,
            LINE5 = 3,
        };

        enum class JumpMode : int8_t {
            WorldSpace = 0,
            PathSpace = 1,
            NoneJump = 2,
        };

        LineType line;
        csl::ut::VariableString pathName;
        float speed;
        float speedMin;
        float boostSpeed;
        float boostSpeedMin;
        float boostLvMaxSpeed;
        float boostLvMaxSpeedMin;
        float initialSpeed;
        float stepWidth;
        JumpMode jumpMode;
        bool endByAir;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuickStepSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuickStepSpawner* pInstance);
        static void Clean(ObjQuickStepSpawner* pInstance);
    };

    struct ReflexesPanelCameraParam {
        float interoplateTimeActivate;
        float interoplateTimeDeactivate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReflexesPanelCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReflexesPanelCameraParam* pInstance);
        static void Clean(ReflexesPanelCameraParam* pInstance);
    };

    struct ReflexesPanelPanelParam {
        csl::math::Vector3 collisionHalfExtents;
        csl::math::Vector3 collisionOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReflexesPanelPanelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReflexesPanelPanelParam* pInstance);
        static void Clean(ReflexesPanelPanelParam* pInstance);
    };

    struct ReflexesPanelParam {
        ReflexesPanelCameraParam cameraParam;
        ReflexesPanelPanelParam panelParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReflexesPanelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReflexesPanelParam* pInstance);
        static void Clean(ReflexesPanelParam* pInstance);
    };

    struct TornadoRingParameter {
        float suckedTime;
        float launchAngle;
        float launchMaxSpeed;
        float launchMinSpeed;
        float randomRangeMin;
        float randomRangeMax;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TornadoRingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TornadoRingParameter* pInstance);
        static void Clean(TornadoRingParameter* pInstance);
    };

    struct ObjLaserMirrorConfig {
        GimmickCameraParam rotateMirrorH;
        GimmickCameraParam rotateMirrorV;
        GimmickCameraParam moveMirror;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjLaserMirrorConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjLaserMirrorConfig* pInstance);
        static void Clean(ObjLaserMirrorConfig* pInstance);
    };

    struct ObjRotatableStatueConfig {
        GimmickCameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotatableStatueConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotatableStatueConfig* pInstance);
        static void Clean(ObjRotatableStatueConfig* pInstance);
    };

    struct ObjRotatableTombStoneConfig {
        GimmickCameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjRotatableTombStoneConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjRotatableTombStoneConfig* pInstance);
        static void Clean(ObjRotatableTombStoneConfig* pInstance);
    };

    struct SequenceParameter {
        enum class SequenceType : uint8_t {
            SequenceSensor = 0,
            ObjItem = 1,
        };

        float suckedTime;
        SequenceType sequenceType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SequenceParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SequenceParameter* pInstance);
        static void Clean(SequenceParameter* pInstance);
    };

    struct ObjShotGunTouchCameraParam {
        csl::math::Vector3 cameraOffset;
        float cameraHoldTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShotGunTouchCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShotGunTouchCameraParam* pInstance);
        static void Clean(ObjShotGunTouchCameraParam* pInstance);
    };

    struct ObjShotGunTouchTargetParam {
        float targetRadius;
        float catchDistance;
        float linearDamping;
        float angularDamping;
        float appearDelay;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShotGunTouchTargetParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShotGunTouchTargetParam* pInstance);
        static void Clean(ObjShotGunTouchTargetParam* pInstance);
    };

    struct ObjShotGunTouchParam {
        ObjShotGunTouchTargetParam targetParam;
        ObjShotGunTouchCameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjShotGunTouchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjShotGunTouchParam* pInstance);
        static void Clean(ObjShotGunTouchParam* pInstance);
    };

    struct CollisionConfig {
        float radius;
        float friction;
        float restitution;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CollisionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CollisionConfig* pInstance);
        static void Clean(CollisionConfig* pInstance);
    };

    struct CorrectionsConfig {
        float CorrectionsMaxDistance;
        float CorrectionsMinDistance;
        float CorrectionsAngle;
        float CorrectionsRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CorrectionsConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CorrectionsConfig* pInstance);
        static void Clean(CorrectionsConfig* pInstance);
    };

    struct ObjTimeBallConfig {
        float mass;
        float linearDamping;
        float angularDamping;
        float maxLinearVelocity;
        float maxLinearAcceleration;
        float linearVelocityTimes;
        float gravity;
        CollisionConfig collisionConfig;
        CorrectionsConfig correctionsConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjTimeBallConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjTimeBallConfig* pInstance);
        static void Clean(ObjTimeBallConfig* pInstance);
    };

    struct ExtremeConfig {
        enum class LineType : int8_t {
            LINE3 = 0,
            LINE5 = 1,
            LINE_INF = 2,
        };

        LineType lineType;
        float lineWidth;
        float roadLength;
        float speed;
        float barricadeInterval;
        float emergencyDistance;
        csl::math::Vector3 barricadeSize;
        csl::ut::Color<uint8_t> roadColor;
        csl::ut::Color<uint8_t> barricadeColor;
        float cameraFovy;
        float cameraDistance;
        float cameraUpOffset;
        float cameraShakeOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ExtremeConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ExtremeConfig* pInstance);
        static void Clean(ExtremeConfig* pInstance);
    };

    struct NormalFloorSize {
        float length;
        float width;
        float height;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(NormalFloorSize* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(NormalFloorSize* pInstance);
        static void Clean(NormalFloorSize* pInstance);
    };

    struct ObjNormalFloorConfig {
        NormalFloorSize sizeInfo[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjNormalFloorConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjNormalFloorConfig* pInstance);
        static void Clean(ObjNormalFloorConfig* pInstance);
    };

    struct EnemyAquaballActionConfig {
        int32_t maxSuccessCount;
        csl::math::Vector2 bounceSuccessTiming[3];
        float captureLimitTime;
        float captureLimitHeight;
        float failLimitTime;
        float failNoticeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballActionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballActionConfig* pInstance);
        static void Clean(EnemyAquaballActionConfig* pInstance);
    };

    struct EnemyAquaballCommonLevelParam {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballCommonLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballCommonLevelParam* pInstance);
        static void Clean(EnemyAquaballCommonLevelParam* pInstance);
    };

    struct EnemyAquaballPatrolConfig {
        float rotateSpeedMin;
        float rotateSpeedMax;
        float speedMin;
        float speedMax;
        float moveSpeed;
        float bounceHeight;
        float bounceInterval;
        float movePointUpdateInterval;
        float addForceOfHA;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballPatrolConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballPatrolConfig* pInstance);
        static void Clean(EnemyAquaballPatrolConfig* pInstance);
    };

    struct EnemyAquaballCommonParam {
        float killWaitTime;
        float colliderRadius;
        float colliderHeight;
        float damageColliderRadiusOffset;
        float hitPlayerColliderRadiusOffset;
        float checkBarrierDistance;
        float battleDistance;
        RingParameter ringParam;
        EnemyAquaballPatrolConfig patrolConfig;
        EnemyAquaballActionConfig actionConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballCommonParam* pInstance);
        static void Clean(EnemyAquaballCommonParam* pInstance);
    };

    struct EnemyAquaballLevelParam {
        int32_t level;
        EnemyAquaballCommonLevelParam common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballLevelParam* pInstance);
        static void Clean(EnemyAquaballLevelParam* pInstance);
    };

    struct EnemyAquaballLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballLevelBand* pInstance);
        static void Clean(EnemyAquaballLevelBand* pInstance);
    };

    struct EnemyAquaballConfig {
        EnemyAquaballCommonParam commonParam;
        EnemyAquaballLevelParam levelParams[5];
        EnemyAquaballLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyAquaballConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyAquaballConfig* pInstance);
        static void Clean(EnemyAquaballConfig* pInstance);
    };

    struct BirdApproachParam {
        float speed;
        float maxSpeed;
        float acceleration;
        float rotateDegreeToSonic;
        float stopDistanceFromSonic;
        csl::math::Vector3 offsetFromSonic;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdApproachParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdApproachParam* pInstance);
        static void Clean(BirdApproachParam* pInstance);
    };

    struct BirdBackupParam {
        float speed;
        float maxSpeed;
        float acceleration;
        float backupTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdBackupParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdBackupParam* pInstance);
        static void Clean(BirdBackupParam* pInstance);
    };

    struct BirdBarParam {
        float haWaitTime;
        float degreeOnPath;
        float speedOnPath;
        float speedToPath;
        float splineTension;
        float splineSpeed;
        csl::math::Vector3 velocityOnFail;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdBarParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdBarParam* pInstance);
        static void Clean(BirdBarParam* pInstance);
    };

    struct BirdCameraParam {
        float azimuth;
        float elevation;
        float distance;
        float zRoll;
        float fovy;
        csl::math::Vector3 frameOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdCameraParam* pInstance);
        static void Clean(BirdCameraParam* pInstance);
    };

    struct BirdChargeParam {
        float waitTime;
        float speed;
        float maxSpeed;
        float acceleration;
        csl::math::Vector3 offsetFromSonic;
        float duration;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdChargeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdChargeParam* pInstance);
        static void Clean(BirdChargeParam* pInstance);
    };

    struct BirdDeadParam {
        float minWaitTime;
        float maxWaitTime;
        float raycastDistance;
        float fallSpeedOnStomp;
        float maxFallSpeedOnStomp;
        float fallAccelerationOnStomp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdDeadParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdDeadParam* pInstance);
        static void Clean(BirdDeadParam* pInstance);
    };

    struct BirdGlidingParam {
        float moveSpeed;
        float gidingVelocityY;
        float limitTime;
        float rotateSpeed;
        float rotateSpeedMin;
        float rotateSpeedMax;
        float rotateSpeedMaxSpeedMin;
        float rotateSpeedMinSpeedMax;
        float heightOfChangeShake;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdGlidingParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdGlidingParam* pInstance);
        static void Clean(BirdGlidingParam* pInstance);
    };

    struct BirdLaserStateParam {
        float laserInterval;
        float rotateDegreeToSonic;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdLaserStateParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdLaserStateParam* pInstance);
        static void Clean(BirdLaserStateParam* pInstance);
    };

    struct BirdOnBackCameraParam {
        float distToConsiderSonicAsOnBird;
        float distance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdOnBackCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdOnBackCameraParam* pInstance);
        static void Clean(BirdOnBackCameraParam* pInstance);
    };

    struct BirdRaycastParam {
        float distanceFront;
        float distanceBack;
        float distanceDown;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdRaycastParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdRaycastParam* pInstance);
        static void Clean(BirdRaycastParam* pInstance);
    };

    struct BirdWanderParam {
        float speedOnPath;
        float speedToPath;
        float eyesightDelayAfterBarAction;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BirdWanderParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BirdWanderParam* pInstance);
        static void Clean(BirdWanderParam* pInstance);
    };

    struct EnemyBirdCommonLevelParam {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdCommonLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdCommonLevelParam* pInstance);
        static void Clean(EnemyBirdCommonLevelParam* pInstance);
    };

    struct EnemyBirdCommonParam {
        csl::math::Vector3 backColliderExtents;
        csl::math::Vector3 backColliderOffset;
        csl::math::Vector3 backDamageColliderExtents;
        csl::math::Vector3 backDamageColliderOffset;
        csl::math::Vector3 chargeColliderExtents;
        csl::math::Vector3 chargeColliderOffset;
        float eyesightAngle;
        float eyesightDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdCommonParam* pInstance);
        static void Clean(EnemyBirdCommonParam* pInstance);
    };

    struct EnemyBirdLevelParam {
        int32_t level;
        EnemyBirdCommonLevelParam common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdLevelParam* pInstance);
        static void Clean(EnemyBirdLevelParam* pInstance);
    };

    struct EnemyBirdLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdLevelBand* pInstance);
        static void Clean(EnemyBirdLevelBand* pInstance);
    };

    struct EnemyBirdParam {
        csl::math::Vector3 haColliderExtents;
        csl::math::Vector3 haColliderOffset;
        csl::math::Vector3 haTargetOffset;
        float haTargetRadius;
        float haTargetHeight;
        BirdWanderParam wanderParam;
        BirdApproachParam approachParam;
        BirdLaserStateParam laserStateParam;
        BirdChargeParam chargeParam;
        BirdBackupParam backupParam;
        BirdBarParam barParam;
        BirdGlidingParam glidingParam;
        BirdDeadParam deadParam;
        BirdRaycastParam raycastParam;
        bool useCamera;
        BirdOnBackCameraParam onBackCameraParam;
        BirdCameraParam cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdParam* pInstance);
        static void Clean(EnemyBirdParam* pInstance);
    };

    struct EnemyBirdConfig {
        EnemyBirdCommonParam commonParam;
        EnemyBirdLevelParam levelParams[5];
        EnemyBirdLevelBand levelBand[5];
        EnemyBirdParam birdParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBirdConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBirdConfig* pInstance);
        static void Clean(EnemyBirdConfig* pInstance);
    };

    struct SpeedInfo {
        float speed;
        float maxSpeed;
        float acceleration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SpeedInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SpeedInfo* pInstance);
        static void Clean(SpeedInfo* pInstance);
    };

    struct ObjBirdLaserConfig {
        SpeedInfo speedInfoToSonic;
        SpeedInfo speedInfoToBird;
        float colliderLength;
        float colliderRadius;
        float lifeTime;
        csl::math::Vector3 laserScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBirdLaserConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBirdLaserConfig* pInstance);
        static void Clean(ObjBirdLaserConfig* pInstance);
    };

    struct BommerCommonLevelConfig {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BommerCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BommerCommonLevelConfig* pInstance);
        static void Clean(BommerCommonLevelConfig* pInstance);
    };

    struct EnemyBommerAimingConfig {
        float moveDecerleration;
        float rotationAngleMax;
        float chargeTime;
        float rotateSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerAimingConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerAimingConfig* pInstance);
        static void Clean(EnemyBommerAimingConfig* pInstance);
    };

    struct EnemyBommerAttackConfig {
        float moveVelocity;
        float moveDecerleration;
        float moveDecelerationDamaged;
        float cooldownTime;
        float colliderOffsetRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerAttackConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerAttackConfig* pInstance);
        static void Clean(EnemyBommerAttackConfig* pInstance);
    };

    struct EnemyBommerChaseConfig {
        float moveVelocity;
        float moveAccerleration;
        float amplitude;
        float period;
        float rotateSpeedInFront;
        float rotateSpeedOnBack;
        float chaseTime;
        float parriedMoveDistance;
        float parriedShortenTime;
        float parriedCoolDownTime;
        float colliderOffsetRate;
        float cameraDistance;
        float cameraElevation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerChaseConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerChaseConfig* pInstance);
        static void Clean(EnemyBommerChaseConfig* pInstance);
    };

    struct EnemyBommerPatrolConfig {
        float rotationDeceleration;
        float rotationAngleMax;
        float changeTimeIdlePatrolMin;
        float changeTimeIdlePatrolMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerPatrolConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerPatrolConfig* pInstance);
        static void Clean(EnemyBommerPatrolConfig* pInstance);
    };

    struct EnemyBommerCommonConfig {
        RingParameter ringParam;
        float mass;
        float slopeAngleMax;
        float checkBarrierDistance;
        float colliderRadius;
        float colliderHeight;
        float damageColliderRadiusOffset;
        float eyesightDistance;
        float eyesightDistanceMargin;
        EnemyBommerPatrolConfig patrolConfig;
        EnemyBommerAimingConfig aimingConfig;
        EnemyBommerAttackConfig attackConfig;
        EnemyBommerChaseConfig chaseConfig;
        float explodeSignalTime;
        float explodeColliderRadius;
        bool useUniqueDebrisSetting;
        DebrisParameter debrisExplode;
        DebrisParameter debrisCyloop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerCommonConfig* pInstance);
        static void Clean(EnemyBommerCommonConfig* pInstance);
    };

    struct EnemyBommerLevelConfig {
        int32_t level;
        BommerCommonLevelConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerLevelConfig* pInstance);
        static void Clean(EnemyBommerLevelConfig* pInstance);
    };

    struct EnemyBommerConfig {
        EnemyBommerCommonConfig commonParams;
        EnemyBommerLevelConfig levelParams[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBommerConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBommerConfig* pInstance);
        static void Clean(EnemyBommerConfig* pInstance);
    };

    struct EnemyBubbleApproachConfig {
        float moveMinDistance;
        float moveSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleApproachConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleApproachConfig* pInstance);
        static void Clean(EnemyBubbleApproachConfig* pInstance);
    };

    struct EnemyBubbleBlitzProtectionConfig {
        float moveMinDistance;
        float moveSpeedMax;
        float blitzProtectionAttackTime;
        float blitzProtectionIntervalTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleBlitzProtectionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleBlitzProtectionConfig* pInstance);
        static void Clean(EnemyBubbleBlitzProtectionConfig* pInstance);
    };

    struct EnemyBubbleBlitzProtectionReadyConfig {
        float moveMinDistance;
        float moveSpeedMax;
        float blitzProtectionMaxDistance;
        float blitzProtectionReadyTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleBlitzProtectionReadyConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleBlitzProtectionReadyConfig* pInstance);
        static void Clean(EnemyBubbleBlitzProtectionReadyConfig* pInstance);
    };

    struct EnemyBubbleCommonLevelParam {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleCommonLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleCommonLevelParam* pInstance);
        static void Clean(EnemyBubbleCommonLevelParam* pInstance);
    };

    struct EnemyBubbleShellConfig {
        float baseHeight;
        float innerDistance;
        float outerDistance;
        float innerRadius;
        float outerRadius;
        float innerAccelMax;
        float outerAccelMax;
        float innerSpeedMax;
        float outerSpeedMax;
        uint8_t innerNum;
        uint8_t outerNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleShellConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleShellConfig* pInstance);
        static void Clean(EnemyBubbleShellConfig* pInstance);
    };

    struct EnemyBubbleCommonParam {
        float killWaitTime;
        float colliderRadius;
        float damageColliderRadiusOffset;
        float attackColliderRadiusOffset;
        float eyesightDistance;
        float moveAccerleration;
        float moveDeceleration;
        float rotationAngleMax;
        float mass;
        float slopeAngleMax;
        float knockBackTime;
        EnemyBubbleApproachConfig approachConfig;
        EnemyBubbleBlitzProtectionReadyConfig blitzReadyConfig;
        EnemyBubbleBlitzProtectionConfig blitzConfig;
        EnemyBubbleShellConfig shellConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleCommonParam* pInstance);
        static void Clean(EnemyBubbleCommonParam* pInstance);
    };

    struct EnemyBubbleLevelParam {
        int32_t level;
        EnemyBubbleCommonLevelParam common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleLevelParam* pInstance);
        static void Clean(EnemyBubbleLevelParam* pInstance);
    };

    struct EnemyBubbleLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleLevelBand* pInstance);
        static void Clean(EnemyBubbleLevelBand* pInstance);
    };

    struct EnemyBubbleConfig {
        EnemyBubbleCommonParam commonParam;
        EnemyBubbleLevelParam levelParams[5];
        EnemyBubbleLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyBubbleConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyBubbleConfig* pInstance);
        static void Clean(EnemyBubbleConfig* pInstance);
    };

    struct DefenderCommonLevelConfig {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DefenderCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DefenderCommonLevelConfig* pInstance);
        static void Clean(DefenderCommonLevelConfig* pInstance);
    };

    struct EnemyDefenderPatrolConfig {
        float changeTimeIdlePatrolMin;
        float changeTimeIdlePatrolMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenderPatrolConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenderPatrolConfig* pInstance);
        static void Clean(EnemyDefenderPatrolConfig* pInstance);
    };

    struct EnemyDefenderCommonConfig {
        RingParameter ringParam;
        float mass;
        float slopeAngleMax;
        float checkBarrierDistance;
        float colliderRadius;
        float colliderHeight;
        float damageColliderRadiusOffset;
        float boomerangColliderRadius;
        float boomerangColliderHeight;
        float boomerangColliderOffset;
        float boomerangCameraKeepTimeMin;
        float eyesightDistance;
        float eyesightLostDelayTime;
        EnemyDefenderPatrolConfig patrolConfig;
        float shieldBlowUpTime;
        float shieldBlowUpHeight;
        float shieldBoomerangSpeed;
        float shieldBoomerangMinDistance;
        float shieldBoomerangMaxDistance;
        float killWaitTime;
        float cameraDistance;
        float cameraElevation;
        int32_t parryBoomerangRound;
        float parryBoomerangOffset;
        float parryBoomerangSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenderCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenderCommonConfig* pInstance);
        static void Clean(EnemyDefenderCommonConfig* pInstance);
    };

    struct EnemyDefenderLevelConfig {
        int32_t level;
        DefenderCommonLevelConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenderLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenderLevelConfig* pInstance);
        static void Clean(EnemyDefenderLevelConfig* pInstance);
    };

    struct EnemyDefenderConfig {
        EnemyDefenderCommonConfig commonParams;
        EnemyDefenderLevelConfig levelParams[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyDefenderConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyDefenderConfig* pInstance);
        static void Clean(EnemyDefenderConfig* pInstance);
    };

    struct EnemyEggRoboConfig {
        float scaleSv;
        float scaleFv;
        float appearEffTimer;
        float colliderRadius;
        float colliderHeight;
        csl::math::Vector3 colliderOffset;
        float laserColliderRadius;
        float laserColliderHeight;
        csl::math::Vector3 laserColliderSizeSV;
        float missileColliderRadius;
        float missileColliderHeight;
        csl::math::Vector3 missileColliderOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyEggRoboConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyEggRoboConfig* pInstance);
        static void Clean(EnemyEggRoboConfig* pInstance);
    };

    struct HeliDamageCol {
        float radius;
        csl::math::Vector3 pos;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliDamageCol* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliDamageCol* pInstance);
        static void Clean(HeliDamageCol* pInstance);
    };

    struct HeliCommon {
        float followRotateSpeed;
        HeliDamageCol damageCol;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliCommon* pInstance);
        static void Clean(HeliCommon* pInstance);
    };

    struct HeliBullet {
        float bulletSpeed;
        float gunRotateSpeed;
        uint8_t attackChainNum;
        float attackChainInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliBullet* pInstance);
        static void Clean(HeliBullet* pInstance);
    };

    struct HeliBomb {
        float bombSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliBomb* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliBomb* pInstance);
        static void Clean(HeliBomb* pInstance);
    };

    struct EnemyHelicopterConfig {
        HeliCommon common;
        HeliBullet attackBullet;
        HeliBomb attackBomb;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyHelicopterConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyHelicopterConfig* pInstance);
        static void Clean(EnemyHelicopterConfig* pInstance);
    };

    struct HeliAttackBase {
        float life;
        float attackInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeliAttackBase* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeliAttackBase* pInstance);
        static void Clean(HeliAttackBase* pInstance);
    };

    struct Movement {
        float rotateSpeedMin;
        float rotateSpeedMax;
        float rotateSpeedMaxSpeedMin;
        float rotateSpeedMinSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Movement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Movement* pInstance);
        static void Clean(Movement* pInstance);
    };

    struct Eyesight {
        float distance;
        float angle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Eyesight* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Eyesight* pInstance);
        static void Clean(Eyesight* pInstance);
    };

    struct Fight {
        float attackRange;
        float attackAngle;
        float attackSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Fight* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Fight* pInstance);
        static void Clean(Fight* pInstance);
    };

    struct EnemyJellymanModeConfig {
        Movement movement;
        Eyesight eyesight;
        Fight fight;
        float transformRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJellymanModeConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJellymanModeConfig* pInstance);
        static void Clean(EnemyJellymanModeConfig* pInstance);
    };

    struct JellymanHumanCommonConfig {
        EnemyJellymanModeConfig common;
        float actionDistance[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JellymanHumanCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JellymanHumanCommonConfig* pInstance);
        static void Clean(JellymanHumanCommonConfig* pInstance);
    };

    struct VolumeInfo {
        csl::math::Vector3 volumeSize;
        csl::math::Vector3 volumeOffset;
        csl::math::Vector3 volumeRotation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(VolumeInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(VolumeInfo* pInstance);
        static void Clean(VolumeInfo* pInstance);
    };

    struct MappingPairInfo {
        enum class VolumeShape : int8_t {
            SPHERE = 0,
            BOX = 1,
            CYLINDER = 2,
            CAPSULE = 3,
            NUM = 4,
        };

        csl::ut::VariableString tagName;
        int8_t pieceNum;
        float pieceFuncFactor;
        VolumeShape volumeShape;
        csl::ut::VariableString humanNodeName;
        VolumeInfo humanVolume;
        csl::ut::VariableString eggNodeName;
        VolumeInfo eggVolume;
        bool effectActive;
        bool debugDraw;
        bool debugDrawVolumeAxis;
        bool debugDrawAxis;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MappingPairInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MappingPairInfo* pInstance);
        static void Clean(MappingPairInfo* pInstance);
    };

    struct EnemyCommonConfig {
        JellymanHumanCommonConfig human;
        RingParameter ringParam;
        int32_t codeDropNumMin;
        int32_t codeDropNumMax;
        int32_t codeXDropNumMin;
        int32_t codeXDropNumMax;
        MappingPairInfo mappingPairInfo[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyCommonConfig* pInstance);
        static void Clean(EnemyCommonConfig* pInstance);
    };

    struct JellymanCommonLevelConfig {
        int32_t maxHealthPoint;
        float maxStunPoint[3];
        float stunDecreaseStartTime;
        float stunDecreaseSpeed;
        float maxStaggerPoint[3];
        float staggerDecreaseStartTime;
        float staggerDecreaseSpeed;
        float stunTime;
        float attackRate;
        float attackMotionSpeed;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JellymanCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JellymanCommonLevelConfig* pInstance);
        static void Clean(JellymanCommonLevelConfig* pInstance);
    };

    struct JellymanHumanLevelConfig {
        float wallTime;
        int32_t wallLife;
        float guardTime;
        float guardCoolTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JellymanHumanLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JellymanHumanLevelConfig* pInstance);
        static void Clean(JellymanHumanLevelConfig* pInstance);
    };

    struct EnemyLevelConfig {
        int32_t level;
        JellymanCommonLevelConfig common;
        JellymanHumanLevelConfig human;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyLevelConfig* pInstance);
        static void Clean(EnemyLevelConfig* pInstance);
    };

    struct JellymanCommonActionConfig {
        enum class SuperArmorType : int8_t {
            None = 0,
            Attack = 1,
            Always = 2,
        };

        SuperArmorType superArmor;
        bool isTransform;
        float downTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JellymanCommonActionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JellymanCommonActionConfig* pInstance);
        static void Clean(JellymanCommonActionConfig* pInstance);
    };

    struct JellymanHumanActionRate {
        float actionRate[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JellymanHumanActionRate* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JellymanHumanActionRate* pInstance);
        static void Clean(JellymanHumanActionRate* pInstance);
    };

    struct JellymanHumanActionConfig {
        JellymanHumanActionRate rateTable[4];
        float coolTime[5];
        float attackCoolTime;
        float nearRange;
        int32_t nearRateId;
        int32_t farRateId;
        bool isCounterGuard;
        bool isCounterWall;
        bool isSpikeWall;
        int32_t waveNum;
        float waveUpTime;
        float waveLifeTime;
        float waveDownTime;
        float waveRadius;
        float waveAddRadius;
        float waveSpawnTime;
        float waveKeepRadius;
        float waveHeight;
        int32_t rushNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(JellymanHumanActionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(JellymanHumanActionConfig* pInstance);
        static void Clean(JellymanHumanActionConfig* pInstance);
    };

    struct EnemyLevelBandConfig {
        int32_t level;
        JellymanCommonActionConfig common;
        JellymanHumanActionConfig human;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyLevelBandConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyLevelBandConfig* pInstance);
        static void Clean(EnemyLevelBandConfig* pInstance);
    };

    struct EnemySquadAvarageLevelConfig {
        int32_t level;
        int32_t maxActionCount;
        float spAttackWaitTime;
        int32_t humanMaxActionCount[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySquadAvarageLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySquadAvarageLevelConfig* pInstance);
        static void Clean(EnemySquadAvarageLevelConfig* pInstance);
    };

    struct EnemySquadConfig {
        EnemySquadAvarageLevelConfig averageLevelConfig[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySquadConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySquadConfig* pInstance);
        static void Clean(EnemySquadConfig* pInstance);
    };

    struct EnemyJellymanConfig {
        EnemyCommonConfig commonParams;
        EnemyLevelConfig levelParams[8];
        EnemyLevelBandConfig levelBands[5];
        EnemySquadConfig squadParams;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJellymanConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJellymanConfig* pInstance);
        static void Clean(EnemyJellymanConfig* pInstance);
    };

    struct VolumeSize {
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(VolumeSize* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(VolumeSize* pInstance);
        static void Clean(VolumeSize* pInstance);
    };

    struct SpringPlayer {
        float velocity;
        float targetCursorMaxDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SpringPlayer* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SpringPlayer* pInstance);
        static void Clean(SpringPlayer* pInstance);
    };

    struct BattleParam {
        float stompingRange;
        float stompingTotalNum;
        float interpalTimeFinal;
        float range;
        float riseDistance;
        float riseTime;
        float upLoopTime;
        float chaseSpeed;
        float speed;
        float groundImpactRadius;
        SpringPlayer springPlayer;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BattleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BattleParam* pInstance);
        static void Clean(BattleParam* pInstance);
    };

    struct CharacterControllerCollision {
        float height;
        float radius;
        csl::math::Vector3 offset;
        csl::math::Vector3 scale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CharacterControllerCollision* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CharacterControllerCollision* pInstance);
        static void Clean(CharacterControllerCollision* pInstance);
    };

    struct EnemyJumperAutoLockonParam {
        float distance;
        float lockOnMinDistance;
        csl::math::Vector3 playerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperAutoLockonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperAutoLockonParam* pInstance);
        static void Clean(EnemyJumperAutoLockonParam* pInstance);
    };

    struct EnemyJumperCommonLevelParam {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperCommonLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperCommonLevelParam* pInstance);
        static void Clean(EnemyJumperCommonLevelParam* pInstance);
    };

    struct EnemyJumperPatrolConfig {
        float rotateSpeedMin;
        float rotateSpeedMax;
        float speedMin;
        float speedMax;
        float changeTimeIdlePatrolMin;
        float changeTimeIdlePatrolMax;
        float lockonDistance;
        float unlockDistance;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperPatrolConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperPatrolConfig* pInstance);
        static void Clean(EnemyJumperPatrolConfig* pInstance);
    };

    struct EnemyJumperCommonParam {
        float killWaitTime;
        float colliderRadius;
        float colliderHeight;
        float headRadius;
        float headHeight;
        float damageColliderRadiusOffset;
        float eyesightDistance;
        float maxSpeed;
        float checkBarrierDistance;
        EnemyJumperPatrolConfig patrolConfig;
        EnemyJumperAutoLockonParam lockonCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperCommonParam* pInstance);
        static void Clean(EnemyJumperCommonParam* pInstance);
    };

    struct EnemyJumperLevelParam {
        int32_t level;
        EnemyJumperCommonLevelParam common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperLevelParam* pInstance);
        static void Clean(EnemyJumperLevelParam* pInstance);
    };

    struct EnemyJumperLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperLevelBand* pInstance);
        static void Clean(EnemyJumperLevelBand* pInstance);
    };

    struct MovementParam {
        float rotateSpeedMin;
        float rotateSpeedMax;
        float speedMin;
        float speedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MovementParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MovementParam* pInstance);
        static void Clean(MovementParam* pInstance);
    };

    struct EnemyJumperConfig {
        EnemyJumperCommonParam commonParam;
        EnemyJumperLevelParam levelParams[5];
        EnemyJumperLevelBand levelBand[5];
        CharacterControllerCollision characterControllerCollision;
        MovementParam movement;
        BattleParam battleParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperConfig* pInstance);
        static void Clean(EnemyJumperConfig* pInstance);
    };

    struct EnemyJumperSubCommonLevelParam {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSubCommonLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSubCommonLevelParam* pInstance);
        static void Clean(EnemyJumperSubCommonLevelParam* pInstance);
    };

    struct EnemyJumperSubCommonParam {
        float killWaitTime;
        float colliderRadius;
        float colliderHeight;
        float damageColliderRadiusOffset;
        float eyesightDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSubCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSubCommonParam* pInstance);
        static void Clean(EnemyJumperSubCommonParam* pInstance);
    };

    struct EnemyJumperSubLevelParam {
        int32_t level;
        EnemyJumperSubCommonLevelParam common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSubLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSubLevelParam* pInstance);
        static void Clean(EnemyJumperSubLevelParam* pInstance);
    };

    struct EnemyJumperSubLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSubLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSubLevelBand* pInstance);
        static void Clean(EnemyJumperSubLevelBand* pInstance);
    };

    struct EnemyJumperSubConfig {
        EnemyJumperSubCommonParam commonParam;
        EnemyJumperSubLevelParam levelParams[5];
        EnemyJumperSubLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyJumperSubConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyJumperSubConfig* pInstance);
        static void Clean(EnemyJumperSubConfig* pInstance);
    };

    struct EnemyRobberCommonConfig {
        RingParameter ringParam;
        float eyesightDistance;
        float idlingSpeed;
        float chasingSpeed;
        float escapeSpeed;
        float escapeSpeedPlayerOnPath;
        float onBoardSpeed;
        float restTime;
        float railMaxLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyRobberCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyRobberCommonConfig* pInstance);
        static void Clean(EnemyRobberCommonConfig* pInstance);
    };

    struct RobbberCommonLevelConfig {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RobbberCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RobbberCommonLevelConfig* pInstance);
        static void Clean(RobbberCommonLevelConfig* pInstance);
    };

    struct EnemyRobberLevelConfig {
        int32_t level;
        RobbberCommonLevelConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyRobberLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyRobberLevelConfig* pInstance);
        static void Clean(EnemyRobberLevelConfig* pInstance);
    };

    struct EnemyRobberConfig {
        EnemyRobberCommonConfig commonParams;
        EnemyRobberLevelConfig levelParams[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyRobberConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyRobberConfig* pInstance);
        static void Clean(EnemyRobberConfig* pInstance);
    };

    struct EnemySniperCommonConfig {
        RingParameter ringParam;
        int32_t codeDropNumMin;
        int32_t codeDropNumMax;
        int32_t codeXDropNumMin;
        int32_t codeXDropNumMax;
        float eyesightDistancePatrol;
        float eyesightDistanceBattle;
        float hideCoreDistance;
        float showCoreDistance;
        float guardShotWaitTime;
        float guardShotAngle;
        float aimBendSpeed;
        float muzzleShrinkStartDist;
        float muzzleShrinkEndDist;
        float snipeMaxAngle;
        float guardMaxAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySniperCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySniperCommonConfig* pInstance);
        static void Clean(EnemySniperCommonConfig* pInstance);
    };

    struct SniperCommonLevelConfig {
        int32_t maxHealthPoint;
        int32_t maxGuardPoint;
        float stunTime;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;
        float snipeRotateSpeed;
        float chargeRotateSpeed;
        float predictRotateSpeed;
        float snipeWaitTime;
        float snipeShotSpeed;
        float snipeIntervalTime;
        float predictTime;
        float predictAngleRange;
        float guardShotSpeed;
        float guardShotRotateSpeed;
        float guardShotMotionSpeed;
        float guardShotLifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SniperCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SniperCommonLevelConfig* pInstance);
        static void Clean(SniperCommonLevelConfig* pInstance);
    };

    struct EnemySniperLevelConfig {
        int32_t level;
        SniperCommonLevelConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySniperLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySniperLevelConfig* pInstance);
        static void Clean(EnemySniperLevelConfig* pInstance);
    };

    struct SniperCommonActionConfig {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SniperCommonActionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SniperCommonActionConfig* pInstance);
        static void Clean(SniperCommonActionConfig* pInstance);
    };

    struct EnemySniperLevelBandConfig {
        int32_t level;
        SniperCommonActionConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySniperLevelBandConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySniperLevelBandConfig* pInstance);
        static void Clean(EnemySniperLevelBandConfig* pInstance);
    };

    struct EnemySniperConfig {
        EnemySniperCommonConfig commonParams;
        EnemySniperLevelConfig levelParams[5];
        EnemySniperLevelBandConfig levelBands[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemySniperConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemySniperConfig* pInstance);
        static void Clean(EnemySniperConfig* pInstance);
    };

    struct EnemyTwisterCommonConfig {
        RingParameter ringParam;
        float rigidColliderRadius;
        float damageColliderRadius;
        float battleDistance;
        float cyloopHeight;
        float rotateSpeed;
        bool useUniqueDebrisSetting;
        DebrisParameter debris;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyTwisterCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyTwisterCommonConfig* pInstance);
        static void Clean(EnemyTwisterCommonConfig* pInstance);
    };

    struct TwisterCommonLevelConfig {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TwisterCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TwisterCommonLevelConfig* pInstance);
        static void Clean(TwisterCommonLevelConfig* pInstance);
    };

    struct EnemyTwisterLevelConfig {
        int32_t level;
        TwisterCommonLevelConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyTwisterLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyTwisterLevelConfig* pInstance);
        static void Clean(EnemyTwisterLevelConfig* pInstance);
    };

    struct EnemyTwisterConfig {
        EnemyTwisterCommonConfig commonParams;
        EnemyTwisterLevelConfig levelParams[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyTwisterConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyTwisterConfig* pInstance);
        static void Clean(EnemyTwisterConfig* pInstance);
    };

    struct EnemyUmbrellaCommonConfig {
        RingParameter ringParam;
        int32_t codeDropNumMin;
        int32_t codeDropNumMax;
        int32_t codeXDropNumMin;
        int32_t codeXDropNumMax;
        float closeDistance;
        float cameraDistance;
        float cameraElevation;
        float pullStartHeight;
        float pullEndHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyUmbrellaCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyUmbrellaCommonConfig* pInstance);
        static void Clean(EnemyUmbrellaCommonConfig* pInstance);
    };

    struct UmbrellaCommonLevelConfig {
        enum class BarrageType : uint8_t {
            BOX = 0,
            CONE = 1,
            FAN = 2,
        };

        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;
        float backJumpHeight;
        float backJumpDistance;
        float flyingDuration;
        BarrageType barrageType;
        float barrageHeight;
        float barrageWidth;
        float barrageDistance;
        float bombRatio;
        float barrageFallSpeed;
        float barrageLifeTime;
        float barrageLifePassPower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UmbrellaCommonLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UmbrellaCommonLevelConfig* pInstance);
        static void Clean(UmbrellaCommonLevelConfig* pInstance);
    };

    struct EnemyUmbrellaLevelConfig {
        int32_t level;
        UmbrellaCommonLevelConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyUmbrellaLevelConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyUmbrellaLevelConfig* pInstance);
        static void Clean(EnemyUmbrellaLevelConfig* pInstance);
    };

    struct UmbrellaCommonActionConfig {
        int32_t dummy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UmbrellaCommonActionConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UmbrellaCommonActionConfig* pInstance);
        static void Clean(UmbrellaCommonActionConfig* pInstance);
    };

    struct EnemyUmbrellaLevelBandConfig {
        int32_t level;
        UmbrellaCommonActionConfig common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyUmbrellaLevelBandConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyUmbrellaLevelBandConfig* pInstance);
        static void Clean(EnemyUmbrellaLevelBandConfig* pInstance);
    };

    struct EnemyUmbrellaConfig {
        EnemyUmbrellaCommonConfig commonParams;
        EnemyUmbrellaLevelConfig levelParams[5];
        EnemyUmbrellaLevelBandConfig levelBands[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyUmbrellaConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyUmbrellaConfig* pInstance);
        static void Clean(EnemyUmbrellaConfig* pInstance);
    };

    struct EnemyWolfCommonLevelParam {
        int32_t maxHealthPoint;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyWolfCommonLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyWolfCommonLevelParam* pInstance);
        static void Clean(EnemyWolfCommonLevelParam* pInstance);
    };

    struct WolfMovementParam {
        float rotateSpeedMin;
        float rotateSpeedMax;
        float rotateSpeedMaxSpeedMin;
        float rotateSpeedMinSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WolfMovementParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WolfMovementParam* pInstance);
        static void Clean(WolfMovementParam* pInstance);
    };

    struct WolfEyesightParam {
        float distance;
        float angle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WolfEyesightParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WolfEyesightParam* pInstance);
        static void Clean(WolfEyesightParam* pInstance);
    };

    struct WolfVolumeInfo {
        csl::math::Vector3 volumeSize;
        csl::math::Vector3 volumeOffset;
        csl::math::Vector3 volumeRotation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WolfVolumeInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WolfVolumeInfo* pInstance);
        static void Clean(WolfVolumeInfo* pInstance);
    };

    struct WolfMappingPairInfo {
        enum class WolfVolumeShape : int8_t {
            SPHERE = 0,
            BOX = 1,
            CYLINDER = 2,
            CAPSULE = 3,
            NUM = 4,
        };

        csl::ut::VariableString tagName;
        int8_t pieceNum;
        float pieceFuncFactor;
        WolfVolumeShape volumeShape;
        csl::ut::VariableString wolfNodeName;
        WolfVolumeInfo wolfVolume;
        bool effectActive;
        bool debugDraw;
        bool debugDrawVolumeAxis;
        bool debugDrawAxis;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WolfMappingPairInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WolfMappingPairInfo* pInstance);
        static void Clean(WolfMappingPairInfo* pInstance);
    };

    struct EnemyWolfCommonParam {
        RingParameter ringParam;
        WolfMovementParam movement;
        WolfEyesightParam eyesight;
        float killWaitTime;
        float blockColliderRadius;
        float blockColliderHeight;
        float damageColliderRadius;
        float damageColliderHeight;
        float eyesightDistance;
        csl::math::Vector3 cursorOffset;
        WolfMappingPairInfo mappingPairInfo[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyWolfCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyWolfCommonParam* pInstance);
        static void Clean(EnemyWolfCommonParam* pInstance);
    };

    struct EnemyWolfLevelParam {
        int32_t level;
        EnemyWolfCommonLevelParam common;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyWolfLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyWolfLevelParam* pInstance);
        static void Clean(EnemyWolfLevelParam* pInstance);
    };

    struct EnemyWolfLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyWolfLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyWolfLevelBand* pInstance);
        static void Clean(EnemyWolfLevelBand* pInstance);
    };

    struct EnemyWolfConfig {
        EnemyWolfCommonParam commonParam;
        EnemyWolfLevelParam levelParams[5];
        EnemyWolfLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyWolfConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyWolfConfig* pInstance);
        static void Clean(EnemyWolfConfig* pInstance);
    };

    struct FocusCameraConfig {
        float duration;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FocusCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FocusCameraConfig* pInstance);
        static void Clean(FocusCameraConfig* pInstance);
    };

    struct ObjWolfManagerConfig {
        FocusCameraConfig focusCamera;
        float shotInterval;
        float shotInterval_Parried;
        float shotInterval_Reborn;
        float shotInterval_First;
        float shotInterval_NoReborn;
        float stunTime;
        float approachWait;
        float dispWait;
        float rollWait;
        float reactionTime;
        float controlDelay;
        float shotAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWolfManagerConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWolfManagerConfig* pInstance);
        static void Clean(ObjWolfManagerConfig* pInstance);
    };

    struct WolfVolumeSize {
        float width;
        float height;
        float depth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WolfVolumeSize* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WolfVolumeSize* pInstance);
        static void Clean(WolfVolumeSize* pInstance);
    };

    struct EventData {
        enum class EventType : int8_t {
            KEY = 0,
            INTERVAL = 1,
        };

        csl::ut::VariableString name;
        EventType type;
        float inTime;
        float outTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EventData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EventData* pInstance);
        static void Clean(EventData* pInstance);
    };

    struct NodeInfoInAnim {
        csl::math::Vector3 position;
        csl::math::Quaternion rotation;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(NodeInfoInAnim* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(NodeInfoInAnim* pInstance);
        static void Clean(NodeInfoInAnim* pInstance);
    };

    struct NodeData {
        csl::ut::VariableString name;
        csl::ut::Array<NodeInfoInAnim> nodeInfos;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(NodeData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(NodeData* pInstance);
        static void Clean(NodeData* pInstance);
    };

    struct DeltaMotionInfoInAnim {
        csl::math::Vector3 position;
        csl::math::Quaternion rotation;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DeltaMotionInfoInAnim* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DeltaMotionInfoInAnim* pInstance);
        static void Clean(DeltaMotionInfoInAnim* pInstance);
    };

    struct DeltaMotionData {
        csl::ut::Array<DeltaMotionInfoInAnim> deltaInfos;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(DeltaMotionData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(DeltaMotionData* pInstance);
        static void Clean(DeltaMotionData* pInstance);
    };

    struct AnimData {
        csl::ut::VariableString name;
        csl::ut::Array<EventData> eventDatas;
        csl::ut::Array<NodeData> nodeDatas;
        DeltaMotionData deltaMotionData;
        float maxTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AnimData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AnimData* pInstance);
        static void Clean(AnimData* pInstance);
    };

    struct RecordData {
        csl::ut::Array<AnimData> animDatas;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RecordData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RecordData* pInstance);
        static void Clean(RecordData* pInstance);
    };

    struct ObjGFieldCylinderSplineSpawner {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjGFieldCylinderSplineSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjGFieldCylinderSplineSpawner* pInstance);
        static void Clean(ObjGFieldCylinderSplineSpawner* pInstance);
    };

    struct ObjHoleCommonSpawner {
        enum class InitialState : uint8_t {
            Close = 0,
            OpenSmall = 1,
            Open = 2,
        };

        int32_t no;
        InitialState initialState;
        InitialState afterState;
        bool wall;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjHoleCommonSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjHoleCommonSpawner* pInstance);
        static void Clean(ObjHoleCommonSpawner* pInstance);
    };

    struct MiniBossCommonConfig {
        float scoutDistance;
        float scoutDistanceOutside;
        float zoomDistance;
        csl::math::Vector3 zoomOffset;
        csl::math::Vector3 zoomAngle;
        float zoomFov;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossCommonConfig* pInstance);
        static void Clean(MiniBossCommonConfig* pInstance);
    };

    struct MiniBossAshuraCommonParam {
        MiniBossCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraCommonParam* pInstance);
        static void Clean(MiniBossAshuraCommonParam* pInstance);
    };

    struct MiniBossLevelCommonConfig {
        int32_t maxHealthPoint;
        float maxStunPoint[3];
        float stunDecreaseStartTime;
        float stunDecreaseSpeed;
        float maxStaggerPoint[3];
        float staggerDecreaseStartTime;
        float staggerDecreaseSpeed;
        float attackRate;
        uint16_t expItemNum;
        uint16_t exp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossLevelCommonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossLevelCommonConfig* pInstance);
        static void Clean(MiniBossLevelCommonConfig* pInstance);
    };

    struct MiniBossAshuraLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraLevelParam* pInstance);
        static void Clean(MiniBossAshuraLevelParam* pInstance);
    };

    struct MiniBossAshuraLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraLevelBand* pInstance);
        static void Clean(MiniBossAshuraLevelBand* pInstance);
    };

    struct MiniBossAshuraObjectCircleLaser {
        float rotationSpeed;
        float moveRadiusMin;
        float moveRadiusMax;
        float initKeepTime;
        float scaleUpTime;
        float scaleUpKeepTime;
        float scaleDownTime;
        float scaleDownKeepTime;
        int32_t num;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraObjectCircleLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraObjectCircleLaser* pInstance);
        static void Clean(MiniBossAshuraObjectCircleLaser* pInstance);
    };

    struct MiniBossAshuraObjectCrawlSpark {
        int32_t createNum;
        int32_t createParkourNum;
        float createCycleTime;
        float moveSpeed;
        float lifeTime;
        float homingMaxAngle;
        float homingStartTime;
        float homingPowerMaxTime;
        float meanderingPower;
        float meanderingCycleTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraObjectCrawlSpark* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraObjectCrawlSpark* pInstance);
        static void Clean(MiniBossAshuraObjectCrawlSpark* pInstance);
    };

    struct MiniBossAshuraObjectDashCircleBulletParamByType {
        float ocTime;
        float dashSpeed;
        float ocTimeOnGround;
        float dashSpeedOnGround;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraObjectDashCircleBulletParamByType* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraObjectDashCircleBulletParamByType* pInstance);
        static void Clean(MiniBossAshuraObjectDashCircleBulletParamByType* pInstance);
    };

    struct MiniBossAshuraObjectDashCircleBullet {
        float moveSpeed;
        float lifeTime;
        MiniBossAshuraObjectDashCircleBulletParamByType frontType;
        MiniBossAshuraObjectDashCircleBulletParamByType backType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraObjectDashCircleBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraObjectDashCircleBullet* pInstance);
        static void Clean(MiniBossAshuraObjectDashCircleBullet* pInstance);
    };

    struct MiniBossAshuraObjectSlamWave {
        float blowOffRadius;
        float blowOffHeight;
        float killRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraObjectSlamWave* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraObjectSlamWave* pInstance);
        static void Clean(MiniBossAshuraObjectSlamWave* pInstance);
    };

    struct MiniBossAshuraObjectParam {
        MiniBossAshuraObjectCircleLaser circleLaser;
        MiniBossAshuraObjectCrawlSpark crawlSpark;
        MiniBossAshuraObjectDashCircleBullet dashCircleBullet;
        MiniBossAshuraObjectSlamWave slamWave;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraObjectParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraObjectParam* pInstance);
        static void Clean(MiniBossAshuraObjectParam* pInstance);
    };

    struct MiniBossAshuraPhaseOnArmCircleBulletPos {
        enum class OnArmCircleBulletType : int8_t {
            CBT_NONE = 0,
            CBT_FRONT = 1,
            CBT_BACK = 2,
            NUM_CBT = 3,
        };

        OnArmCircleBulletType left;
        OnArmCircleBulletType center;
        OnArmCircleBulletType right;
        float leftOffsetAngle;
        float centerOffsetAngle;
        float rightOffsetAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraPhaseOnArmCircleBulletPos* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraPhaseOnArmCircleBulletPos* pInstance);
        static void Clean(MiniBossAshuraPhaseOnArmCircleBulletPos* pInstance);
    };

    struct MiniBossAshuraPhaseParam {
        bool isCircleLaser;
        bool isCrawlSpark;
        bool isAttackArmWave;
        bool isAttackArmCircleBulletOnArm;
        MiniBossAshuraPhaseOnArmCircleBulletPos onArmCircleBullets[8];
        bool isAttackArmCircleBullet;
        int32_t circleBullet;
        int32_t circleBulletCreateNum;
        float circleBulletCreateAngle;
        float circleJumpTargetDistace;
        float circleBulletCreateIntervalTime;
        int32_t armAttackConsecutiveNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraPhaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraPhaseParam* pInstance);
        static void Clean(MiniBossAshuraPhaseParam* pInstance);
    };

    struct MiniBossAshuraConfig {
        MiniBossAshuraCommonParam commonParam;
        MiniBossAshuraLevelParam levelParams[5];
        MiniBossAshuraLevelBand levelBand[5];
        MiniBossAshuraObjectParam objectParam;
        MiniBossAshuraPhaseParam phaseParam[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossAshuraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossAshuraConfig* pInstance);
        static void Clean(MiniBossAshuraConfig* pInstance);
    };

    struct MiniBossBladeCommonAIParam {
        float backRange;
        float standRange;
        float shortRange;
        float middleRange;
        float runEndDistance;
        float dashEndDistance;
        float parryRange;
        float specialBeginDisappearTime;
        float specialEndDisappearTime;
        float endWarpWaitTime;
        float shiftTimeMin;
        float shiftTimeMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeCommonAIParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeCommonAIParam* pInstance);
        static void Clean(MiniBossBladeCommonAIParam* pInstance);
    };

    struct MiniBossBladeCommonParam {
        MiniBossCommonConfig commonConfig;
        MiniBossBladeCommonAIParam ai;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeCommonParam* pInstance);
        static void Clean(MiniBossBladeCommonParam* pInstance);
    };

    struct MiniBossBladeLevelCommonParam {
        float angryHpRatio;
        float stunTime;
        float downTime;
        float strikeComboTimer;
        float cyloopComboTimer;
        float blowupComboTimer;
        float attackMotionSpeed;
        float preliminaryMotionSpeed;
        float ghostPreliminaryMotionSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeLevelCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeLevelCommonParam* pInstance);
        static void Clean(MiniBossBladeLevelCommonParam* pInstance);
    };

    struct MiniBossBladeLevelAIParam {
        float firstContactWait;
        float specialAttackInterval;
        float shortRangeIntervalMin;
        float shortRangeIntervalMax;
        float middleRangeIntervalMin;
        float middleRangeIntervalMax;
        float counterIntervalMin;
        float counterIntervalMax;
        float afterDashIntervalMin;
        float afterDashIntervalMax;
        float parryIntervalMin;
        float parryIntervalMax;
        float parryDuration;
        float slashComboCoolTime;
        float ghostDashSlashCoolTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeLevelAIParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeLevelAIParam* pInstance);
        static void Clean(MiniBossBladeLevelAIParam* pInstance);
    };

    struct MiniBossBladeSpecialAttackParam {
        uint8_t spawnNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeSpecialAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeSpecialAttackParam* pInstance);
        static void Clean(MiniBossBladeSpecialAttackParam* pInstance);
    };

    struct MiniBossBladeLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig common;
        MiniBossBladeLevelCommonParam general;
        MiniBossBladeLevelAIParam ai;
        MiniBossBladeSpecialAttackParam special;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeLevelParam* pInstance);
        static void Clean(MiniBossBladeLevelParam* pInstance);
    };

    struct MiniBossBladeLevelPhaseAction {
        float verticalSlashRate;
        float horizontalSlashRate;
        float slashComboRate;
        float backSlashRate;
        float dashRate;
        float dashSlashRate;
        float ghostDashSlashRate;
        float specialAttackRate;
        bool useTimeStopAttack;
        float guardBeginTime;
        float guardJumpLaserRate;
        float parryJumpLaserRate;
        float cyloopJumpLaserRate;
        float doubleJumpLaserRate;
        bool useParry;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeLevelPhaseAction* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeLevelPhaseAction* pInstance);
        static void Clean(MiniBossBladeLevelPhaseAction* pInstance);
    };

    struct MiniBossBladeLevelBand {
        uint32_t level;
        MiniBossBladeLevelPhaseAction phases[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeLevelBand* pInstance);
        static void Clean(MiniBossBladeLevelBand* pInstance);
    };

    struct MiniBossBladeConfig {
        MiniBossBladeCommonParam commonParam;
        MiniBossBladeLevelParam levelParams[5];
        MiniBossBladeLevelBand levelBands[5];
        RingParameter ringParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossBladeConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossBladeConfig* pInstance);
        static void Clean(MiniBossBladeConfig* pInstance);
    };

    struct ObjCGGAttachmentConfig {
        float radius;
        csl::ut::Color<uint8_t> color;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGAttachmentConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGAttachmentConfig* pInstance);
        static void Clean(ObjCGGAttachmentConfig* pInstance);
    };

    struct ObjCGGBulletNormalConfig {
        float radius;
        csl::ut::Color<uint8_t> color;
        float speed;
        float waitFollowTime;
        float followTime;
        float waitKillTime;
        float radiusBulletCircle;
        float followLimitAngleHorizontal;
        float followLimitAngleVertical;
        float rotateDeceleration;
        float muzzuleEffectLoopTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGBulletNormalConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGBulletNormalConfig* pInstance);
        static void Clean(ObjCGGBulletNormalConfig* pInstance);
    };

    struct RailCameraParam {
        float yOffset;
        float cameraElevation;
        float cameraDistance;
        float cameraFovy;
        float radius;
        float cameraLookAtPointOffsetY;
        float cameraDegreeForClockwiseMovement;
        float cameraDegreeForCounterClockwiseMovement;
        float cameraMaxChangeableDegreeByStickInput;
        float cameraMaxDegreeChangedByStickInputPerSec;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(RailCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(RailCameraParam* pInstance);
        static void Clean(RailCameraParam* pInstance);
    };

    struct ObjCGGRootConfig {
        float radius;
        csl::math::Vector3 offset;
        csl::ut::Color<uint8_t> colorActive;
        csl::ut::Color<uint8_t> colorDeactive;
        float timerHeightOffset;
        RailCameraParam twoRailCamera;
        RailCameraParam threeRailCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGRootConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGRootConfig* pInstance);
        static void Clean(ObjCGGRootConfig* pInstance);
    };

    struct ObjCGGResetBindConfig {
        float radius;
        csl::ut::Color<uint8_t> color;
        float timeToReachTimer;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGResetBindConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGResetBindConfig* pInstance);
        static void Clean(ObjCGGResetBindConfig* pInstance);
    };

    struct ObjCGGLaserConfig {
        float radius;
        float heightInterval;
        csl::ut::Color<uint8_t> color;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGLaserConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGLaserConfig* pInstance);
        static void Clean(ObjCGGLaserConfig* pInstance);
    };

    struct ObjCGGConfig {
        ObjCGGRootConfig root;
        ObjCGGBulletNormalConfig bulletNormal;
        ObjCGGResetBindConfig resetBind;
        ObjCGGLaserConfig laser;
        ObjCGGAttachmentConfig attachment;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjCGGConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjCGGConfig* pInstance);
        static void Clean(ObjCGGConfig* pInstance);
    };

    struct MiniBossChagerAirDrop {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        float upRotOffset;
        float yAngleOffset;
        float maxAngle;
        float shotTime;
        float addSpeedMax;
        float lineTime;
        float fallPower;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerAirDrop* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerAirDrop* pInstance);
        static void Clean(MiniBossChagerAirDrop* pInstance);
    };

    struct MiniBossChagerBarrageParam {
        enum class BarrageType : int8_t {
            TYPE_LASER = 0,
            TYPE_BALL = 1,
            TYPE_BALL_L = 2,
            TYPE_BALL_LL = 3,
            TYPE_AIR_DROP = 4,
        };

        BarrageType type;
        csl::ut::VariableString damageTag;
        float startSpeed;
        float decelePower;
        float minSpeed;
        float lifeTime;
        float waitTime;
        float lineTime;
        float scale;
        float hitVelocity;
        float parriedSpeed;
        int32_t parriedDamage;
        float parriedStaggerValue;
        float parriedStunValue;
        csl::ut::VariableString hitEffName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerBarrageParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerBarrageParam* pInstance);
        static void Clean(MiniBossChagerBarrageParam* pInstance);
    };

    struct MiniBossChagerChaseShot {
        float startWaitTime;
        int32_t muzzleNum;
        csl::math::Vector3 muzzlePosOffset[10];
        float muzzleRotOffsetX[10];
        float muzzleRotOffsetY[10];
        float muzzleTimeOffset[10];
        float muzzleLaserStartOffset[10];
        float laserShotTimeMin;
        float laserShotTimeMax;
        int32_t laserNum;
        float laserRange;
        float laserEndTime;
        float laserSpeed;
        float laserRandomRangeMin;
        float laserRandomRangeMax;
        float laserHomingTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerChaseShot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerChaseShot* pInstance);
        static void Clean(MiniBossChagerChaseShot* pInstance);
    };

    struct MiniBossChagerCrossBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        bool isFollowPlayer;
        float startWaitTime;
        float shotIntarval;
        float maxAngle;
        float rotateSpeed;
        float rotateAngle;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerCrossBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerCrossBullet* pInstance);
        static void Clean(MiniBossChagerCrossBullet* pInstance);
    };

    struct MiniBossChagerCrossLaser {
        float startWaitTime;
        float moveSpeed;
        float setDeg;
        float lifeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerCrossLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerCrossLaser* pInstance);
        static void Clean(MiniBossChagerCrossLaser* pInstance);
    };

    struct MiniBossChagerDiffuseLaser {
        float startWaitTime;
        float yOffset;
        float scale;
        int32_t muzzleNum;
        csl::math::Vector3 muzzlePosOffset[10];
        float muzzleRotOffset[10];
        float muzzleTimeOffset[10];
        float muzzleLaserStartOffset[10];
        int32_t laserNum;
        int32_t attackNum;
        float laserRandomRange;
        float laserTime;
        float laserEndTime;
        float laserNextTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerDiffuseLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerDiffuseLaser* pInstance);
        static void Clean(MiniBossChagerDiffuseLaser* pInstance);
    };

    struct MiniBossChagerFollowLaser {
        float startWaitTime;
        float yOffset;
        float zOffset;
        float moveSpeed;
        float followDeg;
        int32_t shotNum;
        float intervalTime;
        float lifeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerFollowLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerFollowLaser* pInstance);
        static void Clean(MiniBossChagerFollowLaser* pInstance);
    };

    struct MiniBossChagerGroundObj {
        int32_t bulletDamage;
        float bulletStaggerPoint;
        float bulletSpeed;
        float bulletFallSpeed;
        float bulletCyloopSpeed;
        float bulletGroundTime;
        float bulletFallTime;
        float yOffset;
        float zOffset;
        float upRotOffset;
        float yAngleOffset;
        float maxAngle;
        float shotTime;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerGroundObj* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerGroundObj* pInstance);
        static void Clean(MiniBossChagerGroundObj* pInstance);
    };

    struct MiniBossChagerMassLaser {
        float startWaitTime;
        float yOffset;
        float scale;
        float lifeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerMassLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerMassLaser* pInstance);
        static void Clean(MiniBossChagerMassLaser* pInstance);
    };

    struct MiniBossChagerSimpleRotateBullet {
        int32_t barrageIndex;
        float startWaitTime;
        int32_t muzzleNum;
        float yOffset;
        float zOffset;
        float heightLength;
        float rotSpeed;
        float shakeSpeed;
        float intervalTime;
        float activeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerSimpleRotateBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerSimpleRotateBullet* pInstance);
        static void Clean(MiniBossChagerSimpleRotateBullet* pInstance);
    };

    struct MiniBossChagerVerticalRoundBullet {
        int32_t barrageIndex;
        float startWaitTime;
        int32_t muzzleNum;
        int32_t verticalNum;
        float radius;
        float spaceRate;
        float verticalWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerVerticalRoundBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerVerticalRoundBullet* pInstance);
        static void Clean(MiniBossChagerVerticalRoundBullet* pInstance);
    };

    struct MiniBossChagerVortexLaser {
        float startWaitTime;
        int32_t muzzleNum;
        float yOffset;
        float zOffset;
        float rotSpeed;
        float moveSpeed;
        float activeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChagerVortexLaser* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChagerVortexLaser* pInstance);
        static void Clean(MiniBossChagerVortexLaser* pInstance);
    };

    struct MiniBossChargerAttackParam {
        enum class AttackType : int32_t {
            AttackTypeInvalid = 0,
            AttackSimpleRotateBullet = 1,
            AttackFollowLaser = 2,
            AttackVortexLaser = 3,
            AttackCrossLaser = 4,
            AttackCrossBullet = 5,
            AttackMassLaser = 6,
            AttackVerticalRoundBullet = 7,
            AttackPyramidRoundBullet = 8,
            AttackPlaneUpDownBullet = 9,
            AttackTriangleBatteryBullet = 10,
            AttackPlayerFallBullet = 11,
            AttackGatlingRevolverBullet = 12,
            AttackWinderBullet = 13,
            AttackShotgunBullet = 14,
            AttackAirDropBullet = 15,
            AttackChaseShotObject = 16,
            AttackDiffuseLaser = 17,
            AttackChaseShot = 18,
            AttackTypeNum = 19,
        };

        AttackType type;
        int32_t index;
        float rate;
        float restTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerAttackParam* pInstance);
        static void Clean(MiniBossChargerAttackParam* pInstance);
    };

    struct MiniBossChargerCameraShake {
        float time;
        float magnitude;
        int32_t freq;
        float attnRatio;
        float shakeRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerCameraShake* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerCameraShake* pInstance);
        static void Clean(MiniBossChargerCameraShake* pInstance);
    };

    struct MiniBossChargerCatchParam {
        float hitDistance;
        float durationBind;
        float distanceStartBlackOut;
        float timeEaseBlackOut;
        float timeDelayEndtBlackOut;
        csl::math::Vector3 tangentFrom;
        csl::math::Vector3 tangentTo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerCatchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerCatchParam* pInstance);
        static void Clean(MiniBossChargerCatchParam* pInstance);
    };

    struct MiniBossPyramidRoundBullet {
        int32_t barrageIndex;
        float startWaitTime;
        int32_t muzzleNum;
        float radius;
        float height;
        float scale;
        int32_t sideNum;
        int32_t attackNum;
        float intervalTime;
        float nextDeg;
        float shotWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossPyramidRoundBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossPyramidRoundBullet* pInstance);
        static void Clean(MiniBossPyramidRoundBullet* pInstance);
    };

    struct MiniBossPlaneUpDownBullet {
        int32_t barrageIndex;
        float startWaitTime;
        float yOffset;
        float scale;
        float step;
        int32_t allNum;
        float upRate;
        float downRate;
        float frontRate;
        float shotWaitTimeMin;
        float shotWaitTimeMax;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossPlaneUpDownBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossPlaneUpDownBullet* pInstance);
        static void Clean(MiniBossPlaneUpDownBullet* pInstance);
    };

    struct MiniBossTriangleBatteryBullet {
        int32_t barrageIndex;
        float startWaitTime;
        float yOffset;
        float edgeLength;
        float activeTime;
        float intervalTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTriangleBatteryBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTriangleBatteryBullet* pInstance);
        static void Clean(MiniBossTriangleBatteryBullet* pInstance);
    };

    struct MiniBossPlayerFallBullet {
        int32_t barrageIndex;
        float startWaitTime;
        float yOffset;
        float scale;
        float lengthMin;
        float lengthMax;
        float intervalTime;
        float shotWaitTime;
        float activeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossPlayerFallBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossPlayerFallBullet* pInstance);
        static void Clean(MiniBossPlayerFallBullet* pInstance);
    };

    struct MiniBossGatlingRevolverBullet {
        int32_t barrageIndex;
        float startWaitTime;
        float yOffset;
        float zOffset;
        float scale;
        int32_t muzzleNum;
        float bulletRad;
        float intervalTime;
        float activeTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossGatlingRevolverBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossGatlingRevolverBullet* pInstance);
        static void Clean(MiniBossGatlingRevolverBullet* pInstance);
    };

    struct MiniBossWinderBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        bool isFollowPlayer;
        float shotIntarval;
        float maxAngle;
        float rotateSpeed;
        float rotateAngle;
        float barrageAngleDiff;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWinderBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWinderBullet* pInstance);
        static void Clean(MiniBossWinderBullet* pInstance);
    };

    struct MiniBossShotgunBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        bool isFollowPlayer;
        float shotIntarval;
        float maxAngle;
        float yAngleOffset;
        float shotTime;
        float addSpeedMax;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossShotgunBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossShotgunBullet* pInstance);
        static void Clean(MiniBossShotgunBullet* pInstance);
    };

    struct MiniBossChargerCommonParam {
        MiniBossCommonConfig commonConfig;
        MiniBossChagerBarrageParam barrage[16];
        MiniBossChagerSimpleRotateBullet simpleRotateBullet[3];
        MiniBossChagerFollowLaser followLaser[3];
        MiniBossChagerVortexLaser vortexLaser[3];
        MiniBossChagerCrossLaser crossLaser[3];
        MiniBossChagerCrossBullet crossBullet[3];
        MiniBossChagerMassLaser massLaser[3];
        MiniBossChagerVerticalRoundBullet verticalRoundBullet[3];
        MiniBossPyramidRoundBullet pyramidRoundBullet[3];
        MiniBossPlaneUpDownBullet planeUpDownBullet[3];
        MiniBossTriangleBatteryBullet triangleBatteryBullet[3];
        MiniBossPlayerFallBullet playerFallBullet[3];
        MiniBossGatlingRevolverBullet gatlingRevolverBullet[3];
        MiniBossWinderBullet winderBullet[3];
        MiniBossShotgunBullet shotgunBullet[3];
        MiniBossChagerAirDrop airDrop[3];
        MiniBossChagerGroundObj groundObj[3];
        MiniBossChagerDiffuseLaser diffuseLaser[3];
        MiniBossChagerChaseShot chaseShot[3];
        MiniBossChargerCatchParam atkCatch;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerCommonParam* pInstance);
        static void Clean(MiniBossChargerCommonParam* pInstance);
    };

    struct MiniBossChargerLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;
        float stunTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerLevelParam* pInstance);
        static void Clean(MiniBossChargerLevelParam* pInstance);
    };

    struct MiniBossChargerHPRateParam {
        int32_t rateHp;
        csl::ut::VariableString grindSetName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerHPRateParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerHPRateParam* pInstance);
        static void Clean(MiniBossChargerHPRateParam* pInstance);
    };

    struct MiniBossChargerLevelBand {
        enum class AttackType : int32_t {
            AttackTypeInvalid = 0,
            AttackSimpleRotateBullet = 1,
            AttackFollowLaser = 2,
            AttackVortexLaser = 3,
            AttackCrossLaser = 4,
            AttackCrossBullet = 5,
            AttackMassLaser = 6,
            AttackVerticalRoundBullet = 7,
            AttackPyramidRoundBullet = 8,
            AttackPlaneUpDownBullet = 9,
            AttackTriangleBatteryBullet = 10,
            AttackPlayerFallBullet = 11,
            AttackGatlingRevolverBullet = 12,
            AttackWinderBullet = 13,
            AttackShotgunBullet = 14,
            AttackAirDropBullet = 15,
            AttackChaseShotObject = 16,
            AttackDiffuseLaser = 17,
            AttackChaseShot = 18,
            AttackTypeNum = 19,
        };

        int32_t level;
        float rate;
        float chanceTime;
        float chanceTimeMoveSpeed;
        float chanceTimeDecSpeed;
        float chanceTimeSpeedMin;
        float damageTime;
        float chanceTimeAddSpeed;
        AttackType attackTable[10];
        int32_t attackIndexTable[10];
        MiniBossChargerHPRateParam hpRateParams[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerLevelBand* pInstance);
        static void Clean(MiniBossChargerLevelBand* pInstance);
    };

    struct MiniBossChargerLevel1 {
        enum class AttackType : int32_t {
            AttackTypeInvalid = 0,
            AttackSimpleRotateBullet = 1,
            AttackFollowLaser = 2,
            AttackVortexLaser = 3,
            AttackCrossLaser = 4,
            AttackCrossBullet = 5,
            AttackMassLaser = 6,
            AttackVerticalRoundBullet = 7,
            AttackPyramidRoundBullet = 8,
            AttackPlaneUpDownBullet = 9,
            AttackTriangleBatteryBullet = 10,
            AttackPlayerFallBullet = 11,
            AttackGatlingRevolverBullet = 12,
            AttackWinderBullet = 13,
            AttackShotgunBullet = 14,
            AttackAirDropBullet = 15,
            AttackChaseShotObject = 16,
            AttackDiffuseLaser = 17,
            AttackChaseShot = 18,
            AttackTypeNum = 19,
        };

        float range;
        AttackType attackTable[2];
        int32_t attackIndexTable[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerLevel1* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerLevel1* pInstance);
        static void Clean(MiniBossChargerLevel1* pInstance);
    };

    struct MiniBossChargerConfig {
        MiniBossChargerCommonParam commonParam;
        MiniBossChargerLevelParam levelParams[5];
        MiniBossChargerLevelBand levelBands[5];
        MiniBossChargerLevel1 level1Params[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossChargerConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossChargerConfig* pInstance);
        static void Clean(MiniBossChargerConfig* pInstance);
    };

    struct MiniBossDarumaBombParam {
        float explosionRadius;
        float explosionEffectScale;
        float explosionTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaBombParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaBombParam* pInstance);
        static void Clean(MiniBossDarumaBombParam* pInstance);
    };

    struct MiniBossDarumaCameraShakeParam {
        float time;
        float magnitude;
        int32_t freq;
        float attnRatio;
        float shakeRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaCameraShakeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaCameraShakeParam* pInstance);
        static void Clean(MiniBossDarumaCameraShakeParam* pInstance);
    };

    struct MiniBossDarumaShotParam {
        int32_t count;
        float intervalTime;
        float pitchMin;
        float pitchMax;
        float pitchOffsetMin;
        float pitchOffsetMax;
        float yawOffsetRange;
        bool sweepFire;
        bool predict;
        float radius;
        float speed;
        float lifeTime;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaShotParam* pInstance);
        static void Clean(MiniBossDarumaShotParam* pInstance);
    };

    struct MiniBossDarumaFlamePillarParam {
        float burnLifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaFlamePillarParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaFlamePillarParam* pInstance);
        static void Clean(MiniBossDarumaFlamePillarParam* pInstance);
    };

    struct MiniBossDarumaWaveBombParam {
        float burnLifeTime;
        float cycleTime;
        float cycleDistance;
        float homingLimitAngle;
        float maxTurnAngle;
        uint32_t cycleCount;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaWaveBombParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaWaveBombParam* pInstance);
        static void Clean(MiniBossDarumaWaveBombParam* pInstance);
    };

    struct MiniBossDarumaStompingParam {
        float range;
        float riseDistance;
        float riseTime;
        float chaseSpeed;
        float chaseTime;
        float speed;
        float rotationSpeed;
        float timingGap;
        float spinTime;
        float ringRiseTime;
        float waitTime;
        float staggerTime;
        float staggerDistance;
        float groundImpactRadius;
        float waveRadius;
        float waveAppearRadius;
        float waveKeepRadius;
        float waveDisappearRadius;
        float waveHeightMin;
        float waveHeightMax;
        float waveLifeTime;
        float waveVelocityX;
        float waveVelocityY;
        float laserRadius;
        float laserLength;
        float laserTime;
        float laserRotationInitialSpeed;
        float laserRotationAccel;
        float laserRotationMaxSpeed;
        float laserAccelDelayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaStompingParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaStompingParam* pInstance);
        static void Clean(MiniBossDarumaStompingParam* pInstance);
    };

    struct MiniBossDarumaCyloopReactionParam {
        csl::math::Vector3 targetOffSet;
        float azimuth;
        float elevation;
        float distance;
        float zRoll;
        float fovy;
        csl::math::Vector3 cameraMoveDir;
        float cameraMoveSpeed;
        float interpolateTime;
        float bodyBreakWaitTime;
        float changeStateWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaCyloopReactionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaCyloopReactionParam* pInstance);
        static void Clean(MiniBossDarumaCyloopReactionParam* pInstance);
    };

    struct MiniBossDarumaDebrisBodySmallParam {
        float lifeTime;
        float forceScale;
        float forceMin;
        float forceMax;
        float forceCyloopExplode;
        float gravity;
        float weight;
        float friction;
        int8_t maxPieceNum;
        csl::math::Vector3 centerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaDebrisBodySmallParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaDebrisBodySmallParam* pInstance);
        static void Clean(MiniBossDarumaDebrisBodySmallParam* pInstance);
    };

    struct MiniBossDarumaDebrisParam {
        float damageVelocityScale;
        float minSpeed;
        float maxSpeed;
        MiniBossDarumaDebrisBodySmallParam body;
        MiniBossDarumaDebrisBodySmallParam c;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaDebrisParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaDebrisParam* pInstance);
        static void Clean(MiniBossDarumaDebrisParam* pInstance);
    };

    struct MiniBossDarumaCommonParam {
        MiniBossCommonConfig commonConfig;
        float headHeight;
        int32_t bodyMaxHealthPoint;
        float bodyRadius;
        float bodyHeight;
        float baseHeight;
        float partSpace;
        float ringRadius;
        float ringHeight;
        float ringRotationSpeed;
        float gravity;
        float stunTime;
        float maxSpeed;
        float stompingTransitRange;
        int32_t questKodamaMaxNum[3];
        MiniBossDarumaShotParam shot;
        MiniBossDarumaShotParam shot3way;
        MiniBossDarumaShotParam shot5way;
        MiniBossDarumaBombParam bomb;
        MiniBossDarumaFlamePillarParam flamePillar;
        MiniBossDarumaWaveBombParam waveBomb;
        MiniBossDarumaStompingParam stomping;
        MiniBossDarumaStompingParam stompingThorn;
        MiniBossDarumaStompingParam stompingQuest[3];
        MiniBossDarumaStompingParam stompingQuestHigh[3];
        MiniBossDarumaStompingParam stompingQuest2[3];
        MiniBossDarumaStompingParam stompingQuest2High[3];
        MiniBossDarumaCyloopReactionParam cyloopReaction;
        MiniBossDarumaShotParam shotBerserk;
        MiniBossDarumaShotParam shotBerserk3way;
        MiniBossDarumaShotParam shotBerserk5way;
        MiniBossDarumaStompingParam hop;
        MiniBossDarumaStompingParam stompingBerserk;
        MiniBossDarumaFlamePillarParam flamePillarBerserk;
        MiniBossDarumaDebrisParam debris;
        MiniBossDarumaCameraShakeParam cameraShakeStomping;
        MiniBossDarumaCameraShakeParam cameraShakeStompingQuest;
        MiniBossDarumaCameraShakeParam cameraShakeStompingQuest2;
        MiniBossDarumaCameraShakeParam cameraShakeDrop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaCommonParam* pInstance);
        static void Clean(MiniBossDarumaCommonParam* pInstance);
    };

    struct MiniBossDarumaLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaLevelParam* pInstance);
        static void Clean(MiniBossDarumaLevelParam* pInstance);
    };

    struct MiniBossDarumaLevelBand {
        enum class StompingType : int8_t {
            WEEK = 0,
            WAVE = 1,
        };

        enum class BulletType : int8_t {
            NORMAL = 0,
            THREE_WAY = 1,
            FIVE_WAY = 2,
        };

        enum class SpecialBulletType : int8_t {
            BOMB = 0,
            PILLAR = 1,
            WAVE_BOMB = 2,
        };

        uint32_t level;
        StompingType stompingType;
        int8_t laserCount;
        bool isBarrier;
        StompingType stompingTypeThorn;
        int8_t laserCountThorn;
        bool isBarrierThorn;
        BulletType bulletType;
        SpecialBulletType specialBulletType;
        int8_t stompingMaxBreakBodyCount;
        bool isThorn;
        csl::math::Vector3 headRigidColliderExtents;
        csl::math::Vector3 headRigidCollHeightOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaLevelBand* pInstance);
        static void Clean(MiniBossDarumaLevelBand* pInstance);
    };

    struct MiniBossDarumaConfig {
        MiniBossDarumaCommonParam commonParam;
        MiniBossDarumaLevelParam levelParams[5];
        MiniBossDarumaLevelBand levelBands[5];
        MiniBossDarumaLevelParam levelParamQuest;
        MiniBossDarumaLevelBand levelBandQuest;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaConfig* pInstance);
        static void Clean(MiniBossDarumaConfig* pInstance);
    };

    struct MiniBossDarumaSpecialShotParamBase {
        enum class ScatterType : int8_t {
            RANDOM = 0,
            HOMING = 1,
            SPIRAL = 2,
        };

        int32_t count;
        float intervalTime;
        float shootPitchMin;
        float shootPitchMax;
        float initialSpeedMin;
        float initialSpeedMax;
        float maxAngle;
        float moveRadius;
        float maxMoveSpeed;
        float accel;
        float waitTime;
        float featherLifeTime;
        ScatterType m_scatterTypeTable[6];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossDarumaSpecialShotParamBase* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossDarumaSpecialShotParamBase* pInstance);
        static void Clean(MiniBossDarumaSpecialShotParamBase* pInstance);
    };

    struct FlayerEscapeShotSequenceTable {
        int32_t id;
        float interval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlayerEscapeShotSequenceTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlayerEscapeShotSequenceTable* pInstance);
        static void Clean(FlayerEscapeShotSequenceTable* pInstance);
    };

    struct FlayerEscapeShotSequenceTableData {
        bool isUse;
        FlayerEscapeShotSequenceTable table[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlayerEscapeShotSequenceTableData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlayerEscapeShotSequenceTableData* pInstance);
        static void Clean(FlayerEscapeShotSequenceTableData* pInstance);
    };

    struct FlyerAutoLockonParam {
        float lockonDistance;
        float unlockDistance;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerAutoLockonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerAutoLockonParam* pInstance);
        static void Clean(FlyerAutoLockonParam* pInstance);
    };

    struct FlyerEscapeCameraParam {
        enum class PlayerOffsetType : int8_t {
            PLAYER_OFFSET_NORMAL = 0,
            PLAYER_OFFSET_ABSOLUTE = 1,
        };

        float fovy;
        float zRot;
        float distance;
        float pathOffset;
        bool usePathVerticalComponent;
        bool usePathNormal;
        float angleSensitivity;
        float angleSensitivityBoost;
        float azimuthOffsetDeg;
        float elevationOffsetDeg;
        float gravityOffset;
        csl::math::Vector3 playerOffset;
        PlayerOffsetType playerOffsetType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerEscapeCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerEscapeCameraParam* pInstance);
        static void Clean(FlyerEscapeCameraParam* pInstance);
    };

    struct FlyerEscapeShotTableData {
        enum class HorizontalType : int8_t {
            HorzCenter = 0,
            HorzLeft = 1,
            HorzRight = 2,
        };

        HorizontalType horz[6];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerEscapeShotTableData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerEscapeShotTableData* pInstance);
        static void Clean(FlyerEscapeShotTableData* pInstance);
    };

    struct FlyerEscapeShotParam {
        FlyerEscapeShotTableData posTable[16];
        float interval;
        float waitAfterLoop;
        float readyDuration;
        float shotAnimSpeed;
        uint32_t shotAnimNum;
        float initSpeed;
        float maxSpeed;
        float acc;
        float lifeTime;
        float nearest;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerEscapeShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerEscapeShotParam* pInstance);
        static void Clean(FlyerEscapeShotParam* pInstance);
    };

    struct FlyerEscapeQuickStepParam {
        bool enable;
        float speed;
        float boostSpeed;
        float boostSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerEscapeQuickStepParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerEscapeQuickStepParam* pInstance);
        static void Clean(FlyerEscapeQuickStepParam* pInstance);
    };

    struct FlyerEscapeParam {
        float startSpeed;
        float decrease;
        float minSpeed;
        float targetDisableTime;
        float resetByFallTime;
        float resetByDistance;
        FlyerEscapeShotParam shot;
        FlyerEscapeCameraParam camera;
        FlyerEscapeQuickStepParam quickStep;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerEscapeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerEscapeParam* pInstance);
        static void Clean(FlyerEscapeParam* pInstance);
    };

    struct FlyerGuardParam {
        float duration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerGuardParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerGuardParam* pInstance);
        static void Clean(FlyerGuardParam* pInstance);
    };

    struct FlyerIdlingNearParam {
        float durationMin;
        float durationMax;
        uint32_t selectRatio[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerIdlingNearParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerIdlingNearParam* pInstance);
        static void Clean(FlyerIdlingNearParam* pInstance);
    };

    struct FlyerNearEndLaunchParam {
        float outStrength;
        float inStrength;
        float outElev;
        float inElev;
        float speedMin;
        float speedMax;
        float speedMinLength;
        float speedMaxLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerNearEndLaunchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerNearEndLaunchParam* pInstance);
        static void Clean(FlyerNearEndLaunchParam* pInstance);
    };

    struct FlyerNearStartCamParam {
        float duration;
        csl::math::Vector3 posOffset;
        float fovy;
        float interpolateTimePush;
        float interpolateTimePop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerNearStartCamParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerNearStartCamParam* pInstance);
        static void Clean(FlyerNearStartCamParam* pInstance);
    };

    struct FlyerNearParam {
        float duration;
        float startHABounceUp;
        float startHABounceBack;
        float preliminaryMotionSpeed;
        float resetByDistance;
        FlyerNearStartCamParam startCam;
        FlyerIdlingNearParam idling;
        FlyerGuardParam guard;
        FlyerAutoLockonParam lockon;
        FlyerNearEndLaunchParam launch;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerNearParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerNearParam* pInstance);
        static void Clean(FlyerNearParam* pInstance);
    };

    struct FlyerTrailParam {
        float interval;
        int32_t recordNumWander;
        int32_t recordNumWatch;
        int32_t recordNumBattle;
        float width;
        float wallHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerTrailParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerTrailParam* pInstance);
        static void Clean(FlyerTrailParam* pInstance);
    };

    struct FlyerWanderParam {
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerWanderParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerWanderParam* pInstance);
        static void Clean(FlyerWanderParam* pInstance);
    };

    struct FlyerWatchShotParam {
        float interval;
        float readyDuration;
        float shotAnimSpeed;
        uint32_t shotAnimNum;
        float speed;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerWatchShotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerWatchShotParam* pInstance);
        static void Clean(FlyerWatchShotParam* pInstance);
    };

    struct FlyerWatchParam {
        float speed;
        float changeWanderTime;
        FlyerWatchShotParam shot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlyerWatchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlyerWatchParam* pInstance);
        static void Clean(FlyerWatchParam* pInstance);
    };

    struct MiniBossFlyerCommonParam {
        MiniBossCommonConfig commonConfig;
        FlyerTrailParam trail;
        FlyerWanderParam wander;
        FlyerWatchParam watch;
        FlyerEscapeParam escape;
        FlyerNearParam nearRange;
        float stunTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossFlyerCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossFlyerCommonParam* pInstance);
        static void Clean(MiniBossFlyerCommonParam* pInstance);
    };

    struct MiniBossFlyerLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossFlyerLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossFlyerLevelParam* pInstance);
        static void Clean(MiniBossFlyerLevelParam* pInstance);
    };

    struct MiniBossFlyerLevelBand {
        int32_t level;
        FlayerEscapeShotSequenceTableData sequence[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossFlyerLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossFlyerLevelBand* pInstance);
        static void Clean(MiniBossFlyerLevelBand* pInstance);
    };

    struct MiniBossFlyerConfig {
        MiniBossFlyerCommonParam commonParam;
        MiniBossFlyerLevelParam levelParams[5];
        MiniBossFlyerLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossFlyerConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossFlyerConfig* pInstance);
        static void Clean(MiniBossFlyerConfig* pInstance);
    };

    struct ObjSkierMissileConfig {
        float colliderHeight;
        float colliderRadius;
        csl::math::Vector3 colliderOffset;
        float explodeRadius;
        float distanceStartCurve;
        float distanceEndCurve;
        float inducedExplosionTimePerDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSkierMissileConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSkierMissileConfig* pInstance);
        static void Clean(ObjSkierMissileConfig* pInstance);
    };

    struct MiniBossSkeirPlayerControlLR {
        float LRFBNormalRatioSpeed;
        float LRDangerAngle;
        float LRDangerTime;
        float LRInputInterfere;
        float LRRecoverSpeed;
        float LRDragSpeed;
        float LRRecoverEndRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkeirPlayerControlLR* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkeirPlayerControlLR* pInstance);
        static void Clean(MiniBossSkeirPlayerControlLR* pInstance);
    };

    struct MiniBossSkeirPlayerControlTail {
        float tailRatioChangeSpeed;
        float tailRatioRecoverSpeed;
        float tailAddSpeedMax;
        float tailAddSpeedAttenuation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkeirPlayerControlTail* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkeirPlayerControlTail* pInstance);
        static void Clean(MiniBossSkeirPlayerControlTail* pInstance);
    };

    struct MiniBossSkeirPlayerControlUD {
        float UDSafeRatio;
        float UDRecoverSpeed;
        float UDDragSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkeirPlayerControlUD* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkeirPlayerControlUD* pInstance);
        static void Clean(MiniBossSkeirPlayerControlUD* pInstance);
    };

    struct MiniBossSkeirTailMoveParam {
        float tailRotateMinSpeed;
        float tailRotateMaxSpeed;
        float tailRotateAddSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkeirTailMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkeirTailMoveParam* pInstance);
        static void Clean(MiniBossSkeirTailMoveParam* pInstance);
    };

    struct MiniBossSkierSkiAcitionRate {
        float NoActionRate;
        float SnakeMoveRate;
        float JumpHighRate;
        float JumpLowRate;
        float PylonRate;
        float MissileRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierSkiAcitionRate* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierSkiAcitionRate* pInstance);
        static void Clean(MiniBossSkierSkiAcitionRate* pInstance);
    };

    struct MiniBossSkierBattlePhaseParam {
        float HPRate;
        MiniBossSkierSkiAcitionRate actionRate;
        float showWeaknessTimeReTry;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierBattlePhaseParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierBattlePhaseParam* pInstance);
        static void Clean(MiniBossSkierBattlePhaseParam* pInstance);
    };

    struct MiniBossSkierColliderParam {
        float blockRadius;
        float blockHeight;
        float damageRadius;
        float damagedBlockRadius;
        float damagedBlockHeight;
        float returnRadius;
        float returnBlockRadius;
        float returnHeight;
        float weakPointRadius;
        float grabRadius;
        float attackRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierColliderParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierColliderParam* pInstance);
        static void Clean(MiniBossSkierColliderParam* pInstance);
    };

    struct MiniBossSkierTailParam {
        float tailExtendTime;
        float tailNodeLenthMin;
        float tailNodeLenthMax;
        float checkGroundStartDistanceOnSkiing;
        float checkGroundEndDistanceOnSkiing;
        float checkGroundEndDistanceOnSkiingJump;
        float checkGroundEndDistanceOnSkiingCamera;
        MiniBossSkeirTailMoveParam rotateParamNormal;
        MiniBossSkeirTailMoveParam rotateParamAttack;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierTailParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierTailParam* pInstance);
        static void Clean(MiniBossSkierTailParam* pInstance);
    };

    struct MiniBossSkierMissileParam {
        float timeExplodePassed;
        float timeExplodeAuto;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierMissileParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierMissileParam* pInstance);
        static void Clean(MiniBossSkierMissileParam* pInstance);
    };

    struct MiniBossSkierCustomCameraParam {
        float interoplateTimeActivate;
        float interoplateTimeDeactivate;
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 cameraPosOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierCustomCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierCustomCameraParam* pInstance);
        static void Clean(MiniBossSkierCustomCameraParam* pInstance);
    };

    struct MiniBossSkierCommonParam {
        MiniBossCommonConfig commonConfig;
        MiniBossSkierColliderParam colliderParam;
        MiniBossSkierTailParam tailParam;
        MiniBossSkeirPlayerControlLR LRControlParam;
        MiniBossSkeirPlayerControlUD UDControlParam;
        MiniBossSkeirPlayerControlTail tailControlParam;
        MiniBossSkierMissileParam missileParam;
        MiniBossSkierCustomCameraParam customCameraParam;
        MiniBossSkierCustomCameraParam skiCameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierCommonParam* pInstance);
        static void Clean(MiniBossSkierCommonParam* pInstance);
    };

    struct MiniBossSkierLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierLevelParam* pInstance);
        static void Clean(MiniBossSkierLevelParam* pInstance);
    };

    struct MiniBossSkierJumpOutParam {
        float attackInterval;
        float attackSensorRange;
        float returnToWanderTime;
        float pathPosAngleLimit;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierJumpOutParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierJumpOutParam* pInstance);
        static void Clean(MiniBossSkierJumpOutParam* pInstance);
    };

    struct MiniBossSkierSkiParam {
        float showWeaknessTime;
        float skiMoveSpeed;
        float skiWeakMoveSpeed;
        float skiReturnSpeed;
        float homingSpeed;
        float jumpHighSpeed;
        float jumpLowSpeed;
        float struggleTime;
        float returnUndergroundTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierSkiParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierSkiParam* pInstance);
        static void Clean(MiniBossSkierSkiParam* pInstance);
    };

    struct MiniBossSkierSnakeMoveParam {
        float snakeMoveAmplitude;
        float snakeMovePeriod;
        float snakeMovePrepareTime;
        float snakeMoveReturnTime;
        float snakeMoveDangerAngleOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierSnakeMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierSnakeMoveParam* pInstance);
        static void Clean(MiniBossSkierSnakeMoveParam* pInstance);
    };

    struct MiniBossSkierTailAttackParam {
        float signSpeed;
        float attackMinSpeed;
        float attackMaxSpeed;
        float maxWaitTime;
        float driftLenth;
        float driftLenthUIOffset;
        float rotStartAngularSpeed;
        float rotEndAngularSpeed;
        float avoidObjCalMargePylon;
        float avoidObjCalMargeMissile;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierTailAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierTailAttackParam* pInstance);
        static void Clean(MiniBossSkierTailAttackParam* pInstance);
    };

    struct MiniBossSkierTailAttackPylonParam {
        float signSpeed;
        float signTime;
        float pylonAppearTime;
        float pylonDisappearTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierTailAttackPylonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierTailAttackPylonParam* pInstance);
        static void Clean(MiniBossSkierTailAttackPylonParam* pInstance);
    };

    struct MiniBossSkierLevelBand {
        int32_t level;
        MiniBossSkierBattlePhaseParam phaseParam[3];
        MiniBossSkierJumpOutParam jumpOutParam;
        MiniBossSkierSkiParam skiParam;
        MiniBossSkierSnakeMoveParam snakeMoveParam;
        MiniBossSkierTailAttackParam tailAttackParam;
        MiniBossSkierTailAttackPylonParam pylonParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierLevelBand* pInstance);
        static void Clean(MiniBossSkierLevelBand* pInstance);
    };

    struct MiniBossSkierConfig {
        MiniBossSkierCommonParam commonParam;
        MiniBossSkierLevelParam levelParams[5];
        MiniBossSkierLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSkierConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSkierConfig* pInstance);
        static void Clean(MiniBossSkierConfig* pInstance);
    };

    struct MiniBossSpiderLevelBandRate {
        float pressRate;
        float stompRate;
        float shotRate;
        float chainRate;
        float traceRate;
        float laserStraightRate;
        float laserTraceRate;
        float jumpRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderLevelBandRate* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderLevelBandRate* pInstance);
        static void Clean(MiniBossSpiderLevelBandRate* pInstance);
    };

    struct MiniBossSpiderLevelBandInterval {
        float pressInterval;
        float stompInterval;
        float shotInterval;
        float chainInterval;
        float traceInterval;
        float laserStaightInterval;
        float laserTraceInterval;
        float jumpInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderLevelBandInterval* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderLevelBandInterval* pInstance);
        static void Clean(MiniBossSpiderLevelBandInterval* pInstance);
    };

    struct MiniBossSpiderActionParam {
        float nearRange;
        MiniBossSpiderLevelBandRate nearRates[2];
        MiniBossSpiderLevelBandRate farRates[2];
        MiniBossSpiderLevelBandInterval interval[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderActionParam* pInstance);
        static void Clean(MiniBossSpiderActionParam* pInstance);
    };

    struct MiniBossSpiderCameraLockOn {
        float time;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderCameraLockOn* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderCameraLockOn* pInstance);
        static void Clean(MiniBossSpiderCameraLockOn* pInstance);
    };

    struct MiniBossSpiderCameraShake {
        float time;
        float magnitude;
        int32_t freq;
        float attnRatio;
        float shakeRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderCameraShake* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderCameraShake* pInstance);
        static void Clean(MiniBossSpiderCameraShake* pInstance);
    };

    struct MiniBossSpiderWaveParam {
        float radius;
        float appearRadius;
        float keepRadius;
        float disappearRadius;
        float heightMin;
        float heightMax;
        float lifeTime;
        float pauseBeginTime;
        float pauseTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderWaveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderWaveParam* pInstance);
        static void Clean(MiniBossSpiderWaveParam* pInstance);
    };

    struct MiniBossSpiderCommonParam {
        enum class MiniBossSpiderBreakType : int8_t {
            BREAK_NONE = 0,
            BREAK_LEG = 1,
            BREAK_AIR_LEG = 2,
            BREAK_BOUNCE_LEG = 3,
            BREAK_GIMMICK = 4,
            BREAK_ALL = 5,
        };

        MiniBossCommonConfig commonConfig;
        float patrolWalkWaitTimeMin;
        float patrolWalkWaitTimeMax;
        float jumpSpeed;
        float pressDistance;
        float waveDistance;
        float waveModelScale;
        float waveModelDiameter;
        float waveWaitTime;
        float mineDistance;
        float shotWaitTime;
        float walkWaitTime;
        float laserStraightDistance;
        float laserStraightPrepairTime;
        float laserStraightTime;
        float laserStraightAngle;
        float laserStraightWaitTime;
        float laserTraceDistance;
        float laserTracePrepairTime;
        float laserTraceTime;
        float laserTraceSpeed;
        float laserTraceWaitTime;
        float chainDistance;
        float chainJumpDistance;
        float chainWaitTime;
        float traceDistance;
        float traceJumpDistance;
        float traceSpeed;
        float traceRotSpeed;
        float traceLifeTime;
        float traceWidth;
        float traceHeight;
        float traceAppearDistance;
        float traceKeepDistance;
        float traceDisappearDistance;
        float traceWaitTime;
        float thornSpawnSpeed;
        float thornSpawnRadiusMax;
        float thornLifeTime;
        float thornFlyingSpeed;
        int32_t protecterHp;
        MiniBossSpiderCameraShake cameraShakeWalk;
        MiniBossSpiderCameraShake cameraShakeAttack;
        RingParameter ringParam;
        MiniBossSpiderWaveParam waveParams[8];
        MiniBossSpiderCameraLockOn cameraLockBreakArmor;
        MiniBossSpiderCameraLockOn cameraLockBlownUp;
        MiniBossSpiderCameraLockOn cameraLockBlownDown;
        MiniBossSpiderCameraLockOn cameraLockFootUp;
        MiniBossSpiderCameraLockOn cameraLockFall;
        DebrisParameter debrisSet;
        MiniBossSpiderBreakType rotationTypeTable[8];
        MiniBossSpiderActionParam rotationActionTable[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderCommonParam* pInstance);
        static void Clean(MiniBossSpiderCommonParam* pInstance);
    };

    struct MiniBossSpiderLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;
        float attackRate;
        float stunTime;
        float downTime;
        float downTime2;
        float reProtectWaitTime;
        float patrolWalkWaitTimeMin;
        float patrolWalkWaitTimeMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderLevelParam* pInstance);
        static void Clean(MiniBossSpiderLevelParam* pInstance);
    };

    struct MiniBossSpiderLevelPhaseAction {
        int8_t pressType;
        uint8_t pressNum;
        float pressWaitTime;
        int8_t stompType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderLevelPhaseAction* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderLevelPhaseAction* pInstance);
        static void Clean(MiniBossSpiderLevelPhaseAction* pInstance);
    };

    struct MiniBossSpiderLevelPhaseDiving {
        float divingEndHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderLevelPhaseDiving* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderLevelPhaseDiving* pInstance);
        static void Clean(MiniBossSpiderLevelPhaseDiving* pInstance);
    };

    struct MiniBossSpiderLevelBand {
        enum class MiniBossSpiderBreakType : int8_t {
            BREAK_NONE = 0,
            BREAK_LEG = 1,
            BREAK_AIR_LEG = 2,
            BREAK_BOUNCE_LEG = 3,
            BREAK_GIMMICK = 4,
            BREAK_ALL = 5,
        };

        int32_t level;
        float phaseChangeHpRatio;
        int32_t walkWaveId;
        int32_t stompWaveId;
        int32_t pressWaveId;
        bool enableCounterKick;
        MiniBossSpiderBreakType breakType;
        float mineRadius;
        float mineExplodeRadius;
        int32_t mineNum;
        float mineStartSpeed;
        float mineDecelePower;
        float mineMinSpeed;
        float mineParriedSpeed;
        float mineLifeTime;
        float mineEnableParryRate;
        int32_t mineHorizonMaxNum;
        int32_t mineVerticalNum;
        int32_t shotCount;
        float chainLifeTime;
        float chainTraceTime;
        float chainSpeed;
        float chainWaitTime;
        float chainRotateSpeed;
        int32_t chainWaveNum;
        bool enableReProtect;
        float nearRange;
        MiniBossSpiderLevelBandRate nearRates[2];
        MiniBossSpiderLevelBandRate farRates[2];
        MiniBossSpiderLevelPhaseAction phases[2];
        MiniBossSpiderLevelBandInterval interval[2];
        MiniBossSpiderLevelPhaseDiving diving[2];
        float slowRate[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderLevelBand* pInstance);
        static void Clean(MiniBossSpiderLevelBand* pInstance);
    };

    struct MiniBossSpiderConfig {
        MiniBossSpiderCommonParam commonParam;
        MiniBossSpiderLevelParam levelParams[5];
        MiniBossSpiderLevelBand levelBands[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSpiderConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSpiderConfig* pInstance);
        static void Clean(MiniBossSpiderConfig* pInstance);
    };

    struct AttackInfo {
        enum class MeansOfAttack : uint8_t {
            Bullet = 0,
            Laser = 1,
            NumAttackTypes = 2,
        };

        MeansOfAttack meansOfAttack;
        bool enabled;
        float attackInterval;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AttackInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AttackInfo* pInstance);
        static void Clean(AttackInfo* pInstance);
    };

    struct AttackPhase {
        AttackInfo attackInfos[2];
        float triggeredHPRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AttackPhase* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AttackPhase* pInstance);
        static void Clean(AttackPhase* pInstance);
    };

    struct ArcLaserConfig {
        float arrivalTime;
        uint8_t numPatterns;
        float radius;
        float tilingDistance;
        float fluctuationPeriod;
        float fluctuationAmplitude;
        float uvScrollSpeed;
        csl::ut::Color<float> colorPrimary;
        csl::ut::Color<uint8_t> colorVertexEdge;
        csl::ut::Color<uint8_t> colorVertexCenter;
        float colorIntensity;
        float patternChangeIntervalTime;
        float edgeWidthScale;
        float edgeWidthScaleLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ArcLaserConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ArcLaserConfig* pInstance);
        static void Clean(ArcLaserConfig* pInstance);
    };

    struct CommonBulletParam {
        enum class ShootingDirection : uint8_t {
            Sonic = 0,
            Random = 1,
            NumShootingDirections = 2,
        };

        ShootingDirection shootingDirection;
        float lifeTime;
        float speedToRail;
        float speed;
        float yOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CommonBulletParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CommonBulletParam* pInstance);
        static void Clean(CommonBulletParam* pInstance);
    };

    struct HomingBulletParam {
        float railChangeDelay;
        float turnaroundTime;
        float splinePositionDistance;
        bool changesRails;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HomingBulletParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HomingBulletParam* pInstance);
        static void Clean(HomingBulletParam* pInstance);
    };

    struct ReverseHomingBulletParam {
        float railChangeDelay;
        float turnaroundTime;
        float splinePositionDistance;
        bool changesRails;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReverseHomingBulletParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReverseHomingBulletParam* pInstance);
        static void Clean(ReverseHomingBulletParam* pInstance);
    };

    struct SameBodyRailBulletParam {

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SameBodyRailBulletParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SameBodyRailBulletParam* pInstance);
        static void Clean(SameBodyRailBulletParam* pInstance);
    };

    struct ObjStriderBulletConfig {
        HomingBulletParam homingBulletParam;
        ReverseHomingBulletParam reverseHomingBulletParam;
        SameBodyRailBulletParam sameBodyRailBulletParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderBulletConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderBulletConfig* pInstance);
        static void Clean(ObjStriderBulletConfig* pInstance);
    };

    struct ObjStriderGrindRailConfig {
        float bulletSpeed;
        float bulletRotDegPerSec;
        float jumpToCenterTime;
        float jumpTime;
        float jumpToCenterTangentY;
        float jumpTangentMultiplier;
        float jumpDestinationOffsetY;
        float jumpDestinationOffsetXZ;
        float jumpToFloorHeight;
        float jumpToFloorOffset;
        float jumpToFloorTime;
        float bulletWaitTime;
        float timeTilDisappear;
        float segmentLength;
        float collisionHeight;
        float collisionRadiusAddend;
        float initialEffectScaleY;
        float initialEffectScaleXZ;
        float maxEffectScaleXZ;
        float timeToMaxEffectScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderGrindRailConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderGrindRailConfig* pInstance);
        static void Clean(ObjStriderGrindRailConfig* pInstance);
    };

    struct ObjStriderLaserConfig {
        float lifeTime;
        float degreeVelocityPrePostLaser;
        float degreeVelocity;
        float degreeToRotate;
        float radius;
        float collisionRadius;
        float minStartingPointOffset;
        float maxStartingPointOffset;
        ArcLaserConfig arcLaserConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderLaserConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderLaserConfig* pInstance);
        static void Clean(ObjStriderLaserConfig* pInstance);
    };

    struct MiniBossStriderCommonParam {
        MiniBossCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossStriderCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossStriderCommonParam* pInstance);
        static void Clean(MiniBossStriderCommonParam* pInstance);
    };

    struct MiniBossStriderLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossStriderLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossStriderLevelParam* pInstance);
        static void Clean(MiniBossStriderLevelParam* pInstance);
    };

    struct MiniBossStriderLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossStriderLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossStriderLevelBand* pInstance);
        static void Clean(MiniBossStriderLevelBand* pInstance);
    };

    struct MiniBossStriderParam {
        AttackPhase attackPhases[3];
        float initialAttackWaitBullet;
        float initialAttackWaitLaser;
        float attackableTime;
        float railBulletAttackInterval;
        float tentativePlatformTopYOffset;
        float tentativePlatformBottomYOffset;
        float tentativePlatformRadius;
        float cameraElevation;
        float cameraFovy;
        float cameraDistance;
        float cameraDegreeForClockwiseMovement;
        float cameraDegreeForCounterClockwiseMovement;
        float cameraLookAtPointOffsetY;
        float cameraMaxChangeableDegreeByStickInput;
        float cameraMaxDegreeChangedByStickInputPerSec;
        float attackableCameraElevation;
        float attackableCameraDistance;
        float attackableCameraInterpolationTime;
        float attackableCameraDuration;
        bool enableAttackableCamera;
        bool enableStun;
        bool enableStagger;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossStriderParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossStriderParam* pInstance);
        static void Clean(MiniBossStriderParam* pInstance);
    };

    struct ObjStriderGrindRailParam {
        float radius1;
        float radius2;
        float radius3;
        float yOffset1;
        float yOffset2;
        float yOffset3;
        uint8_t numRailBulletsFiredAtOnce;
        float railBulletPreAttackEffectTime;
        float railBulletRadius;
        float railBulletSearchDistance;
        float maxJumpDistanceFromRailBullet;
        float distToDestWithinWhichJumpIsDone;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderGrindRailParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderGrindRailParam* pInstance);
        static void Clean(ObjStriderGrindRailParam* pInstance);
    };

    struct ObjStriderPlatformParam {
        float colliderRadius;
        float colliderHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjStriderPlatformParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjStriderPlatformParam* pInstance);
        static void Clean(ObjStriderPlatformParam* pInstance);
    };

    struct MiniBossStriderConfig {
        MiniBossStriderCommonParam commonParam;
        MiniBossStriderLevelParam levelParams[5];
        MiniBossStriderLevelBand levelBand[5];
        MiniBossStriderParam striderParam;
        ObjStriderGrindRailParam grindRailParam;
        ObjStriderPlatformParam platformParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossStriderConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossStriderConfig* pInstance);
        static void Clean(MiniBossStriderConfig* pInstance);
    };

    struct ObjSumoPoleColliderConfig {
        float baseHeight;
        float baseRadius;
        float baseOffset;
        float poleHeight;
        float poleRadius;
        float rigidAdditionalHeight;
        float ropeThicknessRigid;
        float ropeThicknessDamage;
        float ropeThicknessArea;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleColliderConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleColliderConfig* pInstance);
        static void Clean(ObjSumoPoleColliderConfig* pInstance);
    };

    struct ObjSumoPoleSlingShotLookDownCameraConfig {
        float interpolationTime;
        float height;
        float fovy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleSlingShotLookDownCameraConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleSlingShotLookDownCameraConfig* pInstance);
        static void Clean(ObjSumoPoleSlingShotLookDownCameraConfig* pInstance);
    };

    struct ObjSumoPoleSlingShotConfig {
        float shotGuideMoveDistance;
        float shotRaycastLength;
        float sweepCapsuleHeight;
        float shotMoveLengthMax;
        int32_t shotReflectCountMax;
        int32_t shotReflectOwnerCountMax;
        float shotOffset;
        float shotDirAngleLimit;
        float shotDirAngleChangeSpeed;
        float shotSpeedMin;
        float shotSpeedMax;
        float shotSpeedAdd;
        float cancelSpeed;
        float bendPullLength;
        float aimTimeScale;
        float aimLimitTime;
        ObjSumoPoleSlingShotLookDownCameraConfig cameraLookDown;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleSlingShotConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleSlingShotConfig* pInstance);
        static void Clean(ObjSumoPoleSlingShotConfig* pInstance);
    };

    struct ObjSumoPoleSlingshotLineConfig {
        float width;
        float maxDistance;
        float tilingDistance;
        float uvScrollSpeedMin;
        float uvScrollSpeedMax;
        int32_t reflectCountSpeedMax;
        csl::ut::Color<uint8_t> colors[5];
        float colorIntensity;
        bool colorGradation;
        bool colorChangeAll;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleSlingshotLineConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleSlingshotLineConfig* pInstance);
        static void Clean(ObjSumoPoleSlingshotLineConfig* pInstance);
    };

    struct ObjSumoPoleRopeElectricConfig {
        float width;
        float tilingDistance;
        float fluctuationPeriod;
        float fluctuationAmplitude;
        float uvScrollSpeed;
        csl::ut::Color<float> colorPrimary;
        csl::ut::Color<uint8_t> colorVertexEdge;
        csl::ut::Color<uint8_t> colorVertexCenter;
        float colorIntensityAnimTime;
        float colorIntensityMin;
        float colorIntensityMax;
        float patternChangeIntervalTime;
        float edgeWidthScale;
        float edgeWidthScaleLength;
        float roll;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleRopeElectricConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleRopeElectricConfig* pInstance);
        static void Clean(ObjSumoPoleRopeElectricConfig* pInstance);
    };

    struct ObjSumoPoleRopeConfig {
        float timeAppear;
        float timeDisappear;
        int32_t count;
        float swingWidthMin;
        float swingWidthMax;
        float swingWidthReductionRate;
        float swingTime;
        float swingPeriod;
        float swingReturnSlowTime;
        ObjSumoPoleRopeElectricConfig electric;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleRopeConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleRopeConfig* pInstance);
        static void Clean(ObjSumoPoleRopeConfig* pInstance);
    };

    struct ObjSumoPoleConfig {
        int32_t electricDamageToEnemy;
        ObjSumoPoleColliderConfig collider;
        ObjSumoPoleSlingShotConfig slingShot;
        ObjSumoPoleSlingshotLineConfig line;
        ObjSumoPoleRopeConfig rope;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPoleConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPoleConfig* pInstance);
        static void Clean(ObjSumoPoleConfig* pInstance);
    };

    struct ObjSumoPuckConfig {
        float mass;
        float slopeAngleMax;
        float stairHeightMax;
        float colliderRigidHeight;
        float colliderRigidRadius;
        float colliderEventHeight;
        float colliderEventRadius;
        float colliderOffsetHeightSlingshot;
        float explodeRadius;
        float bumperBlowSpeed;
        float bumperOCTime;
        int32_t damageToEnemy;
        float lifeTimeParried;
        float decelerationParried;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSumoPuckConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSumoPuckConfig* pInstance);
        static void Clean(ObjSumoPuckConfig* pInstance);
    };

    struct MiniBossSumoBaseConfig {
        float mass;
        float slopeAngleMax;
        float timeStun;
        float timeExpend;
        float timeGuardBreak;
        float visualOffset;
        csl::math::Vector3 hpGaugeOffset;
        float guardEffectCoolTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoBaseConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoBaseConfig* pInstance);
        static void Clean(MiniBossSumoBaseConfig* pInstance);
    };

    struct MiniBossSumoPuckParam {
        int32_t puckCount;
        float speed;
        float lifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoPuckParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoPuckParam* pInstance);
        static void Clean(MiniBossSumoPuckParam* pInstance);
    };

    struct MiniBossSumoElectricRopePattern {
        bool enabled;
        bool electriced[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoElectricRopePattern* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoElectricRopePattern* pInstance);
        static void Clean(MiniBossSumoElectricRopePattern* pInstance);
    };

    struct MiniBossSumoRotationElectricRopeParam {
        MiniBossSumoElectricRopePattern patterns[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoRotationElectricRopeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoRotationElectricRopeParam* pInstance);
        static void Clean(MiniBossSumoRotationElectricRopeParam* pInstance);
    };

    struct MiniBossSumoBehaviorHPRateParam {
        int32_t rateHp;
        MiniBossSumoPuckParam puck;
        MiniBossSumoRotationElectricRopeParam rotation8;
        MiniBossSumoRotationElectricRopeParam rotation7;
        MiniBossSumoRotationElectricRopeParam rotation6;
        MiniBossSumoRotationElectricRopeParam rotation5;
        MiniBossSumoRotationElectricRopeParam rotation4;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoBehaviorHPRateParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoBehaviorHPRateParam* pInstance);
        static void Clean(MiniBossSumoBehaviorHPRateParam* pInstance);
    };

    struct MiniBossSumoColliderParam {
        enum class ColliderProperty : uint32_t {
            None = 0,
            Damaged = 1,
            DamageToPlayer = 2,
            Block = 4,
            DetectPuck = 8,
            Cyloop = 16,
            BlockBody = 32,
            SensorArm = 64,
            PressBlow = 128,
            PressBlowBody = 256,
            PressBlowArm = 512,
        };

        bool enabled;
        float height;
        float radius;
        csl::ut::VariableString attachNodeName;
        csl::math::Vector3 offset;
        csl::math::Vector3 rotation;
        csl::ut::VariableString tag;
        ColliderProperty properties[2];
        bool debugDraw;
        csl::ut::Color<uint8_t> color;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoColliderParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoColliderParam* pInstance);
        static void Clean(MiniBossSumoColliderParam* pInstance);
    };

    struct MiniBossSumoColliderConfig {
        MiniBossSumoColliderParam damaged[6];
        MiniBossSumoColliderParam damage[2];
        MiniBossSumoColliderParam detectPuck;
        MiniBossSumoColliderParam c;
        MiniBossSumoColliderParam pressBlow[3];
        MiniBossSumoColliderParam sensorArm[2];
        MiniBossSumoColliderParam simpleBody;
        float moveRadius;
        float moveHeight;
        csl::math::Vector3 targetMarkerOffset;
        float comboRadiusMin;
        float comboRadiusMax;
        float comboHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoColliderConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoColliderConfig* pInstance);
        static void Clean(MiniBossSumoColliderConfig* pInstance);
    };

    struct MiniBossSumoRopeConfig {
        float coolDownTimeToChangeElectric;
        float timeToWaitChangeAfterDamage;
        float blowOffSpeedDamagedElectricRope;
        float decelerationDamagedElectricRope;
        float timeElectricReaction;
        int32_t damageByReflectCount[5];
        float bendLengthOnHit;
        int32_t expansionBoundCount;
        float blowOffSpeedExpansionBoundRope;
        float decelerationExpansionBoundRope;
        float lockonPanningSuspensionKExpansionBoundRope;
        float reflectAngleMaxExpansionBoundRope;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoRopeConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoRopeConfig* pInstance);
        static void Clean(MiniBossSumoRopeConfig* pInstance);
    };

    struct MiniBossSumoSlingShotConfig {
        float backInitialSpeeds[5];
        float backDeccelation;
        float frontAngle;
        float timeTurn;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoSlingShotConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoSlingShotConfig* pInstance);
        static void Clean(MiniBossSumoSlingShotConfig* pInstance);
    };

    struct MiniBossSumoMoveConfig {
        float moveHorzLimitAngle;
        float moveRotateDeceleration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoMoveConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoMoveConfig* pInstance);
        static void Clean(MiniBossSumoMoveConfig* pInstance);
    };

    struct MiniBossSumoThrowPuckParam {
        float distanceThrow;
        float coolTime;
        csl::math::Vector3 attachOffset;
        csl::math::Vector3 attachRotateL;
        csl::math::Vector3 attachRotateR;
        float throwAngleLimit;
        csl::math::Vector3 throwOffsetMulti;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoThrowPuckParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoThrowPuckParam* pInstance);
        static void Clean(MiniBossSumoThrowPuckParam* pInstance);
    };

    struct MiniBossSumoSlingshotComboParam {
        int32_t count;
        bool reflectBack;
        float reflectRagWidth;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoSlingshotComboParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoSlingshotComboParam* pInstance);
        static void Clean(MiniBossSumoSlingshotComboParam* pInstance);
    };

    struct MiniBossSumoIKFootParam {
        csl::math::Vector3 kneeAxisLS;
        csl::math::Vector3 footEndLS;
        float footPlantedAnkleHeightMS;
        float footRaisedAnkleHeightMS;
        float maxAnkleHeightMS;
        float minAnkleHeightMS;
        float maxKneeAngleDegrees;
        float minKneeAngleDegrees;
        float onOffGain;
        float groundAscendingGain;
        float groundDescendingGain;
        float footPlantedGain;
        float footRaisedGain;
        float footLockingGain;
        float ankleRotationGain;
        csl::ut::VariableString hipName;
        csl::ut::VariableString kneeName;
        csl::ut::VariableString ankleName;
        csl::ut::VariableString toeName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoIKFootParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoIKFootParam* pInstance);
        static void Clean(MiniBossSumoIKFootParam* pInstance);
    };

    struct MiniBossSumoIKHandParam {
        csl::math::Vector3 elbowAxisLS;
        csl::math::Vector3 handOffsetLS;
        csl::math::Vector3 backHandNormalLS;
        float maxElbowAngleDegrees;
        float minElbowAngleDegrees;
        bool enforceWristRotation;
        csl::ut::VariableString shoulderName;
        csl::ut::VariableString elbowName;
        csl::ut::VariableString wristName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoIKHandParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoIKHandParam* pInstance);
        static void Clean(MiniBossSumoIKHandParam* pInstance);
    };

    struct MiniBossSumoIKParam {
        float footRaycastDistanceUp;
        float footRaycastDistanceDown;
        MiniBossSumoIKFootParam feet[2];
        float handRaycastDistanceUp;
        float handRaycastDistanceDown;
        float handSweepRadius;
        float handGain;
        float easeInTimeHandIk;
        float easeOutTimeHandIk;
        MiniBossSumoIKHandParam hands[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoIKParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoIKParam* pInstance);
        static void Clean(MiniBossSumoIKParam* pInstance);
    };

    struct MiniBossSumoCyloopConfig {
        float puckSpeed;
        float puckTimeStartDecelerate;
        float puckDeceleration;
        float puckLifeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoCyloopConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoCyloopConfig* pInstance);
        static void Clean(MiniBossSumoCyloopConfig* pInstance);
    };

    struct MiniBossSumoLockonConfig {
        float distance;
        float minElevation;
        float maxElevation;
        float elevationOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoLockonConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoLockonConfig* pInstance);
        static void Clean(MiniBossSumoLockonConfig* pInstance);
    };

    struct MiniBossSumoCommonParam {
        MiniBossCommonConfig common;
        MiniBossSumoBaseConfig base;
        MiniBossSumoColliderConfig collider;
        MiniBossSumoRopeConfig rope;
        MiniBossSumoSlingShotConfig slingShot;
        MiniBossSumoMoveConfig move;
        MiniBossSumoThrowPuckParam throwPuck;
        MiniBossSumoSlingshotComboParam combo;
        MiniBossSumoIKParam ik;
        MiniBossSumoCyloopConfig c;
        MiniBossSumoLockonConfig lockon;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoCommonParam* pInstance);
        static void Clean(MiniBossSumoCommonParam* pInstance);
    };

    struct MiniBossSumoLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoLevelParam* pInstance);
        static void Clean(MiniBossSumoLevelParam* pInstance);
    };

    struct MiniBossSumoLevelBand {
        int32_t level;
        MiniBossSumoBehaviorHPRateParam hpRateParams[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoLevelBand* pInstance);
        static void Clean(MiniBossSumoLevelBand* pInstance);
    };

    struct MiniBossSumoConfig {
        MiniBossSumoCommonParam commonParam;
        MiniBossSumoLevelParam levelParams[5];
        MiniBossSumoLevelBand levelBand[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossSumoConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossSumoConfig* pInstance);
        static void Clean(MiniBossSumoConfig* pInstance);
    };

    struct MiniBossTrackerActionParam {
        enum class ActionType : int8_t {
            BULLET = 0,
            MINE = 1,
            BASEMINE = 2,
            RINGHOLE = 3,
            LOOP = 4,
            END = 5,
        };

        float intervalTable[20];
        ActionType actionTable[20];
        int32_t nextPoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerActionParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerActionParam* pInstance);
        static void Clean(MiniBossTrackerActionParam* pInstance);
    };

    struct MiniBossTrackerBulletParam {
        float time;
        float interval;
        float speed;
        float steeringSpeed;
        float startSteeringTime;
        float life;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerBulletParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerBulletParam* pInstance);
        static void Clean(MiniBossTrackerBulletParam* pInstance);
    };

    struct MiniBossTrackerCameraLockOn {
        float time;
        float distance;
        float minElevation;
        float maxElevation;
        float panningSuspensionK;
        float interiorPanningSuspensionK;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerCameraLockOn* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerCameraLockOn* pInstance);
        static void Clean(MiniBossTrackerCameraLockOn* pInstance);
    };

    struct MiniBossTrackerCommonParam {
        MiniBossCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerCommonParam* pInstance);
        static void Clean(MiniBossTrackerCommonParam* pInstance);
    };

    struct MiniBossTrackerLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerLevelParam* pInstance);
        static void Clean(MiniBossTrackerLevelParam* pInstance);
    };

    struct MiniBossTrackerLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerLevelBand* pInstance);
        static void Clean(MiniBossTrackerLevelBand* pInstance);
    };

    struct MiniBossTrackerMoveParam {
        float facingSpeed;
        float facingSpeed2;
        float steeringSpeed;
        float chaseSpeed;
        float roundSpeed;
        float changeBaseSpeed;
        float returnSpeed;
        float minSpeed;
        float turnSpeed;
        float accel;
        float brake;
        float brakeDistance;
        float damper;
        float springFactor;
        float verticalWidth;
        float verticalDamper;
        float verticalSpringFactor;
        float verticalRotateSpeed;
        float checkChaseRadius;
        float checkRoundRadius;
        float checkReturnRadius;
        float chaseRadius;
        float chaseHeight;
        float chaseWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerMoveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerMoveParam* pInstance);
        static void Clean(MiniBossTrackerMoveParam* pInstance);
    };

    struct MiniBossTrackerMineParam {
        int32_t num;
        int32_t num2;
        float height;
        float deviationTime;
        float searchRadius;
        float playerRadius;
        float playerHeight;
        float setInterval;
        float life;
        float lifeEx;
        float timer;
        float explosionLife;
        float targetEffectiveDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerMineParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerMineParam* pInstance);
        static void Clean(MiniBossTrackerMineParam* pInstance);
    };

    struct MiniBossTrackerRingHoleParam {
        float minRadius;
        float maxRadius;
        float maxDistance;
        float minHeight;
        float maxHeight;
        float deviationTime;
        float maxSpeed;
        float minSpeed;
        float accel;
        float stopTime;
        float damperDistance;
        float damper;
        float chaseRadius;
        float chaseSpeed;
        float disappearTime;
        float life;
        float interval;
        float radius;
        float targetEffectiveDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerRingHoleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerRingHoleParam* pInstance);
        static void Clean(MiniBossTrackerRingHoleParam* pInstance);
    };

    struct MiniBossTrackerGameParam {
        int32_t hp;
        float lossRingTime;
        float pursuitTime;
        int32_t baseDebuffCount;
        int32_t addDebuffCount;
        float cameraDistance;
        float cameraDistance2;
        float cameraMinElevation;
        float cameraMaxElevation;
        float cameraTargetUpOffset;
        float cameraTargetUpOffset2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerGameParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerGameParam* pInstance);
        static void Clean(MiniBossTrackerGameParam* pInstance);
    };

    struct MiniBossTrackerConfig {
        MiniBossTrackerCommonParam commonParam;
        MiniBossTrackerLevelParam levelParams[5];
        MiniBossTrackerLevelBand levelBand[5];
        MiniBossTrackerCameraLockOn cameraLockDamage;
        MiniBossTrackerMoveParam move;
        MiniBossTrackerBulletParam bullet;
        MiniBossTrackerMineParam mine;
        MiniBossTrackerRingHoleParam ringHole;
        MiniBossTrackerActionParam action1;
        MiniBossTrackerActionParam action2;
        MiniBossTrackerActionParam action3;
        MiniBossTrackerActionParam action4;
        MiniBossTrackerActionParam action5;
        MiniBossTrackerGameParam game;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTrackerConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTrackerConfig* pInstance);
        static void Clean(MiniBossTrackerConfig* pInstance);
    };

    struct MiniBossTyrantAttackAirSpinParam {
        float speed;
        int32_t attackNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantAttackAirSpinParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantAttackAirSpinParam* pInstance);
        static void Clean(MiniBossTyrantAttackAirSpinParam* pInstance);
    };

    struct MiniBossTyrantAttackCircleBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        int32_t num;
        float speed;
        float rotSpeed;
        int32_t arrayNum;
        float arrayTime;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantAttackCircleBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantAttackCircleBullet* pInstance);
        static void Clean(MiniBossTyrantAttackCircleBullet* pInstance);
    };

    struct MiniBossTyrantAttackLaserParam {
        csl::math::Vector3 muzzlePosOffset;
        float time;
        float rotSpeed;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantAttackLaserParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantAttackLaserParam* pInstance);
        static void Clean(MiniBossTyrantAttackLaserParam* pInstance);
    };

    struct MiniBossTyrantAttackSpinParam {
        float speed;
        float time;
        float waitTime;
        float rotSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantAttackSpinParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantAttackSpinParam* pInstance);
        static void Clean(MiniBossTyrantAttackSpinParam* pInstance);
    };

    struct MiniBossTyrantAttackRouletteParam {
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantAttackRouletteParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantAttackRouletteParam* pInstance);
        static void Clean(MiniBossTyrantAttackRouletteParam* pInstance);
    };

    struct MiniBossTyrantBarrageParam {
        enum class BarrageType : int8_t {
            TYPE_AIM_PLAYER = 0,
            TYPE_NO_AIM = 1,
        };

        BarrageType type;
        csl::ut::VariableString damageTag;
        float startSpeed;
        float decelePower;
        float minSpeed;
        float lifeTime;
        float waitTime;
        float lineTime;
        float scale;
        float hitVelocity;
        float parriedSpeed;
        int32_t parriedDamage;
        float parriedStaggerValue;
        float parriedStunValue;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantBarrageParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantBarrageParam* pInstance);
        static void Clean(MiniBossTyrantBarrageParam* pInstance);
    };

    struct MiniBossTyrantShotgunBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        bool isFollowPlayer;
        float shotIntarval;
        float maxAngle;
        float yAngleOffset;
        float shotTime;
        float addSpeedMax;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantShotgunBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantShotgunBullet* pInstance);
        static void Clean(MiniBossTyrantShotgunBullet* pInstance);
    };

    struct MiniBossTyrantWinderBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        bool isFollowPlayer;
        float shotIntarval;
        float maxAngle;
        float rotateSpeed;
        float rotateAngle;
        float barrageAngleDiff;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantWinderBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantWinderBullet* pInstance);
        static void Clean(MiniBossTyrantWinderBullet* pInstance);
    };

    struct MiniBossTyrantLineBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        int32_t num;
        float waitTime;
        bool isFollowPlayer;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantLineBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantLineBullet* pInstance);
        static void Clean(MiniBossTyrantLineBullet* pInstance);
    };

    struct MiniBossTyrantWaveBullet {
        int32_t barrageIndex;
        float yOffset;
        float zOffset;
        bool isFollowPlayer;
        float waitTime;
        float sideAngle;
        int32_t arrayNum;
        float arrayTime;
        float startWaitTime;
        float endWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantWaveBullet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantWaveBullet* pInstance);
        static void Clean(MiniBossTyrantWaveBullet* pInstance);
    };

    struct MiniBossTyrantSequenceParameter {
        float airBattleRate;
        float nextRoundRate;
        float airBattleRateSecond;
        float chanceTime;
        float chanceTimeSecond;
        bool isSpin;
        bool isSecondAttack;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantSequenceParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantSequenceParameter* pInstance);
        static void Clean(MiniBossTyrantSequenceParameter* pInstance);
    };

    struct MiniBossTyrantCyloopDamageParameter {
        float upPower;
        float upTime;
        float attackTime;
        float downPower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantCyloopDamageParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantCyloopDamageParameter* pInstance);
        static void Clean(MiniBossTyrantCyloopDamageParameter* pInstance);
    };

    struct MiniBossTyrantAttackParam {
        enum class ActionType : int8_t {
            ACTION_TYPE_NONE = 0,
            ACTION_TYPE_SPIN = 1,
            ACTION_TYPE_ROULETTE = 2,
            ACTION_TYPE_LASER = 3,
            ACTION_TYPE_SHOTGUN = 4,
            ACTION_TYPE_WINDER = 5,
            ACTION_TYPE_LINE = 6,
            ACTION_TYPE_WAVE = 7,
            ACTION_TYPE_CIRCLE = 8,
        };

        MiniBossTyrantAttackSpinParam spin;
        MiniBossTyrantAttackAirSpinParam airSpin;
        MiniBossTyrantAttackRouletteParam roulette;
        MiniBossTyrantAttackLaserParam laser;
        float rotSpeed;
        MiniBossTyrantBarrageParam barrage[16];
        MiniBossTyrantShotgunBullet shotgunBullet;
        MiniBossTyrantWinderBullet winderBullet;
        MiniBossTyrantLineBullet lineBullet;
        MiniBossTyrantWaveBullet waveBullet;
        MiniBossTyrantAttackCircleBullet circleBullet;
        MiniBossTyrantSequenceParameter sequenceParam;
        MiniBossTyrantCyloopDamageParameter cyloopParam;
        ActionType actionListGround[10];
        ActionType actionListAir[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantAttackParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantAttackParam* pInstance);
        static void Clean(MiniBossTyrantAttackParam* pInstance);
    };

    struct MiniBossTyrantCommonParam {
        MiniBossCommonConfig commonConfig;
        float nonBattleRange;
        float miniDamageRange;
        float miniComboRange;
        float miniOffsetY;
        float bodyDamageRange;
        float bodyComboRange;
        float bodyOffsetY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantCommonParam* pInstance);
        static void Clean(MiniBossTyrantCommonParam* pInstance);
    };

    struct MiniBossTyrantLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantLevelParam* pInstance);
        static void Clean(MiniBossTyrantLevelParam* pInstance);
    };

    struct MiniBossTyrantLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantLevelBand* pInstance);
        static void Clean(MiniBossTyrantLevelBand* pInstance);
    };

    struct MiniBossTyrantDebrisParam {
        float speed;
        float accel;
        float rotate_speed_min;
        float rotate_speed_max;
        float rotate_speed_fast;
        float rotate_accel;
        float life;
        float spawn_offset;
        float spawn_interval;
        int32_t spawn_num;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantDebrisParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantDebrisParam* pInstance);
        static void Clean(MiniBossTyrantDebrisParam* pInstance);
    };

    struct MiniBossTyrantStormEffectParam {
        MiniBossTyrantDebrisParam debris;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantStormEffectParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantStormEffectParam* pInstance);
        static void Clean(MiniBossTyrantStormEffectParam* pInstance);
    };

    struct MiniBossTyrantConfig {
        MiniBossTyrantCommonParam commonParam;
        MiniBossTyrantLevelParam levelParams[5];
        MiniBossTyrantLevelBand levelBand[5];
        MiniBossTyrantAttackParam attackParam;
        MiniBossTyrantStormEffectParam stormEffectParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossTyrantConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossTyrantConfig* pInstance);
        static void Clean(MiniBossTyrantConfig* pInstance);
    };

    struct ObjWarshipDashRingConfig {
        float baseHeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjWarshipDashRingConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjWarshipDashRingConfig* pInstance);
        static void Clean(ObjWarshipDashRingConfig* pInstance);
    };

    struct MiniBossWarshipAccelSpeed {
        float min;
        float max;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipAccelSpeed* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipAccelSpeed* pInstance);
        static void Clean(MiniBossWarshipAccelSpeed* pInstance);
    };

    struct MiniBossWarshipBombAttackCameraParam {
        float lockonDistance;
        float unlockDistance;
        float duration;
        float distance;
        float minElevation;
        float maxElevation;
        float lockonFrameYOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipBombAttackCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipBombAttackCameraParam* pInstance);
        static void Clean(MiniBossWarshipBombAttackCameraParam* pInstance);
    };

    struct MiniBossWarshipAttackStateCameraParam {
        float midCameraPosOffset;
        MiniBossWarshipBombAttackCameraParam firstCamera;
        MiniBossWarshipBombAttackCameraParam secondCamera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipAttackStateCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipAttackStateCameraParam* pInstance);
        static void Clean(MiniBossWarshipAttackStateCameraParam* pInstance);
    };

    struct MiniBossWarshipAttackStateParam {
        float moveSpeed;
        float bombDropSpeed;
        float bombInterval;
        float explosionRadius;
        float bombPreDistEffectRange;
        float lifeTime;
        float preBombTime;
        float preBombStateSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipAttackStateParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipAttackStateParam* pInstance);
        static void Clean(MiniBossWarshipAttackStateParam* pInstance);
    };

    struct MiniBossWarshipBattleFlagParam {
        float firstFinishTimer;
        float finishTimer;
        float disableHomingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipBattleFlagParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipBattleFlagParam* pInstance);
        static void Clean(MiniBossWarshipBattleFlagParam* pInstance);
    };

    struct MiniBossWarshipSpeedParam {
        float highSpeed;
        float lowSpeed;
        float changeLowSpeedDistance;
        float disableDistanceMaxSpeed;
        float relativeSpeedDisableDistance;
        float speedOnJump;
        float speedDownOnJumpDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipSpeedParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipSpeedParam* pInstance);
        static void Clean(MiniBossWarshipSpeedParam* pInstance);
    };

    struct MiniBossWarshipWarpCameraParam {
        float zoomDistance;
        csl::math::Vector3 zoomOffset;
        csl::math::Vector3 zoomAngle;
        float zoomFov;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipWarpCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipWarpCameraParam* pInstance);
        static void Clean(MiniBossWarshipWarpCameraParam* pInstance);
    };

    struct MiniBossWarshipEscapeCameraParam {
        float fovy;
        float zRot;
        float distance;
        float pathOffset;
        bool usePathVerticalComponent;
        bool usePathNormal;
        float angleSensitivity;
        float angleSensitivityBoost;
        float azimuthOffsetDeg;
        float elevationOffsetDeg;
        float gravityOffset;
        csl::math::Vector3 playerOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipEscapeCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipEscapeCameraParam* pInstance);
        static void Clean(MiniBossWarshipEscapeCameraParam* pInstance);
    };

    struct MiniBossWarshipObjectParam {
        float dashRingAppearDistance;
        float dashRingDisappearDistance;
        float birdAppearDistance;
        float birdDisappearDistance;
        float bulletAppearDistance;
        float bulletDisappearDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipObjectParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipObjectParam* pInstance);
        static void Clean(MiniBossWarshipObjectParam* pInstance);
    };

    struct WarshipNearLaunchParam {
        float outStrength;
        float inStrength;
        float outElev;
        float inElev;
        float speedMin;
        float speedMax;
        float speedMinLength;
        float speedMaxLength;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipNearLaunchParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipNearLaunchParam* pInstance);
        static void Clean(WarshipNearLaunchParam* pInstance);
    };

    struct MiniBossWarshipCommonParam {
        MiniBossCommonConfig commonConfig;
        MiniBossWarshipSpeedParam speedParam;
        MiniBossWarshipAccelSpeed normalSpeedParam;
        MiniBossWarshipAccelSpeed boostSpeedParam;
        MiniBossWarshipWarpCameraParam warpCameraParam;
        MiniBossWarshipEscapeCameraParam escapeCameraParam;
        MiniBossWarshipObjectParam objectParam;
        WarshipNearLaunchParam launchParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipCommonParam* pInstance);
        static void Clean(MiniBossWarshipCommonParam* pInstance);
    };

    struct MiniBossWarshipLevelParam {
        int32_t level;
        MiniBossLevelCommonConfig commonConfig;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipLevelParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipLevelParam* pInstance);
        static void Clean(MiniBossWarshipLevelParam* pInstance);
    };

    struct MiniBossWarshipLevelBand {
        int32_t level;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipLevelBand* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipLevelBand* pInstance);
        static void Clean(MiniBossWarshipLevelBand* pInstance);
    };

    struct MiniBossWarshipRecoverBoostGaugeParam {
        float normal;
        float boost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipRecoverBoostGaugeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipRecoverBoostGaugeParam* pInstance);
        static void Clean(MiniBossWarshipRecoverBoostGaugeParam* pInstance);
    };

    struct MiniBossWarshipNearBattleCameraParam {
        float distance;
        float minElevation;
        float maxElevation;
        float targetUpOffset;
        float targetMinUpOffsetLimit;
        float targetMaxUpOffsetLimit;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipNearBattleCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipNearBattleCameraParam* pInstance);
        static void Clean(MiniBossWarshipNearBattleCameraParam* pInstance);
    };

    struct WarshipEscapePathInfo {
        csl::ut::VariableString followPaths;
        WarshipPathSectionInfo usePathInfo[50];
        WarshipPathSectionInfo accelInfo[50];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WarshipEscapePathInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WarshipEscapePathInfo* pInstance);
        static void Clean(WarshipEscapePathInfo* pInstance);
    };

    struct MiniBossWarshipEscapePathParam {
        WarshipEscapePathInfo escapePathInfo[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipEscapePathParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipEscapePathParam* pInstance);
        static void Clean(MiniBossWarshipEscapePathParam* pInstance);
    };

    struct MiniBossWarshipConfig {
        MiniBossWarshipCommonParam commonParam;
        MiniBossWarshipLevelParam levelParams[5];
        MiniBossWarshipLevelBand levelBand[5];
        float wanderMoveSpeed;
        float railMaxLength;
        MiniBossWarshipSpeedParam shiftStateMoveSpeedParam;
        float locatorDistance;
        float distanceEscapePathToStart;
        MiniBossWarshipRecoverBoostGaugeParam boostGaugeParam;
        MiniBossWarshipAttackStateParam attackStateParam;
        MiniBossWarshipBattleFlagParam battleFlagParam;
        MiniBossWarshipNearBattleCameraParam nearBattleCameraParam;
        float disableGimmickDistance;
        float warpTime;
        float cameraChangeTime;
        float cameraAppearTime;
        float spreadHomingDistance;
        MiniBossWarshipEscapePathParam escapePathID[5];
        MiniBossWarshipAttackStateCameraParam bombAttackCameraParam[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(MiniBossWarshipConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(MiniBossWarshipConfig* pInstance);
        static void Clean(MiniBossWarshipConfig* pInstance);
    };

    struct FishingCommonParam {
        float baseWaveThickness;
        float baseWaveSuccessRatioNormal;
        float baseWaveSuccessRatioHold;
        float singleWaveThickness;
        float baseWaveEdgeThickness;
        float timingEdgeThickness;
        uint32_t fishShadowNum;
        float fishApproachIntervalMin;
        float fishApproachIntervalMax;
        float fishEscapeDistance;
        uint32_t buoyTwitchNumMin;
        uint32_t buoyTwitchNumMax;
        float buoyTwitchIntervalMin;
        float buoyTwitchIntervalMax;
        float inputValidTime;
        float fishingCameraTransitDelay;
        float cutinDelay;
        float cutinDuration;
        float successPullUpDelay;
        uint32_t goldenChestLimitNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingCommonParam* pInstance);
        static void Clean(FishingCommonParam* pInstance);
    };

    struct FishingFishGroupParam {
        float rate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingFishGroupParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingFishGroupParam* pInstance);
        static void Clean(FishingFishGroupParam* pInstance);
    };

    struct FishingFishParam {
        enum class FishShadowType : int8_t {
            SMALL = 0,
            MEDIUM = 1,
            LARGE = 2,
        };

        enum class CatchUpMotionType : int8_t {
            SHADOW_SIZE = 0,
            LARGE_GOOD_FISH = 1,
            LARGE_GOOD_ITEM = 2,
            LARGE_BAD = 3,
            LARGE = 4,
            MEDIUM = 5,
            SMALL = 6,
            CHEST_GOOD = 7,
            CHEST_VERYGOOD = 8,
            SCROLL = 9,
        };

        enum class ToastType : int8_t {
            MOTION = 0,
            PATTERN_1 = 1,
            PATTERN_2 = 2,
            PATTERN_3 = 3,
            PATTERN_4 = 4,
        };

        int32_t fishGroupId;
        FishShadowType shadowType;
        uint32_t successPatternId;
        uint32_t wavePatternId;
        uint32_t expPoint;
        uint32_t tokenNum;
        bool isRare;
        CatchUpMotionType catchUpMotionType;
        ToastType toastType;
        csl::math::Vector3 catchUpOffsetPos;
        csl::math::Vector3 catchUpOffsetRot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingFishParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingFishParam* pInstance);
        static void Clean(FishingFishParam* pInstance);
    };

    struct FishingFixedResultParam {
        int32_t count;
        int32_t fishId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingFixedResultParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingFixedResultParam* pInstance);
        static void Clean(FishingFixedResultParam* pInstance);
    };

    struct FishingSuccessPatternParam {
        uint32_t successNum;
        uint32_t failureNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingSuccessPatternParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingSuccessPatternParam* pInstance);
        static void Clean(FishingSuccessPatternParam* pInstance);
    };

    struct FishingWaveParam {
        enum class Type : int8_t {
            TYPE_INVALID = 0,
            TYPE_NORMAL = 1,
            TYPE_HOLD = 2,
        };

        Type type;
        float radius;
        float thickness;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingWaveParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingWaveParam* pInstance);
        static void Clean(FishingWaveParam* pInstance);
    };

    struct FishingWaveGroupParam {
        FishingWaveParam waves[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingWaveGroupParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingWaveGroupParam* pInstance);
        static void Clean(FishingWaveGroupParam* pInstance);
    };

    struct FishingWavePatternParam {
        float speed;
        float intervalMinFirst;
        float intervalMaxFirst;
        float intervalMin;
        float intervalMax;
        float addRadiusMin;
        float addRadiusMax;
        uint32_t waveGroupNum;
        FishingWaveGroupParam waveGroups[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingWavePatternParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingWavePatternParam* pInstance);
        static void Clean(FishingWavePatternParam* pInstance);
    };

    struct FishingSpotSpawnFishParam {
        int32_t spawnFishId[20];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingSpotSpawnFishParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingSpotSpawnFishParam* pInstance);
        static void Clean(FishingSpotSpawnFishParam* pInstance);
    };

    struct FishingSpotFixedResultParam {
        uint32_t tableSize;
        uint32_t achievementUnlockCount;
        FishingFixedResultParam fixedResultList[50];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingSpotFixedResultParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingSpotFixedResultParam* pInstance);
        static void Clean(FishingSpotFixedResultParam* pInstance);
    };

    struct FishingSpotParam {
        FishingSpotSpawnFishParam spawnFish[4];
        FishingSpotFixedResultParam fixedResults[4];
        uint32_t useFishCoinNum[4];
        uint32_t tokenRate[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingSpotParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingSpotParam* pInstance);
        static void Clean(FishingSpotParam* pInstance);
    };

    struct FishingTutorialParam {
        uint32_t singleWaveSuccessCount;
        uint32_t holdWaveSuccessCount;
        FishingWavePatternParam singleWave;
        FishingWavePatternParam holdWave;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingTutorialParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingTutorialParam* pInstance);
        static void Clean(FishingTutorialParam* pInstance);
    };

    struct FishingTradeTableParma {
        uint8_t sales[9];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingTradeTableParma* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingTradeTableParma* pInstance);
        static void Clean(FishingTradeTableParma* pInstance);
    };

    struct FishingTradeParam {
        FishingTradeTableParma spot[4];
        uint8_t prices[9];
        uint8_t pricesVeryHard[9];
        uint8_t counts[9];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingTradeParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingTradeParam* pInstance);
        static void Clean(FishingTradeParam* pInstance);
    };

    struct FishingParameter {
        FishingCommonParam common;
        FishingSuccessPatternParam successPattern[10];
        FishingWavePatternParam wavePattern[10];
        FishingFishGroupParam fishGroup[10];
        FishingFishParam fish[130];
        FishingSpotParam spot;
        FishingTutorialParam tutorial;
        FishingTradeParam trade;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishingParameter* pInstance);
        static void Clean(FishingParameter* pInstance);
    };

    struct GimmickCameraSimpleParam {
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 cameraPosOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GimmickCameraSimpleParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GimmickCameraSimpleParam* pInstance);
        static void Clean(GimmickCameraSimpleParam* pInstance);
    };

    struct ObjKodamaEscortParameterElement {
        int32_t applicableFailedCount;
        float stackingHeight;
        float blowAwayLengthMin;
        float blowAwayLengthMax;
        float blowAwayHeightMin;
        float blowAwayHeightMax;
        float modelScale;
        float modelScaleSticking;
        float capsuleRadius;
        float capsuleHeight;
        csl::math::Vector3 capsuleOffset;
        float searchRadius;
        float rotationAnglePerSec;
        float verticalJumpSpeedMin;
        float verticalJumpSpeedMax;
        float horizontalJumpSpeedMin;
        float horizontalJumpSpeedMax;
        float jumpInterval;
        float contactRadius;
        float collectTime;
        float splineVelocityY;
        float splineVelocityMultiplier;
        float splineJumpTime;
        float flockRange;
        float spaceHA;
        float maxTiltOfEachKodamaBending;
        float bendingTimeDuringStop;
        float maxTiltOfEachKodamaBendingStop;
        float bendingCycleTimeDuringStay;
        float maxTiltOfEachKodamaBendingStay;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaEscortParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaEscortParameterElement* pInstance);
        static void Clean(ObjKodamaEscortParameterElement* pInstance);
    };

    struct ObjKodamaEscortParameter {
        ObjKodamaEscortParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaEscortParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaEscortParameter* pInstance);
        static void Clean(ObjKodamaEscortParameter* pInstance);
    };

    struct QuestKodamaCollectionBaseParameter {
        int32_t clearKodamaNum;
        float modelScale;
        float capsuleRadius;
        float capsuleHeight;
        csl::math::Vector3 capsuleOffset;
        float searchRadius;
        float collectTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestKodamaCollectionBaseParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestKodamaCollectionBaseParameter* pInstance);
        static void Clean(QuestKodamaCollectionBaseParameter* pInstance);
    };

    struct QuestKodamaCollectionMoveParameter {
        float rotationAnglePerSec;
        float moveSpeed;
        float moveStopSpeed;
        float moveStopeTime;
        float groupRadius;
        float groupMoveAdjustRangeOffset;
        float groupLeaderFixTime;
        float returnToCenterDistance;
        float returnToCenterRotationAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestKodamaCollectionMoveParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestKodamaCollectionMoveParameter* pInstance);
        static void Clean(QuestKodamaCollectionMoveParameter* pInstance);
    };

    struct QuestKodamaCollectionSandBombParameter {
        float sandStormTime;
        float noBombsTime;
        float sandStormInLerpTime;
        float sandStormOutLerpTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestKodamaCollectionSandBombParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestKodamaCollectionSandBombParameter* pInstance);
        static void Clean(QuestKodamaCollectionSandBombParameter* pInstance);
    };

    struct QuestKodamaCollectionTimerParameter {
        bool isTimeUp;
        float timeLimitSeconds;
        float cautionTime;
        float warningTime;
        bool useCautionAnimation;
        bool useWarningAnimation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestKodamaCollectionTimerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestKodamaCollectionTimerParameter* pInstance);
        static void Clean(QuestKodamaCollectionTimerParameter* pInstance);
    };

    struct ObjKodamaQuestDesertIslandParameter {
        int32_t applicableFailedCount;
        QuestKodamaCollectionBaseParameter baseParam;
        QuestKodamaCollectionMoveParameter moveParam;
        QuestKodamaCollectionSandBombParameter bombParam;
        QuestKodamaCollectionTimerParameter timerParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaQuestDesertIslandParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaQuestDesertIslandParameter* pInstance);
        static void Clean(ObjKodamaQuestDesertIslandParameter* pInstance);
    };

    struct QuestKodamaCollectionBombParameter {
        float bombSpawnTrialTime;
        uint16_t numKodamasNeededForBombSpawnRate2;
        uint16_t numKodamasNeededForBombSpawnRate3;
        float bombSpawnRate1;
        float bombSpawnRate2;
        float bombSpawnRate3;
        uint8_t maxAliveBombNum;
        float bombSpawnRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestKodamaCollectionBombParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestKodamaCollectionBombParameter* pInstance);
        static void Clean(QuestKodamaCollectionBombParameter* pInstance);
    };

    struct ObjKodamaQuestGrassIslandParameter {
        int32_t applicableFailedCount;
        QuestKodamaCollectionBaseParameter baseParam;
        QuestKodamaCollectionMoveParameter moveParam;
        QuestKodamaCollectionBombParameter bombParam;
        QuestKodamaCollectionTimerParameter timerParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaQuestGrassIslandParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaQuestGrassIslandParameter* pInstance);
        static void Clean(ObjKodamaQuestGrassIslandParameter* pInstance);
    };

    struct ObjKodamaQuestParameter {
        ObjKodamaQuestGrassIslandParameter grassIslandParam[3];
        ObjKodamaQuestDesertIslandParameter desertIslandParam[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjKodamaQuestParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjKodamaQuestParameter* pInstance);
        static void Clean(ObjKodamaQuestParameter* pInstance);
    };

    struct ObjQuestBoxParameter {
        float dropBoxProbabilly;
        float boxHpSmall;
        float boxHpMiddle;
        float boxHpLarge;
        float friction;
        float mass;
        float gravity;
        float linearDamping;
        float angularDamping;
        csl::math::Vector3 maxSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjQuestBoxParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjQuestBoxParameter* pInstance);
        static void Clean(ObjQuestBoxParameter* pInstance);
    };

    struct ObjBeeFlowerParameter {
        float modelScale;
        float capsuleRadiusSprouts;
        float capsuleRadiusFlower;
        float capsuleHeightSprouts;
        float capsuleHeightFlower;
        csl::math::Vector3 effectOffsetSprouts;
        csl::math::Vector3 effectOffsetFlower;
        float beeAttractDist;
        float efficacyTimeFlower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBeeFlowerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBeeFlowerParameter* pInstance);
        static void Clean(ObjBeeFlowerParameter* pInstance);
    };

    struct ObjBeeSwarmParameter {
        csl::math::Vector3 targetOffset;
        csl::math::Vector3 targetOffsetFlower;
        float collRadius;
        float modelScale;
        float beeMoveSpeed;
        float reflectionAngle;
        float coefAverage;
        float coefCenter;
        float coefRepulse;
        float waitTimeAfterAttack;
        float waitTimeAfterFlower;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjBeeSwarmParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjBeeSwarmParameter* pInstance);
        static void Clean(ObjBeeSwarmParameter* pInstance);
    };

    struct ObjMowingGrassParameter {
        float radius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMowingGrassParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMowingGrassParameter* pInstance);
        static void Clean(ObjMowingGrassParameter* pInstance);
    };

    struct ObjMowingParameterElement {
        ObjMowingGrassParameter grassParam;
        ObjBeeFlowerParameter beeFlowerParam;
        ObjBeeSwarmParameter beeSwarm;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMowingParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMowingParameterElement* pInstance);
        static void Clean(ObjMowingParameterElement* pInstance);
    };

    struct ObjMowingParameter {
        ObjMowingParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjMowingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjMowingParameter* pInstance);
        static void Clean(ObjMowingParameter* pInstance);
    };

    struct QuestCameraParameter {
        float distance;
        float azimuthSensitivity;
        float elevationUpSensitivity;
        float elevationDownSensitivity;
        float elevationOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestCameraParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestCameraParameter* pInstance);
        static void Clean(QuestCameraParameter* pInstance);
    };

    struct QuestCollectitemTimerParameter {
        float timeLimitSeconds;
        float cautionTime;
        float warningTime;
        bool useCautionAnimation;
        bool useWarningAnimation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestCollectitemTimerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestCollectitemTimerParameter* pInstance);
        static void Clean(QuestCollectitemTimerParameter* pInstance);
    };

    struct QuestCollectItemParameterElement {
        int32_t applicableFailedCount;
        int32_t RequestItemNum;
        QuestCollectitemTimerParameter timerParam;
        QuestCameraParameter cameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestCollectItemParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestCollectItemParameterElement* pInstance);
        static void Clean(QuestCollectItemParameterElement* pInstance);
    };

    struct QuestCollectItemParameter {
        QuestCollectItemParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestCollectItemParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestCollectItemParameter* pInstance);
        static void Clean(QuestCollectItemParameter* pInstance);
    };

    struct QuestDarumaTimerParameter {
        float timeLimitSeconds;
        float cautionTime;
        float warningTime;
        bool useCautionAnimation;
        bool useWarningAnimation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestDarumaTimerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestDarumaTimerParameter* pInstance);
        static void Clean(QuestDarumaTimerParameter* pInstance);
    };

    struct QuestDarumaBattleParameterElement {
        int32_t applicableFailedCount;
        float collectionColliderRadius;
        float collectionColliderHeight;
        QuestDarumaTimerParameter timerParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestDarumaBattleParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestDarumaBattleParameterElement* pInstance);
        static void Clean(QuestDarumaBattleParameterElement* pInstance);
    };

    struct QuestDarumaBattleParameter {
        QuestDarumaBattleParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestDarumaBattleParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestDarumaBattleParameter* pInstance);
        static void Clean(QuestDarumaBattleParameter* pInstance);
    };

    struct QuestDrawBridgeTimerParameter {
        float timeLimitSeconds;
        float cautionTime;
        float warningTime;
        bool useCautionAnimation;
        bool useWarningAnimation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestDrawBridgeTimerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestDrawBridgeTimerParameter* pInstance);
        static void Clean(QuestDrawBridgeTimerParameter* pInstance);
    };

    struct QuestDrawBridgeParameterElement {
        int32_t applicableFailedCount;
        QuestDrawBridgeTimerParameter timerParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestDrawBridgeParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestDrawBridgeParameterElement* pInstance);
        static void Clean(QuestDrawBridgeParameterElement* pInstance);
    };

    struct QuestDrawBridgeParameter {
        QuestDrawBridgeParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestDrawBridgeParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestDrawBridgeParameter* pInstance);
        static void Clean(QuestDrawBridgeParameter* pInstance);
    };

    struct QuestMowingEarnedScoreParameter {
        float visibleSize;
        float visibleTime;
        csl::math::Vector3 viewOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingEarnedScoreParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingEarnedScoreParameter* pInstance);
        static void Clean(QuestMowingEarnedScoreParameter* pInstance);
    };

    struct QuestMowingPlayerParameter {
        float playerBoostRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingPlayerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingPlayerParameter* pInstance);
        static void Clean(QuestMowingPlayerParameter* pInstance);
    };

    struct QuestMowingPointParameter {
        uint32_t collisionNum;
        uint32_t pointLine;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingPointParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingPointParameter* pInstance);
        static void Clean(QuestMowingPointParameter* pInstance);
    };

    struct QuestMowingTimerParameter {
        float timeLimitSeconds;
        float cautionTime;
        float warningTime;
        bool useCautionAnimation;
        bool useWarningAnimation;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingTimerParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingTimerParameter* pInstance);
        static void Clean(QuestMowingTimerParameter* pInstance);
    };

    struct QuestMowingResultCameraParameter {
        float resultCameraEaseTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingResultCameraParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingResultCameraParameter* pInstance);
        static void Clean(QuestMowingResultCameraParameter* pInstance);
    };

    struct QuestMowingParameterElement {
        int32_t applicableFailedCount;
        uint32_t questClearPoint;
        QuestMowingPlayerParameter playerParam;
        uint32_t pointParamNum;
        QuestMowingPointParameter pointParam[5];
        QuestMowingTimerParameter timerParam;
        QuestMowingEarnedScoreParameter scoreUIParam;
        QuestMowingResultCameraParameter resultCameraParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingParameterElement* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingParameterElement* pInstance);
        static void Clean(QuestMowingParameterElement* pInstance);
    };

    struct QuestMowingParameter {
        QuestMowingParameterElement element[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(QuestMowingParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(QuestMowingParameter* pInstance);
        static void Clean(QuestMowingParameter* pInstance);
    };

    struct AnimationParameter {
        float angle;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AnimationParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AnimationParameter* pInstance);
        static void Clean(AnimationParameter* pInstance);
    };

    struct BulletPatternParameter {
        enum class Type : uint8_t {
            BulletFixed = 0,
            BulletAimPlayer = 1,
            LaserNormal = 2,
            LaserThick = 3,
            LaserAimPlayer = 4,
        };

        enum class ElementType : uint8_t {
            Hacking1 = 0,
            Hacking2 = 1,
        };

        Type type;
        ElementType element;
        float startAngle;
        float endAngle;
        uint8_t shootNum;
        float shootSpeed;
        uint8_t wayNum;
        float wayAngle;
        float laserLength;
        float lifeTime;
        bool animation;
        AnimationParameter animParam[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BulletPatternParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BulletPatternParameter* pInstance);
        static void Clean(BulletPatternParameter* pInstance);
    };

    struct BulletPatternSetParameter {
        csl::ut::VariableString name;
        BulletPatternParameter param;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BulletPatternSetParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BulletPatternSetParameter* pInstance);
        static void Clean(BulletPatternSetParameter* pInstance);
    };

    struct HackingBulletParameter {
        float bulletRadius;
        float bulletModelScale;
        float bulletRadiusLastBoss;
        float bulletModelScaleLastBoss;
        float bulletModelOffsetRateLastBoss;
        float laserNormalRadius;
        float laserThickRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HackingBulletParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HackingBulletParameter* pInstance);
        static void Clean(HackingBulletParameter* pInstance);
    };

    struct BulletPatternSetParameters {
        HackingBulletParameter bulletParam;
        BulletPatternSetParameter data[256];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BulletPatternSetParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BulletPatternSetParameters* pInstance);
        static void Clean(BulletPatternSetParameters* pInstance);
    };

    struct EnemyLaserConfig {
        float rotLaserVanishTime;
        float rotLaserOmenTime;
        float bigLaserVanishTime;
        float bigLaserOmenTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EnemyLaserConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EnemyLaserConfig* pInstance);
        static void Clean(EnemyLaserConfig* pInstance);
    };

    struct HackingEnemyParameterCore {
        float colliderRadius;
        float colliderHeight;
        float modelScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HackingEnemyParameterCore* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HackingEnemyParameterCore* pInstance);
        static void Clean(HackingEnemyParameterCore* pInstance);
    };

    struct HackingEnemyParameterNormal {
        uint16_t hpS;
        uint16_t hpM;
        uint16_t hpL;
        float colliderRadius;
        float colliderHeight;
        float modelScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HackingEnemyParameterNormal* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HackingEnemyParameterNormal* pInstance);
        static void Clean(HackingEnemyParameterNormal* pInstance);
    };

    struct HackingEnemyParameters {
        HackingEnemyParameterNormal normalEnemyParam;
        HackingEnemyParameterCore coreEnemyParam;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HackingEnemyParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HackingEnemyParameters* pInstance);
        static void Clean(HackingEnemyParameters* pInstance);
    };

    struct ObjSoundSourceSpawner {
        enum class PlayMode : int8_t {
            PLAYMODE_LOOP = 0,
            PLAYMODE_ONE_SHOT = 1,
            PLAYMODE_PERIODIC = 2,
        };

        csl::ut::VariableString cueName;
        PlayMode playMode;
        float timeOffset;
        float playInterval;
        float volume;
        float hearingRange;
        float undampedRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ObjSoundSourceSpawner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ObjSoundSourceSpawner* pInstance);
        static void Clean(ObjSoundSourceSpawner* pInstance);
    };

    struct ChaosEmeraldStorageParam {
        bool isEnable;
        int8_t useKeyNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChaosEmeraldStorageParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChaosEmeraldStorageParam* pInstance);
        static void Clean(ChaosEmeraldStorageParam* pInstance);
    };

    struct IslandParam {
        ChaosEmeraldStorageParam storages[7];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandParam* pInstance);
        static void Clean(IslandParam* pInstance);
    };

    struct KodamaCommonParam {
        float takableRange;
        float fadeTime;
        float chestJumpOutFadeTime;
        float tutorialDelayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaCommonParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaCommonParam* pInstance);
        static void Clean(KodamaCommonParam* pInstance);
    };

    struct KodamaFollowParam {
        int8_t maxFollowNum;
        float speed;
        float rotateSpeed;
        float stopDistance;
        float vanishDistance;
        float respawnStandTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaFollowParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaFollowParam* pInstance);
        static void Clean(KodamaFollowParam* pInstance);
    };

    struct KodamaNormalParam {
        KodamaCommonParam common;
        KodamaFollowParam follow;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaNormalParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaNormalParam* pInstance);
        static void Clean(KodamaNormalParam* pInstance);
    };

    struct KodamaElderParam {
        int32_t levelupKodamaNum[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaElderParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaElderParam* pInstance);
        static void Clean(KodamaElderParam* pInstance);
    };

    struct KodamaHermitLvUpParam {
        int32_t difficulty[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaHermitLvUpParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaHermitLvUpParam* pInstance);
        static void Clean(KodamaHermitLvUpParam* pInstance);
    };

    struct KodamaHermitParam {
        KodamaHermitLvUpParam levelupSeedNum[99];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaHermitParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaHermitParam* pInstance);
        static void Clean(KodamaHermitParam* pInstance);
    };

    struct KodamaNewFormParam {
        float takableRange;
        float colliderRange;
        float fadeTime;
        float spaceVertical;
        float spaceHorizontal;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaNewFormParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaNewFormParam* pInstance);
        static void Clean(KodamaNewFormParam* pInstance);
    };

    struct KodamaParam {
        KodamaNormalParam normal;
        KodamaElderParam elder;
        KodamaHermitParam hermit;
        KodamaNewFormParam newform[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KodamaParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KodamaParam* pInstance);
        static void Clean(KodamaParam* pInstance);
    };

    struct NpcParam {
        int32_t inputSequenceItemNumShort;
        int32_t inputSequenceItemNumMiddle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(NpcParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(NpcParam* pInstance);
        static void Clean(NpcParam* pInstance);
    };

    struct IslandParameter {
        IslandParam islands[5];
        KodamaParam kodama;
        NpcParam npc;
        int32_t portalExtraKeyNum;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandParameter* pInstance);
        static void Clean(IslandParameter* pInstance);
    };

    struct PathParameterCommon {
        enum class PathType : int8_t {
            OBJ_PATH = 0,
            GR_PATH = 1,
            SV_PATH = 2,
        };

        enum class GrindCapVisible : int8_t {
            Both = 0,
            Head = 1,
            Tail = 2,
            None = 3,
        };

        enum class ParamType : int8_t {
            PARAM_NONE = 0,
            PARAM_LINE = 1,
            PARAM_LOOP = 2,
            PARAM_SPIRAL = 3,
            PARAM_SET_PATH = 4,
            PARAM_POLYGON = 5,
            PARAM_CIRCLE = 6,
        };

        int32_t pathUID;
        PathType pathType;
        GrindCapVisible capVisible;
        float grindUnitLength;
        ParamType paramType;
        bool isMovable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PathParameterCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PathParameterCommon* pInstance);
        static void Clean(PathParameterCommon* pInstance);
    };

    struct PlayerCameraParameter {
        enum class CameraType : uint8_t {
            None = 0,
            Fixed = 1,
            Offset = 2,
            Follow = 3,
            Pan = 4,
            StaticPan = 5,
            PanUpByFront = 6,
        };

        enum class CameraCoordType : uint8_t {
            Orthgonal = 0,
            Spherical = 1,
        };

        CameraType type;
        float time;
        float easeinTime;
        CameraCoordType lookAtCoord;
        csl::math::Vector3 localLookAtOffset;
        csl::math::Vector3 worldLookAtOffset;
        CameraCoordType eyeCoord;
        csl::math::Vector3 localEyeOffset;
        csl::math::Vector3 worldEyeOffset;
        float roll;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerCameraParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerCameraParameter* pInstance);
        static void Clean(PlayerCameraParameter* pInstance);
    };

    struct PlayerCameraSetParameter {
        enum class Priority : uint8_t {
            Default = 0,
            High = 1,
        };

        csl::ut::VariableString name;
        float easeoutTime;
        Priority priority;
        PlayerCameraParameter param[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerCameraSetParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerCameraSetParameter* pInstance);
        static void Clean(PlayerCameraSetParameter* pInstance);
    };

    struct PlayerCameraSetParameters {
        PlayerCameraSetParameter data[45];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerCameraSetParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerCameraSetParameters* pInstance);
        static void Clean(PlayerCameraSetParameters* pInstance);
    };

    struct EffectRecord {
        csl::ut::VariableString emitterSetName[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EffectRecord* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EffectRecord* pInstance);
        static void Clean(EffectRecord* pInstance);
    };

    struct EffectRecordBaseTable {
        EffectRecord data[100];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EffectRecordBaseTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EffectRecordBaseTable* pInstance);
        static void Clean(EffectRecordBaseTable* pInstance);
    };

    struct EffectRecordTable {
        EffectRecord data[255];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(EffectRecordTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(EffectRecordTable* pInstance);
        static void Clean(EffectRecordTable* pInstance);
    };

    struct AmyParamAirCyHammer {
        float acceleForce;
        float deceleForce;
        float overSpeedDeceleForce;
        float rotationForce;
        float rotationForceDecaySpeed;
        float rotationForceDecayRate;
        float rotationForceDecayMax;
        float airRadius;
        float groundRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmyParamAirCyHammer* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmyParamAirCyHammer* pInstance);
        static void Clean(AmyParamAirCyHammer* pInstance);
    };

    struct AmyParamCyHammer {
        float radius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmyParamCyHammer* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmyParamCyHammer* pInstance);
        static void Clean(AmyParamCyHammer* pInstance);
    };

    struct PlayerParamComboCommon {
        float longPressTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboCommon* pInstance);
        static void Clean(PlayerParamComboCommon* pInstance);
    };

    struct PlayerParamComboMove {
        enum class ComboMoveType : uint8_t {
            Homing = 0,
            Step = 1,
            None = 2,
        };

        ComboMoveType moveType;
        float moveInitialSpeed;
        float moveMaxSpeed;
        float moveAccele;
        float timeout;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboMove* pInstance);
        static void Clean(PlayerParamComboMove* pInstance);
    };

    struct PlayerParamComboMoveCorrection {
        float moveSpeed;
        float rotateSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboMoveCorrection* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboMoveCorrection* pInstance);
        static void Clean(PlayerParamComboMoveCorrection* pInstance);
    };

    struct PlayerParamComboTransit {
        enum class Action : int8_t {
            Root = 0,
            HomingAttack = 1,
            AerialHomingAttack = 2,
            Pursuit = 3,
            Stomping = 4,
            LoopKick = 5,
            Crasher = 6,
            SpinSlash = 7,
            SonicBoom = 8,
            CrossSlash = 9,
            HomingShot = 10,
            ChargeAttack = 11,
            QuickCyloop = 12,
            AerialQuickCyloop = 13,
            AcceleCombo1 = 14,
            AcceleCombo2 = 15,
            AcceleCombo3 = 16,
            AcceleCombo4 = 17,
            AerialAcceleCombo1 = 18,
            AerialAcceleCombo2 = 19,
            AerialAcceleCombo3 = 20,
            AerialAcceleCombo4 = 21,
            ComboFinish = 22,
            SpinJump = 23,
            Smash = 24,
            Behind = 25,
            Guarded = 26,
            Avoid = 27,
            AirBoost = 28,
            AfterAirBoost = 29,
            KnucklesPunch1 = 30,
            KnucklesPunch2 = 31,
            KnucklesUppercut = 32,
            KnucklesCyKnuckle = 33,
            KnucklesHeatKnuckle = 34,
            AmyTarotAttack = 35,
            AmyTarotRolling = 36,
            AmyCyHammer = 37,
            ActionNum = 38,
        };

        enum class Control {
            Attack = 0,
            AttackLong = 1,
            Cyloop = 2,
            Jump = 3,
            Squat = 4,
            Shot = 5,
            ControlNum = 6,
            Invalid = -1,
        };

        Action transitExistTarget[6];
        Action transitInAir[6];
        Action transitNotExistTarget[6];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboTransit* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboTransit* pInstance);
        static void Clean(PlayerParamComboTransit* pInstance);
    };

    struct PlayerParamComboTransitTable {
        PlayerParamComboTransit root;
        PlayerParamComboTransit homingAttack;
        PlayerParamComboTransit aerialHoming;
        PlayerParamComboTransit pursuit;
        PlayerParamComboTransit stomping;
        PlayerParamComboTransit loopKick;
        PlayerParamComboTransit crasher;
        PlayerParamComboTransit spinSlash;
        PlayerParamComboTransit sonicBoom;
        PlayerParamComboTransit crossSlash;
        PlayerParamComboTransit homingShot;
        PlayerParamComboTransit chargeAttack;
        PlayerParamComboTransit quickCyloop;
        PlayerParamComboTransit aerialQuickCyloop;
        PlayerParamComboTransit acceleCombo1;
        PlayerParamComboTransit acceleCombo2;
        PlayerParamComboTransit acceleCombo3;
        PlayerParamComboTransit acceleCombo4;
        PlayerParamComboTransit aerialAcceleCombo1;
        PlayerParamComboTransit aerialAcceleCombo2;
        PlayerParamComboTransit aerialAcceleCombo3;
        PlayerParamComboTransit aerialAcceleCombo4;
        PlayerParamComboTransit behind;
        PlayerParamComboTransit guarded;
        PlayerParamComboTransit avoid;
        PlayerParamComboTransit airBoost;
        PlayerParamComboTransit afterAirBoost;
        PlayerParamComboTransit knucklesPunch1;
        PlayerParamComboTransit knucklesPunch2;
        PlayerParamComboTransit knucklesUppercut;
        PlayerParamComboTransit knucklesCyKnuckle;
        PlayerParamComboTransit knucklesHeatKnuckle;
        PlayerParamComboTransit amyTarotAttack;
        PlayerParamComboTransit amyTarotRolling;
        PlayerParamComboTransit amyCyHammer;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboTransitTable* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboTransitTable* pInstance);
        static void Clean(PlayerParamComboTransitTable* pInstance);
    };

    struct PlayerParamCombo {
        PlayerParamComboCommon common;
        PlayerParamComboMove comboMoveSonic;
        PlayerParamComboMove comboMoveSupersonic;
        PlayerParamComboMoveCorrection comboMoveCorrection;
        PlayerParamComboTransitTable comboTable;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCombo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCombo* pInstance);
        static void Clean(PlayerParamCombo* pInstance);
    };

    struct CommonPackageAmy {
        PlayerParamCombo combo;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CommonPackageAmy* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CommonPackageAmy* pInstance);
        static void Clean(CommonPackageAmy* pInstance);
    };

    struct AmyParamPropellerJump {
        float initialSpeed;
        float bounceSpeed;
        float limitSpeedMin;
        float maxFallSpeed;
        float fallGravitySize;
        float minDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmyParamPropellerJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmyParamPropellerJump* pInstance);
        static void Clean(AmyParamPropellerJump* pInstance);
    };

    struct AmyParamHighJump {
        float jumpForce;
        float longPressTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmyParamHighJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmyParamHighJump* pInstance);
        static void Clean(AmyParamHighJump* pInstance);
    };

    struct PlayerParamAttackCollider {
        enum class Condition : int8_t {
            Time = 0,
            Animation = 1,
        };

        enum class Shape : int8_t {
            Sphere = 0,
            Cylinder = 1,
            Box = 2,
        };

        Condition condition;
        int8_t count;
        float spanTime;
        Shape shape;
        csl::math::Vector3 shapeSize;
        csl::math::Vector3 shapeOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAttackCollider* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAttackCollider* pInstance);
        static void Clean(PlayerParamAttackCollider* pInstance);
    };

    struct AmyParamTarotAttack {
        PlayerParamAttackCollider hit;
        PlayerParamAttackCollider rollingHit;
        float longPressTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmyParamTarotAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmyParamTarotAttack* pInstance);
        static void Clean(AmyParamTarotAttack* pInstance);
    };

    struct PlayerParamSpeedAcceleData {
        float force;
        float force2;
        float damperRange;
        float jerkMin;
        float jerkMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpeedAcceleData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpeedAcceleData* pInstance);
        static void Clean(PlayerParamSpeedAcceleData* pInstance);
    };

    struct PlayerParamSpinBoostSpeed {
        float initialSpeed;
        float maxSpeed;
        PlayerParamSpeedAcceleData accele;
        PlayerParamSpeedAcceleData decele;
        float baseRotateForce;
        float minTurnSpeed;
        float turnDeceleAngleMin;
        float turnDeceleAngleMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpinBoostSpeed* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpinBoostSpeed* pInstance);
        static void Clean(PlayerParamSpinBoostSpeed* pInstance);
    };

    struct PlayerParamSpeedAcceleData2 {
        float force;
        float damperRange;
        float jerkMin;
        float jerkMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpeedAcceleData2* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpeedAcceleData2* pInstance);
        static void Clean(PlayerParamSpeedAcceleData2* pInstance);
    };

    struct PlayerParamSpinBoost {
        enum class AirAccelMode : int8_t {
            Alawys = 0,
            None = 1,
            Speed = 2,
        };

        float forceRunTime;
        float initialRunTime;
        PlayerParamSpinBoostSpeed speedBall;
        PlayerParamSpinBoostSpeed speedBoost;
        PlayerParamSpeedAcceleData2 deceleNeutralMin;
        PlayerParamSpeedAcceleData2 deceleNeutralMax;
        float gravitySize;
        float gravityBeginTime;
        float gravityMaxTime;
        float gravitySizeMinInAir;
        float gravitySizeMaxInAir;
        float maxGravityAccele;
        float maxGravityDecele;
        float inAirTime;
        float spinBoostEndSpeed;
        float jumpOutAngle;
        float jumpOutSpeed;
        bool humpJumpOut;
        AirAccelMode airAccelMode;
        float airAccelVertSpeedThreshold;
        float chargeRotateForce;
        float chargeRotateForceMinAngle;
        float chargeRotateForceMaxAngle;
        csl::ut::VariableString cameraShakeName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpinBoost* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpinBoost* pInstance);
        static void Clean(PlayerParamSpinBoost* pInstance);
    };

    struct ModePackageAmy {
        AmyParamPropellerJump propellerJump;
        AmyParamHighJump highJump;
        AmyParamTarotAttack tarotAttack;
        AmyParamCyHammer cyHammer;
        AmyParamAirCyHammer airCyHammer;
        PlayerParamSpinBoost spinBoost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ModePackageAmy* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ModePackageAmy* pInstance);
        static void Clean(ModePackageAmy* pInstance);
    };

    struct PlayerParamSpeedData {
        float initial;
        float min;
        float max;
        float minTurn;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpeedData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpeedData* pInstance);
        static void Clean(PlayerParamSpeedData* pInstance);
    };

    struct PlayerParamSpeed {
        PlayerParamSpeedData normal;
        PlayerParamSpeedData normal2;
        PlayerParamSpeedData boost;
        PlayerParamSpeedData boost2;
        PlayerParamSpeedData boostLvMax;
        PlayerParamSpeedData boostLvMax2;
        float maxSpeedOver;
        float opitonMaxSpeedLimitMin;
        float opitonMaxSpeedLimitMax;
        float thresholdStopSpeed;
        float maxFallSpeed;
        PlayerParamSpeedAcceleData accele;
        PlayerParamSpeedAcceleData decele;
        PlayerParamSpeedAcceleData2 deceleNeutralMin;
        PlayerParamSpeedAcceleData2 deceleNeutralMax;
        float acceleAuto;
        float deceleAuto;
        float turnDeceleAngleMin;
        float turnDeceleAngleMax;
        float maxGravityAccele;
        float maxGravityDecele;
        float deceleSquat;
        float acceleSensitive;
        float boostAnimSpeedInWater;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpeed* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpeed* pInstance);
        static void Clean(PlayerParamSpeed* pInstance);
    };

    struct PlayerParamJump {
        float preActionTime;
        float longPressTime;
        float addForceTime;
        float force;
        float addForce;
        float forceMin;
        float gravitySize;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamJump* pInstance);
        static void Clean(PlayerParamJump* pInstance);
    };

    struct PlayerParamJumpSpeed {
        float acceleForce;
        float deceleForce;
        float deceleNeutralForce;
        float deceleBackForce;
        float limitMin;
        float limitUpSpeed;
        float rotationForce;
        float rotationForceDecaySpeed;
        float rotationForceDecayRate;
        float rotationForceDecayMax;
        float baseAirDragScaleMin;
        float baseAirDragScaleMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamJumpSpeed* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamJumpSpeed* pInstance);
        static void Clean(PlayerParamJumpSpeed* pInstance);
    };

    struct PlayerParamDoubleJump {
        float initialSpeed;
        float bounceSpeed;
        float limitSpeedMin;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDoubleJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDoubleJump* pInstance);
        static void Clean(PlayerParamDoubleJump* pInstance);
    };

    struct PlayerParamBoost {
        float consumptionRate;
        float consumptionRateSS;
        float recoveryRate;
        float recoveryRateSS;
        float reigniteRatio;
        float recoveryByRing;
        float recoveryByAttack;
        float blurPowers[3];
        float blurEaseInTime;
        float blurEaseOutTime;
        float endSpeed;
        float powerBoostCoolTime;
        float infinityBoostTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBoost* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBoost* pInstance);
        static void Clean(PlayerParamBoost* pInstance);
    };

    struct PlayerParamAirBoost {
        float startHSpeed;
        float startHSpeedMax;
        float startVSpeed;
        float minHSpeed;
        float minHSpeedMax;
        float brakeTime;
        float minKeepTime;
        float maxKeepTime;
        float maxTime;
        float gravityRate;
        float steeringSpeed;
        float additionalTransitTime;
        float supersonicTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAirBoost* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAirBoost* pInstance);
        static void Clean(PlayerParamAirBoost* pInstance);
    };

    struct WaterModePackage {
        PlayerParamSpeed speed;
        PlayerParamJump jump;
        PlayerParamJumpSpeed jumpSpeed;
        PlayerParamDoubleJump doubleJump;
        PlayerParamBoost boost;
        PlayerParamAirBoost airboost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WaterModePackage* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WaterModePackage* pInstance);
        static void Clean(WaterModePackage* pInstance);
    };

    struct AmyParameters {
        CommonPackageAmy common;
        ModePackageAmy forwardView;
        WaterModePackage water;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmyParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmyParameters* pInstance);
        static void Clean(AmyParameters* pInstance);
    };

    struct PlayerParamOffensive {
        uint16_t pointMin;
        uint16_t pointMax;
        float damageRandomRate;
        float damageRandomRateSS;
        float shapeDamageRate;
        float shapeStunRate;
        float shapeStaggerRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamOffensive* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamOffensive* pInstance);
        static void Clean(PlayerParamOffensive* pInstance);
    };

    struct PlayerParamDefensive {
        uint8_t rateMin;
        uint8_t rateMax;
        uint16_t infimumDropRings;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDefensive* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDefensive* pInstance);
        static void Clean(PlayerParamDefensive* pInstance);
    };

    struct PlayerParamAttackCommon {
        PlayerParamOffensive offensive;
        PlayerParamDefensive defensive;
        float criticalDamageRate;
        float criticalRate;
        float criticalRateSS;
        float downedDamageRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAttackCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAttackCommon* pInstance);
        static void Clean(PlayerParamAttackCommon* pInstance);
    };

    struct PlayerParamAttackData {
        enum class HitSE : int8_t {
            SE_None = -1,
            Weak = 0,
            Strong = 1,
            VeryStrong = 2,
        };

        enum class PlayerDamageAttribute {
            AttrHomingAttack = 0,
            AttrSpinAttack = 1,
            AttrCyloop = 2,
            AttrQuickCyloop = 3,
            AttrBlowOff = 4,
            AttrBlowUp = 5,
            AttrSlamDownward = 6,
            AttrDuplicatedDamage = 7,
            AttrShot = 8,
            AttrSlingShot = 9,
            AttrAcceleCombo = 10,
            AttrStomping = 11,
            AttrFinish = 12,
            AttrAcceleHitRate = 13,
            AttrNoneHitEffect = 14,
            AttrNoneHitReaction = 15,
        };

        float damageRate;
        float damageRateSS;
        float damageRateAcceleMode;
        float damageRateManual;
        float stunPoint;
        float staggerPoint;
        csl::math::Vector3 velocity;
        float velocityKeepTime;
        float addComboValue;
        float addComboValueAccele;
        float addComboValueSS;
        float addComboValueAcceleSS;
        float addQuickCyloopEnergy;
        float addQuickCyloopEnergyAccele;
        float addQuickCyloopEnergySS;
        float addQuickCyloopEnergyAcceleSS;
        float addQuickCyloopEnergyGuard;
        float addQuickCyloopEnergyAcceleGuard;
        csl::math::Vector3 gimmickVelocity;
        float ignoreTime;
        csl::ut::Bitset<uint16_t> attributes;
        HitSE se;
        csl::ut::VariableString hitEffectName;
        csl::ut::VariableString hitEffectNameSS;
        csl::ut::VariableString hitStopName;
        csl::ut::VariableString hitStopNameDead;
        csl::ut::VariableString hitStopNameDeadBoss;
        csl::ut::VariableString hitStopNameSS;
        csl::ut::VariableString hitStopNameDeadSS;
        csl::ut::VariableString hitCameraShakeName;
        csl::ut::VariableString hitCameraShakeNameDead;
        csl::ut::VariableString hitCameraShakeNameDeadBoss;
        csl::ut::VariableString hitCameraShakeNameSS;
        csl::ut::VariableString hitCameraShakeNameDeadSS;
        csl::ut::VariableString hitVibrationName;
        csl::ut::VariableString hitVibrationNameSS;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAttackData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAttackData* pInstance);
        static void Clean(PlayerParamAttackData* pInstance);
    };

    struct PlayerParamAttack {
        PlayerParamAttackCommon common;
        PlayerParamAttackData spinAttack;
        PlayerParamAttackData spinDash;
        PlayerParamAttackData homingAttack;
        PlayerParamAttackData homingAttackAir;
        PlayerParamAttackData pursuitKick;
        PlayerParamAttackData stomping;
        PlayerParamAttackData stompingAttack;
        PlayerParamAttackData boundStompingLast;
        PlayerParamAttackData sliding;
        PlayerParamAttackData loopKick;
        PlayerParamAttackData crasher;
        PlayerParamAttackData spinSlashHoming;
        PlayerParamAttackData spinSlash;
        PlayerParamAttackData spinSlashLast;
        PlayerParamAttackData sonicBoom;
        PlayerParamAttackData crossSlash;
        PlayerParamAttackData homingShot;
        PlayerParamAttackData chargeAttack;
        PlayerParamAttackData chargeAttackLast;
        PlayerParamAttackData c;
        PlayerParamAttackData cyloopQuick;
        PlayerParamAttackData cyloopAerial;
        PlayerParamAttackData accele1;
        PlayerParamAttackData accele2;
        PlayerParamAttackData aerialAccele1;
        PlayerParamAttackData aerialAccele2;
        PlayerParamAttackData comboFinish;
        PlayerParamAttackData comboFinishF;
        PlayerParamAttackData comboFinishB;
        PlayerParamAttackData comboFinishL;
        PlayerParamAttackData comboFinishR;
        PlayerParamAttackData acceleComboFinish;
        PlayerParamAttackData acceleComboFinishF;
        PlayerParamAttackData acceleComboFinishB;
        PlayerParamAttackData acceleComboFinishL;
        PlayerParamAttackData acceleComboFinishR;
        PlayerParamAttackData smash;
        PlayerParamAttackData smashLast;
        PlayerParamAttackData slingShot;
        PlayerParamAttackData knucklesPunch1;
        PlayerParamAttackData knucklesPunch2;
        PlayerParamAttackData knucklesUppercut;
        PlayerParamAttackData amyTarotAttack;
        PlayerParamAttackData amyTarotRolling;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAttack* pInstance);
        static void Clean(PlayerParamAttack* pInstance);
    };

    struct PlayerParamWaterAct {
        float resistRate;
        float breatheBrake;
        float breatheTime;
        float breatheGravity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamWaterAct* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamWaterAct* pInstance);
        static void Clean(PlayerParamWaterAct* pInstance);
    };

    struct PlayerParamBaseJump {
        float baseSpeed;
        float upSpeed;
        float upSpeedAir;
        float edgeSpeed;
        float airActionTime;
        float wallMoveTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBaseJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBaseJump* pInstance);
        static void Clean(PlayerParamBaseJump* pInstance);
    };

    struct PlayerParamBallMove {
        float maxSpeed;
        float slidePower;
        float brakeForce;
        float slidePowerSlalom;
        float brakeForceSlalom;
        float releaseSpeed;
        bool useInput;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBallMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBallMove* pInstance);
        static void Clean(PlayerParamBallMove* pInstance);
    };

    struct PlayerParamLocusData {
        float width;
        float distance;
        float u0;
        float u1;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLocusData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLocusData* pInstance);
        static void Clean(PlayerParamLocusData* pInstance);
    };

    struct PlayerParamLocus {
        PlayerParamLocusData data[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLocus* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLocus* pInstance);
        static void Clean(PlayerParamLocus* pInstance);
    };

    struct PlayerParamAuraTrain {
        float effectSpanTime;
        float effectLifeTime;
        float effectOffsetDistance;
        float effectOverlapDistance;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAuraTrain* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAuraTrain* pInstance);
        static void Clean(PlayerParamAuraTrain* pInstance);
    };

    struct PlayerParamLevel {
        uint8_t ringsLevel;
        uint8_t speedLevel;
        uint8_t offensiveLevel;
        uint8_t defensiveLevel;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLevel* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLevel* pInstance);
        static void Clean(PlayerParamLevel* pInstance);
    };

    struct PlayerParamBarrierWall {
        float coolTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBarrierWall* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBarrierWall* pInstance);
        static void Clean(PlayerParamBarrierWall* pInstance);
    };

    struct PlayerParamDamageRateLevel {
        float rates[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageRateLevel* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageRateLevel* pInstance);
        static void Clean(PlayerParamDamageRateLevel* pInstance);
    };

    struct PlayerParamDamageRate {
        PlayerParamDamageRateLevel diffculties[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageRate* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageRate* pInstance);
        static void Clean(PlayerParamDamageRate* pInstance);
    };

    struct CommonPackage {
        PlayerParamAttack attack;
        PlayerParamWaterAct wateract;
        PlayerParamBaseJump basejump;
        PlayerParamBallMove ballmove;
        PlayerParamLocus locus;
        PlayerParamAuraTrain auratrain;
        PlayerParamLevel level;
        PlayerParamBarrierWall barrierWall;
        PlayerParamDamageRate damageRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CommonPackage* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CommonPackage* pInstance);
        static void Clean(CommonPackage* pInstance);
    };

    struct KnucklesParamComboPunch1 {
        PlayerParamAttackCollider hit;
        float motionScale;
        float motionSpeedRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamComboPunch1* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamComboPunch1* pInstance);
        static void Clean(KnucklesParamComboPunch1* pInstance);
    };

    struct KnucklesParamComboPunch2 {
        PlayerParamAttackCollider hit;
        float motionScale;
        float motionSpeedRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamComboPunch2* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamComboPunch2* pInstance);
        static void Clean(KnucklesParamComboPunch2* pInstance);
    };

    struct KnucklesParamComboUppercut {
        PlayerParamAttackCollider hit;
        float motionScale;
        float motionSpeedRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamComboUppercut* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamComboUppercut* pInstance);
        static void Clean(KnucklesParamComboUppercut* pInstance);
    };

    struct CommonPackageKnuckles {
        PlayerParamCombo combo;
        KnucklesParamComboPunch1 comboPunch1;
        KnucklesParamComboPunch2 comboPunch2;
        KnucklesParamComboUppercut comboUppercut;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CommonPackageKnuckles* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CommonPackageKnuckles* pInstance);
        static void Clean(CommonPackageKnuckles* pInstance);
    };

    struct PlayerParamAcceleMode {
        float declineSpeed;
        float declineSpeedAccele;
        float lossDamaged;
        float lossDamagedAccele;
        uint32_t comboRateAccele;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAcceleMode* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAcceleMode* pInstance);
        static void Clean(PlayerParamAcceleMode* pInstance);
    };

    struct PlayerParamAcceleCombo {
        PlayerParamAttackCollider hit;
        float motionSpeedRatio;
        float motionSpeedRatioAccele;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAcceleCombo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAcceleCombo* pInstance);
        static void Clean(PlayerParamAcceleCombo* pInstance);
    };

    struct PlayerParamAcceleComboSet {
        PlayerParamAcceleCombo sonic;
        PlayerParamAcceleCombo superSonic1;
        PlayerParamAcceleCombo superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAcceleComboSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAcceleComboSet* pInstance);
        static void Clean(PlayerParamAcceleComboSet* pInstance);
    };

    struct PlayerParamLoopKick {
        float loopRadius;
        float loopTime;
        float loopSpeedCurveRatio;
        float loopEndStopTime;
        float loopEndSpeed;
        float kickSpeed;
        float failSafeTime;
        csl::math::Vector3 offset;
        csl::ut::VariableString cameraName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLoopKick* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLoopKick* pInstance);
        static void Clean(PlayerParamLoopKick* pInstance);
    };

    struct PlayerParamLoopKickSet {
        PlayerParamLoopKick sonic;
        PlayerParamLoopKick superSonic1;
        PlayerParamLoopKick superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLoopKickSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLoopKickSet* pInstance);
        static void Clean(PlayerParamLoopKickSet* pInstance);
    };

    struct PlayerParamCrasher {
        float startWait;
        float distanceRatios[5];
        float angles[5];
        float radii[5];
        float distanceMax;
        float zigzagBeginOneStepTime;
        float zigzagEndOneStepTime;
        float crasherSpeed;
        float failSafeTime;
        float cameraDistance;
        float cameraOffsetElevation;
        float cameraOffsetAzimuth;
        float cameraRoll;
        csl::math::Vector3 offset;
        csl::ut::VariableString cameraName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCrasher* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCrasher* pInstance);
        static void Clean(PlayerParamCrasher* pInstance);
    };

    struct PlayerParamCrasherSet {
        PlayerParamCrasher sonic;
        PlayerParamCrasher superSonic1;
        PlayerParamCrasher superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCrasherSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCrasherSet* pInstance);
        static void Clean(PlayerParamCrasherSet* pInstance);
    };

    struct PlayerParamSpinSlash {
        PlayerParamAttackCollider hit;
        PlayerParamAttackCollider hitLast;
        float chargeTime;
        float homingSpeed;
        float bounceTime;
        float radius;
        float slashTime;
        int8_t numSlashs;
        float angle;
        float lastHitTime;
        float slowRatio0;
        float slowRatio1;
        csl::math::Vector3 offset;
        csl::ut::VariableString cameraName;
        csl::ut::VariableString cameraNamePost;
        csl::ut::VariableString cameraShakeName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpinSlash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpinSlash* pInstance);
        static void Clean(PlayerParamSpinSlash* pInstance);
    };

    struct PlayerParamSpinSlashSet {
        PlayerParamSpinSlash sonic;
        PlayerParamSpinSlash superSonic1;
        PlayerParamSpinSlash superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpinSlashSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpinSlashSet* pInstance);
        static void Clean(PlayerParamSpinSlashSet* pInstance);
    };

    struct PlayerParamChargeAttack {
        PlayerParamAttackCollider hit;
        PlayerParamAttackCollider hitLast;
        float ignoreSwingingTime;
        float riseSlowRatio;
        float riseTime;
        float riseDistance;
        float preRiseDistance;
        float postRiseDistance;
        float lastVelocity;
        float spiralRadius;
        float spiralRadiusEaseInTime;
        float spiralRadiusEaseOutTime;
        float spiralAngularSpeed;
        float lastHitTime;
        csl::ut::VariableString cameraName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamChargeAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamChargeAttack* pInstance);
        static void Clean(PlayerParamChargeAttack* pInstance);
    };

    struct PlayerParamChargeAttackSet {
        PlayerParamChargeAttack sonic;
        PlayerParamChargeAttack superSonic1;
        PlayerParamChargeAttack superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamChargeAttackSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamChargeAttackSet* pInstance);
        static void Clean(PlayerParamChargeAttackSet* pInstance);
    };

    struct PlayerParamStompingAttack {
        PlayerParamAttackCollider hit;
        PlayerParamAttackCollider hitLast;
        float riseTime;
        float flipSpeed;
        float motionTime;
        float lastHitTime;
        float slowRatio;
        float minPressTime;
        float minPressTimeHeight;
        float maxPressTime;
        float maxPressTimeHeight;
        csl::math::Vector3 offset;
        csl::math::Vector3 offsetAsura;
        csl::ut::VariableString cameraName;
        csl::ut::VariableString cameraNameBarrage;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamStompingAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamStompingAttack* pInstance);
        static void Clean(PlayerParamStompingAttack* pInstance);
    };

    struct PlayerParamStompingAttackSet {
        PlayerParamStompingAttack sonic;
        PlayerParamStompingAttack superSonic1;
        PlayerParamStompingAttack superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamStompingAttackSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamStompingAttackSet* pInstance);
        static void Clean(PlayerParamStompingAttackSet* pInstance);
    };

    struct PlayerParamComboFinish {
        PlayerParamAttackCollider hit;
        float ignoreSwingingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboFinish* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboFinish* pInstance);
        static void Clean(PlayerParamComboFinish* pInstance);
    };

    struct PlayerParamComboFinishSet {
        PlayerParamComboFinish sonic;
        PlayerParamComboFinish superSonic1;
        PlayerParamComboFinish superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamComboFinishSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamComboFinishSet* pInstance);
        static void Clean(PlayerParamComboFinishSet* pInstance);
    };

    struct PlayerParamSonicBoom {
        float waitTime;
        float spanTime;
        float fallSpeed;
        float autoContinueTime;
        float speed;
        float maxSpeed;
        float accele;
        float slowRatio;
        csl::math::Vector3 offset;
        csl::ut::VariableString cameraName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSonicBoom* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSonicBoom* pInstance);
        static void Clean(PlayerParamSonicBoom* pInstance);
    };

    struct PlayerParamSonicBoomSet {
        PlayerParamSonicBoom sonic;
        PlayerParamSonicBoom superSonic1;
        PlayerParamSonicBoom superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSonicBoomSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSonicBoomSet* pInstance);
        static void Clean(PlayerParamSonicBoomSet* pInstance);
    };

    struct PlayerParamCrossSlash {
        float spanTime;
        float attackTime;
        float moveAngle;
        float stopTime;
        float slowRatio;
        float spinPhase;
        float spinRadius;
        float spinSpeed;
        float spawnDelayTime[2];
        csl::math::Vector3 spawnLocalTranslation[2];
        csl::math::Vector3 spawnLocalAngle[2];
        float speed;
        float maxSpeed;
        float accele;
        csl::math::Vector3 offset;
        csl::ut::VariableString cameraName;
        csl::ut::VariableString launchCameraShakeName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCrossSlash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCrossSlash* pInstance);
        static void Clean(PlayerParamCrossSlash* pInstance);
    };

    struct PlayerParamCrossSlashSet {
        PlayerParamCrossSlash sonic;
        PlayerParamCrossSlash superSonic1;
        PlayerParamCrossSlash superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCrossSlashSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCrossSlashSet* pInstance);
        static void Clean(PlayerParamCrossSlashSet* pInstance);
    };

    struct PlayerParamHomingShot {
        float appearTime;
        float appearPhaseTime;
        float spinRadius;
        float spinSpeed;
        float spinSpeedPostLaunch;
        float chargeTime;
        float spawnTime;
        float launchPreWaitTime;
        float spanTime;
        bool launchRandomize;
        float launchWaitTime;
        float beginAngleX;
        float tangent0;
        float tangent1;
        float spiralWaitTime;
        float spiralAngularSpeed;
        float spiralAngularSpeedMax;
        float spiralAngularSpeedAccele;
        uint8_t numShots;
        float speed;
        float maxSpeed;
        float accele;
        float whiteoutBeginTime;
        float whiteoutFadeOutTime;
        float whiteoutFadingTime;
        float whiteoutFadeInTime;
        csl::math::Vector3 offset;
        csl::ut::VariableString cameraName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamHomingShot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamHomingShot* pInstance);
        static void Clean(PlayerParamHomingShot* pInstance);
    };

    struct PlayerParamHomingShotSet {
        PlayerParamHomingShot sonic;
        PlayerParamHomingShot superSonic1;
        PlayerParamHomingShot superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamHomingShotSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamHomingShotSet* pInstance);
        static void Clean(PlayerParamHomingShotSet* pInstance);
    };

    struct PlayerParamSmash {
        PlayerParamAttackCollider hit1;
        PlayerParamAttackCollider hit2;
        csl::math::Vector3 offsets[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSmash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSmash* pInstance);
        static void Clean(PlayerParamSmash* pInstance);
    };

    struct PlayerParamSmashSet {
        PlayerParamSmash sonic;
        PlayerParamSmash superSonic1;
        PlayerParamSmash superSonic2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSmashSet* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSmashSet* pInstance);
        static void Clean(PlayerParamSmashSet* pInstance);
    };

    struct PlayerParamBehind {
        float moveTime;
        float moveTimeSS;
        float tangentScale;
        float waitTime;
        float cameraTurnRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBehind* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBehind* pInstance);
        static void Clean(PlayerParamBehind* pInstance);
    };

    struct CyloopTransparentLocusParameter {
        csl::ut::Color<float> m_color0;
        csl::ut::Color<float> m_color1;
        float m_luminance;
        csl::ut::Color<float> m_flashColor0;
        csl::ut::Color<float> m_flashColor1;
        float m_flashLuminance;
        float m_flashTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopTransparentLocusParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopTransparentLocusParameter* pInstance);
        static void Clean(CyloopTransparentLocusParameter* pInstance);
    };

    struct OpaqueLineUvCell {
        float scale;
        float speedX;
        float speedY;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OpaqueLineUvCell* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OpaqueLineUvCell* pInstance);
        static void Clean(OpaqueLineUvCell* pInstance);
    };

    struct CyloopOpaqueLocusParameter {
        csl::ut::Color<float> m_color;
        float m_alphaThreshold;
        OpaqueLineUvCell m_uvCells[2];
        float m_uvLineScaleX;
        float m_uvLineScaleY;
        csl::ut::Color<float> m_flashColor;
        float m_flashTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopOpaqueLocusParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopOpaqueLocusParameter* pInstance);
        static void Clean(CyloopOpaqueLocusParameter* pInstance);
    };

    struct CyloopCrossLineParameter {
        csl::ut::VariableString m_textureNamePattern;
        csl::ut::VariableString m_textureNameDist;
        csl::ut::Color<float> startColor;
        csl::ut::Color<float> endColor;
        float startColorLuminance;
        float endColorLuminance;
        csl::ut::Color<float> startColorFlash;
        csl::ut::Color<float> endColorFlash;
        float startColorLuminanceFlash;
        float endColorLuminanceFlash;
        float flashTime;
        float patternDepth;
        float patternScrollSpeed;
        float patternDarkness;
        float patternScale;
        float glitchResX;
        float glitchResY;
        float glitchOffset;
        float glitchMaxLength;
        float startGlitchScrollSpeed;
        float startGlitchChangeSpeed;
        float startGlitchShift;
        float startGlitchContrust;
        float endGlitchScrollSpeed;
        float endGlitchChangeSpeed;
        float endGlitchShift;
        float endGlitchContrust;
        float lineWidth;
        float lineDisplayWidth;
        float lineBlackEdgeWidth;
        float lineBlackEdgeIntensity;
        float lineBlackEdgeNormalFade;
        float distNoiseScale;
        float distLowNoiseScale;
        float distHighNoiseScale;
        float distNoiseRate;
        float distScrollSpeed;
        float distIntensity;
        float dissolve;
        float dissolveRate;
        float heightOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopCrossLineParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopCrossLineParameter* pInstance);
        static void Clean(CyloopCrossLineParameter* pInstance);
    };

    struct CyloopLocusParameter {
        int32_t m_numTransparentLines;
        CyloopTransparentLocusParameter m_transparentLines[3];
        int32_t m_numOpaqueLines;
        CyloopOpaqueLocusParameter m_opaqueLines[3];
        int32_t m_numCrossLines;
        CyloopCrossLineParameter m_crossline;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopLocusParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopLocusParameter* pInstance);
        static void Clean(CyloopLocusParameter* pInstance);
    };

    struct CyloopDropItemWeightParameter {
        uint32_t noneWeight;
        uint32_t ring10Weight;
        uint32_t powerSeedWeight;
        uint32_t guardSeedWeight;
        uint32_t sequenceItemWeight;
        uint32_t portalBitWeight;
        uint32_t skillPieceWeight;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopDropItemWeightParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopDropItemWeightParameter* pInstance);
        static void Clean(CyloopDropItemWeightParameter* pInstance);
    };

    struct CyloopDropItemParameter {
        CyloopDropItemWeightParameter weight;
        CyloopDropItemWeightParameter weight2;
        uint32_t numRings;
        uint32_t numRings2;
        uint32_t num10Rings;
        uint32_t numSkillPieces;
        uint32_t skillPieceExp;
        float rareDropCoolTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopDropItemParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopDropItemParameter* pInstance);
        static void Clean(CyloopDropItemParameter* pInstance);
    };

    struct CyloopShapeWindCountParameter {
        float damageRate;
        float stunRate;
        float staggerRate;
        float velocityRate;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopShapeWindCountParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopShapeWindCountParameter* pInstance);
        static void Clean(CyloopShapeWindCountParameter* pInstance);
    };

    struct CyloopShapeWindEffectParaemter {
        CyloopShapeWindCountParameter param[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopShapeWindEffectParaemter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopShapeWindEffectParaemter* pInstance);
        static void Clean(CyloopShapeWindEffectParaemter* pInstance);
    };

    struct CyloopShapeEffectParameter {
        CyloopShapeWindEffectParaemter wind;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopShapeEffectParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopShapeEffectParameter* pInstance);
        static void Clean(CyloopShapeEffectParameter* pInstance);
    };

    struct PlayerParamCyloop {
        CyloopLocusParameter locus;
        CyloopLocusParameter locusQuick;
        CyloopLocusParameter locusSuperSonic;
        CyloopLocusParameter locusSuperSonicQuick;
        csl::ut::Color<float> auraColor;
        CyloopDropItemParameter dropItem;
        float needSpeed;
        CyloopShapeEffectParameter shapeEffect;
        float lossQuickCyloopEnergy;
        float recoveryQuickCyloopEnergyByTime;
        float recoveryQuickCyloopEnergyByTimeInMinigame;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCyloop* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCyloop* pInstance);
        static void Clean(PlayerParamCyloop* pInstance);
    };

    struct PlayerParamSuperSonicShapeAttackData {
        enum class Part : int8_t {
            PunchR = 0,
            PunchL = 1,
            KickR = 2,
            KickL = 3,
        };

        csl::ut::VariableString name;
        Part part;
        csl::math::Vector3 begin;
        csl::math::Vector3 end;
        float scale;
        float roll;
        float moveTime;
        float fadeoutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSuperSonicShapeAttackData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSuperSonicShapeAttackData* pInstance);
        static void Clean(PlayerParamSuperSonicShapeAttackData* pInstance);
    };

    struct PlayerParamSuperSonic {
        int32_t numRings;
        float decreaseSec;
        float inletRadius;
        float moveSoundSpeed;
        PlayerParamSuperSonicShapeAttackData shapeEffects[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSuperSonic* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSuperSonic* pInstance);
        static void Clean(PlayerParamSuperSonic* pInstance);
    };

    struct PlayerParamSandSki {
        float blowDeceleForce;
        float blowDeceleForceOnGround;
        float blowGravityScale;
        float blowTransitTime;
        float blowDownTime;
        float pylonBlowUpSize;
        float pylonBlowSpeed;
        csl::ut::VariableString pylonHitStop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSandSki* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSandSki* pInstance);
        static void Clean(PlayerParamSandSki* pInstance);
    };

    struct PlayerParamSlingshot {
        enum class CameraShakeTiming : int8_t {
            StartCameraInterpolation = 0,
            EndCameraInterpolation = 1,
        };

        float timeScaleInMove;
        float hitStartRestTime;
        csl::math::Vector3 hitCameraOffset;
        float hitCameraTimeEaseIn;
        float hitCameraFovyAngle;
        float hitTimeScaleValue;
        float hitTimeScaleTimeEaseIn;
        float resetCameraEaseOutTime;
        float resetTimeScaleEaseOutTime;
        float timeScaleKeepTime;
        float shotEffOffset;
        float hitEffOffset;
        CameraShakeTiming cameraShakeTiming;
        csl::ut::VariableString cameraShakeName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSlingshot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSlingshot* pInstance);
        static void Clean(PlayerParamSlingshot* pInstance);
    };

    struct PlayerParamRunawayBee {
        float meanderCycle;
        float meanderAngle;
        float minSpeed;
        float maxSpeed;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamRunawayBee* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamRunawayBee* pInstance);
        static void Clean(PlayerParamRunawayBee* pInstance);
    };

    struct PlayerParamRunWithKodamaParam {
        int32_t numKodamas;
        float initialSpeed;
        float minSpeed;
        float maxSpeed;
        float jumpForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamRunWithKodamaParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamRunWithKodamaParam* pInstance);
        static void Clean(PlayerParamRunWithKodamaParam* pInstance);
    };

    struct PlayerParamRunWithKodama {
        int32_t maxKodamas;
        float gravitySize;
        PlayerParamRunWithKodamaParam params[8];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamRunWithKodama* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamRunWithKodama* pInstance);
        static void Clean(PlayerParamRunWithKodama* pInstance);
    };

    struct CommonPackageSonic {
        PlayerParamAcceleMode acceleMode;
        PlayerParamAcceleComboSet acceleComboSet;
        PlayerParamLoopKickSet loopKickSet;
        PlayerParamCrasherSet crasherSet;
        PlayerParamSpinSlashSet spinSlashSet;
        PlayerParamChargeAttackSet chargeAtackSet;
        PlayerParamStompingAttackSet stompingAttackSet;
        PlayerParamComboFinishSet comboFinishSet;
        PlayerParamSonicBoomSet sonicboomSet;
        PlayerParamCrossSlashSet crossSlashSet;
        PlayerParamHomingShotSet homingShotSet;
        PlayerParamSmashSet smashSet;
        PlayerParamBehind behind;
        PlayerParamCombo combo;
        PlayerParamCyloop c;
        PlayerParamSuperSonic supersonic;
        PlayerParamSandSki sandski;
        PlayerParamSlingshot slingshot;
        PlayerParamRunawayBee runawayBee;
        PlayerParamRunWithKodama runWithKodama;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CommonPackageSonic* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CommonPackageSonic* pInstance);
        static void Clean(CommonPackageSonic* pInstance);
    };

    struct KnucklesParamCyKnuckle {
        float findRadius;
        uint32_t numNotifies;
        float activeRadius;
        float findDistanceStomp;
        float findRadiusStomp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamCyKnuckle* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamCyKnuckle* pInstance);
        static void Clean(KnucklesParamCyKnuckle* pInstance);
    };

    struct KnucklesParamCyKnuckleAppearGimmick {
        float appearWaitTime;
        uint32_t ringWeight;
        uint32_t superRingWeight;
        uint32_t skillPieceWeight;
        uint32_t numRings;
        uint32_t numSuperRings;
        uint32_t numSkillPieces;
        uint32_t skillPieceExp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamCyKnuckleAppearGimmick* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamCyKnuckleAppearGimmick* pInstance);
        static void Clean(KnucklesParamCyKnuckleAppearGimmick* pInstance);
    };

    struct KnucklesParamCyKnuckleDig {
        float diveScale;
        float speed;
        float stompingAttackScale;
        bool alsoStomping;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamCyKnuckleDig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamCyKnuckleDig* pInstance);
        static void Clean(KnucklesParamCyKnuckleDig* pInstance);
    };

    struct KnucklesParamCyKnucklePopupItem {
        float appearWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamCyKnucklePopupItem* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamCyKnucklePopupItem* pInstance);
        static void Clean(KnucklesParamCyKnucklePopupItem* pInstance);
    };

    struct KnucklesParamCyKnuckleWarp {
        float appearWaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamCyKnuckleWarp* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamCyKnuckleWarp* pInstance);
        static void Clean(KnucklesParamCyKnuckleWarp* pInstance);
    };

    struct KnucklesParamDrillBoost {
        float prepareTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamDrillBoost* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamDrillBoost* pInstance);
        static void Clean(KnucklesParamDrillBoost* pInstance);
    };

    struct KnucklesParamGlidingCamera {
        float azimuthSensitivity;
        float elevationOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamGlidingCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamGlidingCamera* pInstance);
        static void Clean(KnucklesParamGlidingCamera* pInstance);
    };

    struct KnucklesParamGliding {
        float minSpeed;
        float minSpeedRingMax;
        float fallSpeed;
        float fallAccel;
        float maxSteerSpeed;
        float rollSpeed;
        float neutralRollSpeed;
        float yawSpeed;
        float maxRollAngle;
        float height;
        float startHeight;
        bool restartable;
        KnucklesParamGlidingCamera camera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamGliding* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamGliding* pInstance);
        static void Clean(KnucklesParamGliding* pInstance);
    };

    struct KnucklesParamMaximumHeatKnuckle {
        float lockonLevelUpSpanTime[5];
        float lockonSearchDistance;
        float lockonSearchDistanceFar;
        float speed;
        float followSpeed;
        float followTime;
        csl::ut::VariableString hitStopObject;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParamMaximumHeatKnuckle* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParamMaximumHeatKnuckle* pInstance);
        static void Clean(KnucklesParamMaximumHeatKnuckle* pInstance);
    };

    struct ModePackageKnuckles {
        KnucklesParamGliding gliding;
        KnucklesParamCyKnuckle cyknuckle;
        KnucklesParamCyKnuckleDig cyknuckleDig;
        KnucklesParamCyKnuckleWarp cyknuckleWarp;
        KnucklesParamCyKnucklePopupItem cyknucklePopupItem;
        KnucklesParamCyKnuckleAppearGimmick cyknuckleAppearGimmick;
        KnucklesParamMaximumHeatKnuckle maximumHeatKnuckle;
        KnucklesParamDrillBoost drillBoost;
        PlayerParamSpinBoost spinBoost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ModePackageKnuckles* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ModePackageKnuckles* pInstance);
        static void Clean(ModePackageKnuckles* pInstance);
    };

    struct KnucklesParameters {
        CommonPackageKnuckles common;
        ModePackageKnuckles forwardView;
        WaterModePackage water;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(KnucklesParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(KnucklesParameters* pInstance);
        static void Clean(KnucklesParameters* pInstance);
    };

    struct PlayerParamCommon {
        enum class SupportedPlane : int8_t {
            Flat = 0,
            Slope = 1,
            Wall = 2,
        };

        float movableMaxSlope;
        float activeLandingSlope;
        float activeLandingSlopeInBoost;
        float landingMaxSlope;
        float slidingMaxSlope;
        float wallAngleMaxSlope;
        SupportedPlane onStand;
        SupportedPlane onRunInAir;
        SupportedPlane onRun;
        bool moveHolding;
        bool wallSlideSlowInBoost;
        bool attrWallOnGround;
        float priorityInputTime;
        int32_t capacityRings;
        int32_t capacityRingsLvMax;
        float collectRingRange;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCommon* pInstance);
        static void Clean(PlayerParamCommon* pInstance);
    };

    struct PlayerParamRotation {
        float baseRotateForce;
        float baseRotateForce2;
        float baseRotateForceSpeed;
        float minRotateForce;
        float maxRotateForce;
        bool angleRotateForceDecayEnabled;
        float frontRotateRatio;
        float rotationForceDecaySpeed;
        float rotationForceDecayRate;
        float rotationForceDecayMax;
        float autorunRotateForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamRotation* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamRotation* pInstance);
        static void Clean(PlayerParamRotation* pInstance);
    };

    struct PlayerParamRunning {
        float walkSpeed;
        float sneakingSpeed;
        float animSpeedSneak;
        float animSpeedWalk;
        float animSpeedRun;
        float animSpeedBoost;
        float animLRBlendSampleTime;
        float animLRBlendAngleMin;
        float animLRBlendAngleMax;
        float animLRBlendSpeed;
        float animLRBlendSpeedToCenter;
        float minChangeWalkTime;
        float fallAnimationAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamRunning* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamRunning* pInstance);
        static void Clean(PlayerParamRunning* pInstance);
    };

    struct PlayerParamBalanceData {
        float rotateSpeedMinFB;
        float rotateSpeedMaxFB;
        float rotateSpeedMinLR;
        float rotateSpeedMaxLR;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBalanceData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBalanceData* pInstance);
        static void Clean(PlayerParamBalanceData* pInstance);
    };

    struct PlayerParamBalance {
        PlayerParamBalanceData standard;
        PlayerParamBalanceData loop;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBalance* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBalance* pInstance);
        static void Clean(PlayerParamBalance* pInstance);
    };

    struct PlayerParamBrake {
        float initialSpeedRatio;
        float maxSpeed;
        float forceLand;
        float forceAir;
        float endSpeed;
        float stopTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBrake* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBrake* pInstance);
        static void Clean(PlayerParamBrake* pInstance);
    };

    struct PlayerParamTurn {
        float thresholdSpeed;
        float thresholdAngle;
        float turnAfterSpeed;
        bool stopEdge;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamTurn* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamTurn* pInstance);
        static void Clean(PlayerParamTurn* pInstance);
    };

    struct PlayerParamFall {
        float thresholdVertSpeed;
        float tolerateJumpTime;
        float fallEndDelayTime;
        float fallEndFadeTime;
        float acceleForce;
        float deceleForce;
        float overSpeedDeceleForce;
        float rotationForce;
        float rotationForceDecaySpeed;
        float rotationForceDecayRate;
        float rotationForceDecayMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamFall* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamFall* pInstance);
        static void Clean(PlayerParamFall* pInstance);
    };

    struct PlayerParamDamageCommon {
        float invincibleTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageCommon* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageCommon* pInstance);
        static void Clean(PlayerParamDamageCommon* pInstance);
    };

    struct PlayerParamDamageNormal {
        float initialHorzSpeed;
        float initialVertSpeed;
        float deceleForce;
        float transitFallTime;
        float gravityScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageNormal* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageNormal* pInstance);
        static void Clean(PlayerParamDamageNormal* pInstance);
    };

    struct PlayerParamDamageTurnBack {
        float fixedTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageTurnBack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageTurnBack* pInstance);
        static void Clean(PlayerParamDamageTurnBack* pInstance);
    };

    struct PlayerParamDamageBlowOff {
        float initialHorzSpeed;
        float initialVertSpeed;
        float deceleForceInAir;
        float deceleForceOnGround;
        float gravityScale;
        float downTime;
        float transitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageBlowOff* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageBlowOff* pInstance);
        static void Clean(PlayerParamDamageBlowOff* pInstance);
    };

    struct PlayerParamDamageGuarded {
        float vertSpeed;
        float horzSpeed;
        float deceleForce;
        float transitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageGuarded* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageGuarded* pInstance);
        static void Clean(PlayerParamDamageGuarded* pInstance);
    };

    struct PlayerParamDamageRunning {
        float actionTime;
        float minSpeed;
        float lossSpeed;
        float lossTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageRunning* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageRunning* pInstance);
        static void Clean(PlayerParamDamageRunning* pInstance);
    };

    struct PlayerParamDamageQuake {
        float actionTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageQuake* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageQuake* pInstance);
        static void Clean(PlayerParamDamageQuake* pInstance);
    };

    struct PlayerParamDamageLava {
        csl::math::Vector3 jumpVelocity;
        float gravitySize;
        float invincibleTime;
        float noActionTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamageLava* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamageLava* pInstance);
        static void Clean(PlayerParamDamageLava* pInstance);
    };

    struct PlayerParamDamage {
        PlayerParamDamageCommon common;
        PlayerParamDamageNormal normal;
        PlayerParamDamageTurnBack turnBack;
        PlayerParamDamageBlowOff blowOff;
        PlayerParamDamageGuarded guarded;
        PlayerParamDamageGuarded guardedSS;
        PlayerParamDamageRunning running;
        PlayerParamDamageQuake quake;
        PlayerParamDamageLava lava;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDamage* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDamage* pInstance);
        static void Clean(PlayerParamDamage* pInstance);
    };

    struct PlayerParamDeadNormal {
        float invincibleTime;
        float initialHorzSpeed;
        float initialVertSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDeadNormal* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDeadNormal* pInstance);
        static void Clean(PlayerParamDeadNormal* pInstance);
    };

    struct PlayerParamDead {
        PlayerParamDeadNormal normal;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDead* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDead* pInstance);
        static void Clean(PlayerParamDead* pInstance);
    };

    struct PlayerParamSliding {
        float minSpeed;
        float endSpeed;
        float deceleJerk;
        float deceleJerkContinue;
        float deceleForceMax;
        float baseRotateForce;
        float baseRotateForceSpeed;
        float maxRotateForce;
        float frontRotateRatio;
        float rotationForceAutoRun;
        float movableMaxSlope;
        float gravitySize;
        float minContinueTime;
        float maxAutoRunTime;
        float endSpeedAutoRun;
        float loopKickTransitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSliding* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSliding* pInstance);
        static void Clean(PlayerParamSliding* pInstance);
    };

    struct PlayerParamStomping {
        float initialSpeed;
        float initialAccele;
        float maxAccele;
        float jerk;
        float maxFallSpeed;
        float angle;
        float landingCancelTime;
        float boundStompingCollisionScale;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamStomping* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamStomping* pInstance);
        static void Clean(PlayerParamStomping* pInstance);
    };

    struct PlayerParamGrind {
        float maxSpeed;
        float maxBoostSpeed;
        float acceleForce;
        float deceleForce;
        float limitSpeedMin;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamGrind* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamGrind* pInstance);
        static void Clean(PlayerParamGrind* pInstance);
    };

    struct PlayerParamFallSlope {
        float initialSpeed;
        float maxSpeed;
        float brakeAngle;
        float highBrakeAngle;
        float brakeForce;
        float brakeForceHigh;
        float gravitySize;
        float gravitySizeAir;
        float endSpeedFront;
        float endSpeedBack;
        float reverseFallTime;
        float fallToSlipTime;
        float slipIdlingTime;
        float minSlipTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamFallSlope* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamFallSlope* pInstance);
        static void Clean(PlayerParamFallSlope* pInstance);
    };

    struct PlayerParamFallFlip {
        float thresholdSpeed;
        float maxSpeed;
        float flipAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamFallFlip* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamFallFlip* pInstance);
        static void Clean(PlayerParamFallFlip* pInstance);
    };

    struct PlayerParamTumble {
        bool enabled;
        float sideSpinAngle;
        float initialVertSpeed;
        float gravitySize;
        float gravitySize2;
        float deceleForceInAir;
        float minSpeedInAir;
        float rotateEaseTimeLeftRight;
        float rotateEaseTimeFrontBack;
        float rotateSpeedMinLeftRight;
        float rotateSpeedMaxLeftRight;
        float rotateSpeedMinFrontBack;
        float rotateSpeedMaxFrontBack;
        float angleLeftRightStagger;
        float angleLeftRightRoll;
        float angleFrontBackRoll;
        float angleBigRoll;
        float inRunTime;
        float inAirTime;
        float rollSpeedFront;
        float bigRollVelocityRatio;
        float dropDashHoldTime;
        float airBrakeVertSpeed;
        float airBrakeForce;
        float airTrickHeight;
        float airTrickTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamTumble* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamTumble* pInstance);
        static void Clean(PlayerParamTumble* pInstance);
    };

    struct PlayerParamSpinAttack {
        float jumpForce;
        float jumpAddForce;
        float addTime;
        float acceleForce;
        float deceleForce;
        float brakeForce;
        float limitSpeedMin;
        float limitSpeedMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpinAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpinAttack* pInstance);
        static void Clean(PlayerParamSpinAttack* pInstance);
    };

    struct PlayerParamHomingAttackData {
        float speed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamHomingAttackData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamHomingAttackData* pInstance);
        static void Clean(PlayerParamHomingAttackData* pInstance);
    };

    struct PlayerParamHomingBounceData {
        float bounceVertSpeed;
        float bounceHorzSpeed;
        float bounceAcceleForce;
        float bounceDeceleForce;
        float bounceAngleWidth;
        float bounceTime;
        float attackDownTime;
        float attackDownTimeForStomp;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamHomingBounceData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamHomingBounceData* pInstance);
        static void Clean(PlayerParamHomingBounceData* pInstance);
    };

    struct PlayerParamHomingAttack {
        PlayerParamHomingAttackData sonic;
        PlayerParamHomingAttackData supersonic;
        PlayerParamHomingBounceData sonicBounce;
        PlayerParamHomingBounceData sonicBounceWeak;
        PlayerParamHomingBounceData sonicBounceStorm;
        PlayerParamHomingBounceData sonicBounceStormSwirl;
        PlayerParamHomingBounceData supersonicBounce;
        float cameraEaseInTime;
        float cameraEaseOutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamHomingAttack* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamHomingAttack* pInstance);
        static void Clean(PlayerParamHomingAttack* pInstance);
    };

    struct PlayerParamHitEnemy {
        float bounceVertSpeed;
        float bounceHorzSpeed;
        float attackDownTime;
        float enableHomingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamHitEnemy* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamHitEnemy* pInstance);
        static void Clean(PlayerParamHitEnemy* pInstance);
    };

    struct SpeedParam {
        float maxVertSpeed;
        float acceleVertForce;
        float maxHorzSpeed;
        float acceleHorzForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SpeedParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SpeedParam* pInstance);
        static void Clean(SpeedParam* pInstance);
    };

    struct PlayerParamDiving {
        SpeedParam normal;
        SpeedParam fast;
        SpeedParam damaged;
        SpeedParam ringdash;
        float startHeight;
        float startSpeed;
        float deceleVertForce;
        float deceleHorzForce;
        float deceleNeutralForce;
        float damageTime;
        float ringdashTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDiving* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDiving* pInstance);
        static void Clean(PlayerParamDiving* pInstance);
    };

    struct PlayerParamFan {
        float damperV;
        float damperH;
        float accelRate;
        float moveForceFV;
        float moveForceSV;
        float jumpCheckSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamFan* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamFan* pInstance);
        static void Clean(PlayerParamFan* pInstance);
    };

    struct PlayerParamBackflip {
        float jumpSpeed;
        float backSpeed;
        float downAccel;
        float damperV;
        float damperH;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBackflip* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBackflip* pInstance);
        static void Clean(PlayerParamBackflip* pInstance);
    };

    struct PlayerParamSlowMove {
        float startSpeed;
        float maxSpeed;
        float accel;
        float brake;
        float damageSpeed;
        float damageBrake;
        float steeringSpeed;
        float endSteeringSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSlowMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSlowMove* pInstance);
        static void Clean(PlayerParamSlowMove* pInstance);
    };

    struct PlayerParamSpin {
        float startSlopeAngle;
        float endSlopeAngle;
        float startSpeed;
        float endSpeed;
        float stickAngle;
        float brake;
        float forceBrake;
        float maxSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpin* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpin* pInstance);
        static void Clean(PlayerParamSpin* pInstance);
    };

    struct PlayerParamWallMove {
        float maxSpeed;
        float walkSpeed;
        float walkSpeedMax;
        float runSpeed;
        float runSpeedMax;
        float walkSpeedOnMesh;
        float walkSpeedOnMeshMax;
        float runSpeedOnMesh;
        float runSpeedOnMeshMax;
        float minAccessSpeed;
        float stickSpeed;
        float gravity;
        float accel;
        float brake;
        float stopBrake;
        float fallSpeed;
        float steeringSpeed1;
        float steeringSpeed2;
        float startSteeringSpeed;
        float endSteeringSpeed;
        float startTime;
        float useEnergySpeedBase;
        float useEnergySpeedBaseOnMesh;
        float useEnergySpeedVal;
        float useEnergySpeedValOnMesh;
        float useEnergyAngle;
        float useEnergyAngleOnMesh;
        float brakeStartEnergy;
        float brakeStartEnergyOnMesh;
        float homingSearchDistanceNear;
        float homingSearchDistanceFar;
        float wallBumpHeightUpper;
        float wallBumpHeightUnder;
        float recoveryCheckTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamWallMove* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamWallMove* pInstance);
        static void Clean(PlayerParamWallMove* pInstance);
    };

    struct PlayerParamWallJump {
        float gravitySize;
        float minTime;
        float maxTime;
        float stopTime;
        float maxDownSpeed;
        float fallGroundDistance;
        float frontForce;
        float upForce;
        float impulseTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamWallJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamWallJump* pInstance);
        static void Clean(PlayerParamWallJump* pInstance);
    };

    struct PlayerParamClimbing {
        float stepSpeedFront;
        float stepSpeedFrontDash;
        float stepSpeedSide;
        float stepSpeedSideDash;
        float stepSpeedBack;
        float stepDashRate;
        float maxAnimSpeed;
        float exhaustAngle;
        float exhaustAngleOnMesh;
        float exhaustBase;
        float exhaustBaseOnMesh;
        float exhaustRate;
        float exhaustRateOnMesh;
        float useGrabGaugeSpeed;
        float useGrabGaugeSpeedOnMesh;
        float useGrabGaugeTurbo;
        float useGrabGaugeTurboOnMesh;
        float homingSearchDistanceNear;
        float homingSearchDistanceFar;
        float resetAngle;
        float recoveryCheckTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamClimbing* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamClimbing* pInstance);
        static void Clean(PlayerParamClimbing* pInstance);
    };

    struct PlayerParamSlideDown {
        float time;
        float speed;
        float speedOnMesh;
        float accel;
        float brake;
        float brakeOnMesh;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSlideDown* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSlideDown* pInstance);
        static void Clean(PlayerParamSlideDown* pInstance);
    };

    struct PlayerParamAutorun {
        float initialSideSpeed;
        float acceleSideForce;
        float deceleSideForce;
        float maxSideSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAutorun* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAutorun* pInstance);
        static void Clean(PlayerParamAutorun* pInstance);
    };

    struct PlayerParamSideStep {
        float speed;
        float brakeForce;
        float motionSpeedRatio;
        float stepSpeed;
        float maxStepDistance;
        float minStepDistance;
        float maxStepSpeed;
        float minStepSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSideStep* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSideStep* pInstance);
        static void Clean(PlayerParamSideStep* pInstance);
    };

    struct PlayerParamSideStep2 {
        float speed;
        float brakeForce;
        float motionSpeedRatio;
        float stepSpeed;
        float maxStepDistance;
        float minStepDistance;
        float maxStepSpeed;
        float minStepSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSideStep2* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSideStep2* pInstance);
        static void Clean(PlayerParamSideStep2* pInstance);
    };

    struct PlayerParamQuickStep {
        float needSpeed;
        float acceleForce;
        float acceleSideForce;
        float stepInitialSpeed;
        float avoidForce;
        float justBoostForce;
        float justBoostMax;
        float justBoostTime;
        float justBoostBrake;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamQuickStep* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamQuickStep* pInstance);
        static void Clean(PlayerParamQuickStep* pInstance);
    };

    struct PlayerParamParry {
        float minRecieveTime;
        float maxRecieveTime;
        float frozenTime;
        float justEffectEasein;
        float justEffectEaseout;
        float justEffectTime;
        float justEffectEasein2;
        float justEffectEaseout2;
        float justEffectTime2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamParry* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamParry* pInstance);
        static void Clean(PlayerParamParry* pInstance);
    };

    struct PlayerParamAvoidData {
        float speed;
        float damper;
        float parryTime;
        float invincibleTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAvoidData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAvoidData* pInstance);
        static void Clean(PlayerParamAvoidData* pInstance);
    };

    struct PlayerParamAvoid {
        float time;
        float fixedTime;
        float reentryInputPriorityTime;
        float reentryTime;
        float frontAngle;
        float backAngle;
        float addFallSpeed;
        PlayerParamAvoidData data[7];
        float baseDistance;
        float limitAngle;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAvoid* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAvoid* pInstance);
        static void Clean(PlayerParamAvoid* pInstance);
    };

    struct ModePackage {
        PlayerParamCommon common;
        PlayerParamSpeed speed;
        PlayerParamRotation rotation;
        PlayerParamRunning running;
        PlayerParamBalance balance;
        PlayerParamBrake brake;
        PlayerParamTurn turn;
        PlayerParamJump jump;
        PlayerParamJumpSpeed jumpSpeed;
        PlayerParamDoubleJump doubleJump;
        PlayerParamFall fall;
        PlayerParamDamage damage;
        PlayerParamDead dead;
        PlayerParamSliding sliding;
        PlayerParamStomping stomping;
        PlayerParamGrind grind;
        PlayerParamFallSlope fallSlope;
        PlayerParamFallFlip fallFlip;
        PlayerParamTumble tumble;
        PlayerParamSpinAttack spinAttack;
        PlayerParamHomingAttack homingAttack;
        PlayerParamHitEnemy hitEnemy;
        PlayerParamDiving diving;
        PlayerParamFan fan;
        PlayerParamBackflip backflip;
        PlayerParamSlowMove slowmove;
        PlayerParamSpin spin;
        PlayerParamWallMove wallmove;
        PlayerParamWallJump walljump;
        PlayerParamClimbing climbing;
        PlayerParamSlideDown slidedown;
        PlayerParamBoost boost;
        PlayerParamAirBoost airboost;
        PlayerParamAutorun autorun;
        PlayerParamSideStep sidestep;
        PlayerParamSideStep2 sidestep2;
        PlayerParamQuickStep quickstep;
        PlayerParamParry parry;
        PlayerParamAvoid avoid;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ModePackage* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ModePackage* pInstance);
        static void Clean(ModePackage* pInstance);
    };

    struct PlayerParamStorm {
        float damperV;
        float damperH;
        float brake;
        float accelRate;
        float moveForce;
        float maxSpeedH;
        float maxSpeedV;
        float rotateSpeed;
        float rotateAngularSpeed;
        float minDrawSpeed;
        float maxDrawSpeed;
        float minDrawSpeedDistance;
        float maxDrawSpeedDistance;
        float damageTime;
        float damageNoBrakeTime;
        float forceHomingReaction;
        float forceHomingReaction2;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamStorm* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamStorm* pInstance);
        static void Clean(PlayerParamStorm* pInstance);
    };

    struct PlayerParamCloudJump {
        float acceleForce;
        float deceleForce;
        float overSpeedDeceleForce;
        float rotationForce;
        float rotationForceDecaySpeed;
        float rotationForceDecayRate;
        float rotationForceDecayMax;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCloudJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCloudJump* pInstance);
        static void Clean(PlayerParamCloudJump* pInstance);
    };

    struct PlayerParamAquaBall {
        float fallAccel;
        float damper;
        float jumpSpeed;
        float stompingSpeed;
        float boundSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAquaBall* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAquaBall* pInstance);
        static void Clean(PlayerParamAquaBall* pInstance);
    };

    struct PlayerParamSlider {
        float frontAccel;
        float frontBrake;
        float sideBrake;
        float damageBrake;
        float defaultRotateSpeed;
        float rotateSpeed;
        float rotateSpeedAir;
        float gravity;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSlider* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSlider* pInstance);
        static void Clean(PlayerParamSlider* pInstance);
    };

    struct PlayerParamAirTrick {
        uint32_t amount;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAirTrick* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAirTrick* pInstance);
        static void Clean(PlayerParamAirTrick* pInstance);
    };

    struct PlayerParamDrift {
        float startAngle;
        float endSpeed;
        float minSpeed;
        float minSpeedMax;
        float maxSpeed;
        float maxSpeedMax;
        float minBoostSpeed;
        float minBoostSpeedMax;
        float maxBoostSpeed;
        float maxBoostSpeedMax;
        float accel;
        float brake;
        float maxSteerAngle;
        float steerAccel;
        float maxSteerSpeed;
        float neutralSteerAccel;
        float maxNeutralSteerSpeed;
        float maxRotateSpeed;
        float recoverTime;
        float maxChargeTime;
        float minDashSpeed;
        float maxDashSpeed;
        float minDashJumpSpeed;
        float maxDashJumpSpeed;
        float jumpSpeed;
        float checkFallTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDrift* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDrift* pInstance);
        static void Clean(PlayerParamDrift* pInstance);
    };

    struct PlayerParamDriftAir {
        float startAngle;
        float endSpeed;
        float minSpeed;
        float maxSpeed;
        float accel;
        float brake;
        float maxSteerAngle;
        float steerAccel;
        float maxSteerSpeed;
        float neutralSteerAccel;
        float maxNeutralSteerSpeed;
        float maxRotateSpeed;
        float recoverTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDriftAir* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDriftAir* pInstance);
        static void Clean(PlayerParamDriftAir* pInstance);
    };

    struct PlayerParamDriftDash {
        float maxSpeed;
        float brake;
        float steeringSpeed1;
        float steeringSpeed2;
        float startSteeringSpeed;
        float endSteeringSpeed;
        float outOfControlSpeed;
        float checkDashSpeed;
        float checkDashTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDriftDash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDriftDash* pInstance);
        static void Clean(PlayerParamDriftDash* pInstance);
    };

    struct PlayerParamBoarding {
        float maxSpeed;
        float minSpeed;
        float damageSpeed;
        float accel;
        float damageBrake;
        float damageBrakeTime;
        float damageMotionTime;
        float damageInvicibleTime;
        float damper;
        float airDamperV;
        float airDamperH;
        float gravity;
        float airJumpSpeed;
        float groundJumpSpeed;
        float airAccel;
        float maxAirAddSpeed;
        float downForceRate;
        float steeringSpeed1;
        float steeringSpeed2;
        float steeringSpeed3;
        float startSteeringSpeed;
        float endSteeringSpeed;
        float startSpeed;
        float startSlope;
        float staticStartSlope;
        float finishSlope;
        float finishTime;
        float bigLandTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBoarding* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBoarding* pInstance);
        static void Clean(PlayerParamBoarding* pInstance);
    };

    struct PlayerParamDropDash {
        float maxChargeTime;
        float minDashSpeed;
        float minDashSpeedMax;
        float maxDashSpeed;
        float maxDashSpeedMax;
        float tumbleDashSpeed;
        float maxSpeed;
        float brake;
        float steeringSpeed1;
        float steeringSpeed2;
        float startSteeringSpeed;
        float endSteeringSpeed;
        float outOfControlSpeed;
        float checkDashSpeed;
        float checkDashTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamDropDash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamDropDash* pInstance);
        static void Clean(PlayerParamDropDash* pInstance);
    };

    struct PlayerParamBounceJump {
        float startSpeed;
        float jumpRate1;
        float jumpRate2;
        float jumpRate3;
        float inoperableTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBounceJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBounceJump* pInstance);
        static void Clean(PlayerParamBounceJump* pInstance);
    };

    struct PlayerParamLightDash {
        float dashSpeed;
        float dashSpeedMax;
        float speed;
        float speedMax;
        float accel;
        float brake;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLightDash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLightDash* pInstance);
        static void Clean(PlayerParamLightDash* pInstance);
    };

    struct PlayerParamSpinDash {
        float time;
        float minSpeed;
        float deceleForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamSpinDash* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamSpinDash* pInstance);
        static void Clean(PlayerParamSpinDash* pInstance);
    };

    struct PlayerParamFly {
        float maxSpeed;
        float maxDashSpeed;
        float accel;
        float dashAccel;
        float brake;
        float minRotateSpeed;
        float maxRotateSpeed;
        float blowOffTime;
        float blowOffAngle;
        float turnBrake;
        float turnRotateSpeed;
        float quickTurnThresholdAngle;
        float quickTurnStartSpeed;
        float quickTurnBrake;
        float quickTurnRotateS;
        float comboTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamFly* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamFly* pInstance);
        static void Clean(PlayerParamFly* pInstance);
    };

    struct PlayerParamLimitedFly {
        float maxSpeed1D;
        float accel1D;
        float brake1D;
        float fixAccel1D;
        float fixSpeed1D;
        float fixAccelQuick;
        float fixSpeedQuick;
        float rotateSpeed1D;
        float maxSpeed2D;
        float accel2D;
        float brake2D;
        float fixSpeed2D;
        float rotateSpeed2D;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLimitedFly* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLimitedFly* pInstance);
        static void Clean(PlayerParamLimitedFly* pInstance);
    };

    struct PlayerParamCyberMode {
        float lowGravityScale;
        float timeScale;
        float accelForce;
        float jerk;
        float maxSpeedThreshold;
        float recoveryRate;
        float animalMinSpeed;
        float animalMaxSpeed;
        float animalInitialSpeed;
        float animalMinTurnSpeed;
        float animalJumpForce;
        float animalGravitySize;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamCyberMode* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamCyberMode* pInstance);
        static void Clean(PlayerParamCyberMode* pInstance);
    };

    struct ModePackageSonic {
        PlayerParamStorm storm;
        PlayerParamCloudJump cloudJump;
        PlayerParamAquaBall aquaball;
        PlayerParamSlider slider;
        PlayerParamAirTrick airtrick;
        PlayerParamDrift drift;
        PlayerParamDriftAir driftair;
        PlayerParamDriftDash driftDash;
        PlayerParamBoarding boarding;
        PlayerParamDropDash dropDash;
        PlayerParamBounceJump bounceJump;
        PlayerParamLightDash lightDash;
        PlayerParamSpinDash spindash;
        PlayerParamSpinBoost spinBoost;
        PlayerParamFly fly;
        PlayerParamLimitedFly limitedfly;
        PlayerParamCyberMode cyberMode;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ModePackageSonic* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ModePackageSonic* pInstance);
        static void Clean(ModePackageSonic* pInstance);
    };

    struct TailsParamFlyRise {
        float speedYStart;
        float speedYMax;
        float accY;
        float height;
        int32_t riseNum;
        float heightRatio[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamFlyRise* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamFlyRise* pInstance);
        static void Clean(TailsParamFlyRise* pInstance);
    };

    struct TailsParamFlyCruise {
        float decY;
        float duration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamFlyCruise* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamFlyCruise* pInstance);
        static void Clean(TailsParamFlyCruise* pInstance);
    };

    struct TailsParamFlyDescend {
        float speedYMax;
        float accY;
        float moveMaxSpeed;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamFlyDescend* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamFlyDescend* pInstance);
        static void Clean(TailsParamFlyDescend* pInstance);
    };

    struct TailsParamFlyCamera {
        float azimuthSensitivity;
        float elevationOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamFlyCamera* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamFlyCamera* pInstance);
        static void Clean(TailsParamFlyCamera* pInstance);
    };

    struct TailsParamFly {
        TailsParamFlyRise rise;
        TailsParamFlyCruise cruise;
        TailsParamFlyDescend descend;
        float maxSpeed;
        float acc;
        float dec;
        float maxSteerSpeed;
        float rollSpeed;
        float neutralRollSpeed;
        float yawSpeed;
        float maxRollAngle;
        float height;
        float heightLimit;
        TailsParamFlyCamera camera;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamFly* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamFly* pInstance);
        static void Clean(TailsParamFly* pInstance);
    };

    struct TailsParamSpannerShot {
        float archSpeed;
        float archRange;
        float archHeight;
        float archModelScale;
        float archColliderRadius;
        float floatSpeed;
        float floatRange;
        float floatAirYOffset;
        float floatDuration;
        float floatModelScale;
        float floatColliderRadius;
        float addMoveSpeedRatio;
        float modelExtendDuration;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamSpannerShot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamSpannerShot* pInstance);
        static void Clean(TailsParamSpannerShot* pInstance);
    };

    struct TailsParamSpanner {
        TailsParamSpannerShot shot;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamSpanner* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamSpanner* pInstance);
        static void Clean(TailsParamSpanner* pInstance);
    };

    struct TailsParamCyBlasterShot {
        float speed;
        float range;
        float colliderRadius;
        float readyDuration;
        float readyRotateSpeed;
        float readyFallSpeed;
        float addMoveSpeedRatio;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamCyBlasterShot* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamCyBlasterShot* pInstance);
        static void Clean(TailsParamCyBlasterShot* pInstance);
    };

    struct TailsParamCyBlasterLiftRun {
        float initial;
        float min;
        float max;
        float minTurn;
        float acceleForce;
        float rotateForce;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamCyBlasterLiftRun* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamCyBlasterLiftRun* pInstance);
        static void Clean(TailsParamCyBlasterLiftRun* pInstance);
    };

    struct TailsParamCyBlasterLiftAir {
        float jumpForce;
        float gravitySize;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamCyBlasterLiftAir* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamCyBlasterLiftAir* pInstance);
        static void Clean(TailsParamCyBlasterLiftAir* pInstance);
    };

    struct TailsParamCyBlasterLift {
        TailsParamCyBlasterLiftRun run;
        TailsParamCyBlasterLiftAir air;
        float liftUpTime;
        csl::math::Vector3 liftOffset;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamCyBlasterLift* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamCyBlasterLift* pInstance);
        static void Clean(TailsParamCyBlasterLift* pInstance);
    };

    struct TailsParamCyBlaster {
        TailsParamCyBlasterShot shot;
        TailsParamCyBlasterLift lift;
        CyloopDropItemParameter dropItem;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParamCyBlaster* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParamCyBlaster* pInstance);
        static void Clean(TailsParamCyBlaster* pInstance);
    };

    struct ModePackageTails {
        TailsParamFly tailsFly;
        TailsParamSpanner spanner;
        TailsParamCyBlaster cyBlaster;
        PlayerParamSpinBoost spinBoost;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ModePackageTails* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ModePackageTails* pInstance);
        static void Clean(ModePackageTails* pInstance);
    };

    struct PlayerParamAerialFinish {
        PlayerParamAttackCollider hit;
        float ignoreSwingingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamAerialFinish* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamAerialFinish* pInstance);
        static void Clean(PlayerParamAerialFinish* pInstance);
    };

    struct PlayerParamBehindFinish {
        PlayerParamAttackCollider hit;
        float ignoreSwingingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamBehindFinish* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamBehindFinish* pInstance);
        static void Clean(PlayerParamBehindFinish* pInstance);
    };

    struct PlayerParamLowAltitudeJump {
        float upSpeed;
        float frontSpeed;
        float damperV;
        float damperH;
        float gravity;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamLowAltitudeJump* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamLowAltitudeJump* pInstance);
        static void Clean(PlayerParamLowAltitudeJump* pInstance);
    };

    struct PlayerParamPursuitFinish {
        PlayerParamAttackCollider hit;
        float ignoreSwingingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamPursuitFinish* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamPursuitFinish* pInstance);
        static void Clean(PlayerParamPursuitFinish* pInstance);
    };

    struct PlayerParamStompingFinish {
        PlayerParamAttackCollider hit;
        float ignoreSwingingTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayerParamStompingFinish* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayerParamStompingFinish* pInstance);
        static void Clean(PlayerParamStompingFinish* pInstance);
    };

    struct SonicParameters {
        CommonPackageSonic common;
        ModePackageSonic forwardView;
        WaterModePackage water;
        ModePackageSonic cyberspace;
        ModePackageSonic cyberspaceSV;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SonicParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SonicParameters* pInstance);
        static void Clean(SonicParameters* pInstance);
    };

    struct TailsParameters {
        CommonPackage common;
        ModePackageTails forwardView;
        WaterModePackage water;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TailsParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TailsParameters* pInstance);
        static void Clean(TailsParameters* pInstance);
    };

    struct CyloopSlashEffectBaseParameter {
        int32_t m_divideCircle;
        float m_circleRadius;
        float m_circleWaveCycle;
        float m_circleWaveWidth;
        float m_circleWaveSpeed;
        csl::math::Vector2 m_scale;
        csl::ut::VariableString m_textureName;
        float m_flowSpeed;
        float m_twistCycle;
        float m_rollCycle;
        float m_rollPhase;
        float m_alphaHeadDistance;
        float m_alphaTailDistance;
        float m_offsetCycle;
        float m_offsetPhase;
        float m_offsetRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyloopSlashEffectBaseParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyloopSlashEffectBaseParameter* pInstance);
        static void Clean(CyloopSlashEffectBaseParameter* pInstance);
    };

    struct ScriptParameter {
        uint32_t intervalMinuntes;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ScriptParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ScriptParameter* pInstance);
        static void Clean(ScriptParameter* pInstance);
    };

    struct TalkEventCameraPresetParameter {
        enum class GazePositionType : int8_t {
            Base = 0,
            Head = 1,
            Eye = 2,
            Center = 3,
        };

        bool enable;
        GazePositionType primaryTarget;
        GazePositionType secondaryTarget;
        float targetRatio;
        float rotateDegreePitch;
        float rotateDegreeYaw;
        float cameraOffsetRatio;
        float fovy;
        float targetOffsetX;
        float targetOffsetY;
        float targetOffsetZ;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TalkEventCameraPresetParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TalkEventCameraPresetParameter* pInstance);
        static void Clean(TalkEventCameraPresetParameter* pInstance);
    };

    struct TalkEventCameraPresetParameters {
        TalkEventCameraPresetParameter param[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(TalkEventCameraPresetParameters* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(TalkEventCameraPresetParameters* pInstance);
        static void Clean(TalkEventCameraPresetParameters* pInstance);
    };

    struct AmbBaseNoiseParameter {
        csl::ut::VariableString cueName;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbBaseNoiseParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbBaseNoiseParameter* pInstance);
        static void Clean(AmbBaseNoiseParameter* pInstance);
    };

    struct AmbInfo {
        csl::ut::VariableString cueName;
        float fadeInTime;
        float fadeOutTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbInfo* pInstance);
        static void Clean(AmbInfo* pInstance);
    };

    struct AmbNearPointParameter {
        csl::ut::VariableString cueName;
        float sensorRebootTime;
        float sensorRepositionTime;
        float lifeAreaRadius;
        float lifeTime;
        float fadeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbNearPointParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbNearPointParameter* pInstance);
        static void Clean(AmbNearPointParameter* pInstance);
    };

    struct AmbRelativeWindParameter {
        csl::ut::VariableString cueName;
        float speedThreshold;
        float fadeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbRelativeWindParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbRelativeWindParameter* pInstance);
        static void Clean(AmbRelativeWindParameter* pInstance);
    };

    struct AmbRiverParameter_Multiple3D {
        csl::ut::VariableString cueName;
        float attenuationDistance;
        float maxLevelPerPoint;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbRiverParameter_Multiple3D* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbRiverParameter_Multiple3D* pInstance);
        static void Clean(AmbRiverParameter_Multiple3D* pInstance);
    };

    struct AmbRiverParameter_Nearest {
        csl::ut::VariableString cueName;
        float sensorRadius;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbRiverParameter_Nearest* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbRiverParameter_Nearest* pInstance);
        static void Clean(AmbRiverParameter_Nearest* pInstance);
    };

    struct AmbSoundParameter {
        AmbInfo ambSoundInfo[8];
        AmbBaseNoiseParameter baseNoise;
        AmbRelativeWindParameter relativeWind;
        AmbNearPointParameter insect;
        AmbNearPointParameter grass;
        AmbRiverParameter_Nearest riverNearest;
        AmbRiverParameter_Multiple3D riverMultiple3D;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AmbSoundParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AmbSoundParameter* pInstance);
        static void Clean(AmbSoundParameter* pInstance);
    };

    struct AisacChangeInfo {
        float value;
        float fadeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AisacChangeInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AisacChangeInfo* pInstance);
        static void Clean(AisacChangeInfo* pInstance);
    };

    struct AisacChangeInfoList {
        AisacChangeInfo sunny;
        AisacChangeInfo cloudy;
        AisacChangeInfo rainy;
        AisacChangeInfo beginUnderWater;
        AisacChangeInfo finishUnderWater;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(AisacChangeInfoList* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(AisacChangeInfoList* pInstance);
        static void Clean(AisacChangeInfoList* pInstance);
    };

    struct BGMInfo {
        enum class Priority : int8_t {
            PRIORITY_LOW = 0,
            PRIORITY_DEFAULT = 1,
            PRIORITY_HIGH = 2,
            PRIORITY_SUPER_HIGH = 3,
            NUM_PRIORITY = 4,
            PRIORITY_INVALID = -1,
        };

        enum class InterruptType : int8_t {
            INTERRUPT_TYPE_STOP = 0,
            INTERRUPT_TYPE_PAUSE = 1,
            INTERRUPT_TYPE_OVERLAP = 2,
            NUM_INTERRUPT_TYPE = 3,
        };

        csl::ut::VariableString cueName;
        int32_t blockId;
        float fadeInTime;
        float fadeOutTime;
        float delayTime;
        csl::ut::VariableString aisacName;
        float aisacValue;
        float aisacFadeTime;
        bool isVolumeControl;
        bool isOverlapPlay;
        Priority priority;
        InterruptType interruptType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BGMInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BGMInfo* pInstance);
        static void Clean(BGMInfo* pInstance);
    };

    struct BGMTransitInfo {
        enum class InterruptType : int8_t {
            INTERRUPT_TYPE_STOP = 0,
            INTERRUPT_TYPE_PAUSE = 1,
            INTERRUPT_TYPE_OVERLAP = 2,
            NUM_INTERRUPT_TYPE = 3,
        };

        csl::ut::VariableString tagName;
        int32_t beforeId;
        int32_t beforeIdMax;
        int32_t afterId;
        InterruptType type;
        float fadeOutTime;
        float fadeInTime;
        float delayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BGMTransitInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BGMTransitInfo* pInstance);
        static void Clean(BGMTransitInfo* pInstance);
    };

    struct BGMSceneInfo {
        csl::ut::VariableString sceneName;
        int32_t bgmId;
        bool disableSameBgmId;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BGMSceneInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BGMSceneInfo* pInstance);
        static void Clean(BGMSceneInfo* pInstance);
    };

    struct BGMInfoParameter {
        BGMInfo changeBgmInfo[32];
        BGMTransitInfo transitBgmInfo[32];
        BGMSceneInfo sceneBgmInfo[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BGMInfoParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BGMInfoParameter* pInstance);
        static void Clean(BGMInfoParameter* pInstance);
    };

    struct BGMVolumeChangeInfo {
        float value;
        float delayTime;
        float fadeTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BGMVolumeChangeInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BGMVolumeChangeInfo* pInstance);
        static void Clean(BGMVolumeChangeInfo* pInstance);
    };

    struct BGMVolumeChangeInfoList {
        BGMVolumeChangeInfo playerStop;
        BGMVolumeChangeInfo playerWalk;
        BGMVolumeChangeInfo playerRun;
        BGMVolumeChangeInfo fishingHitIn;
        BGMVolumeChangeInfo fishingHitOut;
        BGMVolumeChangeInfo musicBoxIn;
        BGMVolumeChangeInfo musicBoxOut;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(BGMVolumeChangeInfoList* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(BGMVolumeChangeInfoList* pInstance);
        static void Clean(BGMVolumeChangeInfoList* pInstance);
    };

    struct CustomMusicInfo {
        enum class MusicType : int8_t {
            THEME_SONG = 0,
            OTHER = 1,
        };

        csl::ut::VariableString cueName;
        float fadeOutTiming;
        bool lock;
        MusicType musicType;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CustomMusicInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CustomMusicInfo* pInstance);
        static void Clean(CustomMusicInfo* pInstance);
    };

    struct CustomMusicTransitInfo {
        float fadeOutTime;
        float delayTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CustomMusicTransitInfo* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CustomMusicTransitInfo* pInstance);
        static void Clean(CustomMusicTransitInfo* pInstance);
    };

    struct CustomMusicParameter {
        CustomMusicTransitInfo transitInfo;
        CustomMusicInfo musicInfos[128];
        float idlingViewTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CustomMusicParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CustomMusicParameter* pInstance);
        static void Clean(CustomMusicParameter* pInstance);
    };

    struct SoundCommonParameter {
        float pauseFadeOutTime;
        float pauseFadeInTime;
        float enterCyberFadeOutTime;
        float leaveCyberResultFadeOutTime;
        BGMVolumeChangeInfoList bgmVolumeInfo;
        AisacChangeInfoList aisacInfo;
        BGMInfo changeBgmInfo[128];
        BGMTransitInfo transitBgmInfo[128];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(SoundCommonParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(SoundCommonParameter* pInstance);
        static void Clean(SoundCommonParameter* pInstance);
    };

    struct LabelData {
        enum class DisplayType : int8_t {
            Caption = 0,
            Tutorial = 1,
        };

        DisplayType display;
        csl::ut::VariableString label;
        float waitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(LabelData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(LabelData* pInstance);
        static void Clean(LabelData* pInstance);
    };

    struct Discussion {
        LabelData labels[20];
        bool isForcePlay;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(Discussion* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(Discussion* pInstance);
        static void Clean(Discussion* pInstance);
    };

    struct CaptionParameter {
        Discussion discussions[10];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CaptionParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CaptionParameter* pInstance);
        static void Clean(CaptionParameter* pInstance);
    };

    struct UICreditParameter {
        float LicenseInterval;
        float NameInterval;
        float PostInterval;
        float CompanyInterval;
        float LogoInterval;
        float WaitTime;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UICreditParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UICreditParameter* pInstance);
        static void Clean(UICreditParameter* pInstance);
    };

    struct FishCameraParam {
        csl::math::Vector3 position;
        csl::math::Vector3 target;
        float fovy;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FishCameraParam* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FishCameraParam* pInstance);
        static void Clean(FishCameraParam* pInstance);
    };

    struct UIFishiGuideConfig {
        FishCameraParam fishList[105];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UIFishiGuideConfig* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UIFishiGuideConfig* pInstance);
        static void Clean(UIFishiGuideConfig* pInstance);
    };

    struct ChallengeID1DimParameter {
        int32_t challengeID[40];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeID1DimParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeID1DimParameter* pInstance);
        static void Clean(ChallengeID1DimParameter* pInstance);
    };

    struct IDColor {
        int32_t id;
        csl::ut::Color<uint8_t> color;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IDColor* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IDColor* pInstance);
        static void Clean(IDColor* pInstance);
    };

    struct IslandMapParameter {
        ChallengeID1DimParameter challengeIDHorizonGridGroup[40];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandMapParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandMapParameter* pInstance);
        static void Clean(IslandMapParameter* pInstance);
    };

    struct UIMapParameter {
        IslandMapParameter islandMapParam[5];
        IDColor idColors[136];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(UIMapParameter* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(UIMapParameter* pInstance);
        static void Clean(UIMapParameter* pInstance);
    };

    struct PlayLog {
        csl::ut::VariableString stagecode;
        csl::ut::VariableString play;
        csl::ut::VariableString option;
        csl::math::Vector3 position;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayLog* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayLog* pInstance);
        static void Clean(PlayLog* pInstance);
    };

    struct PlayStatsSummary {
        csl::ut::VariableString stagecode;
        int32_t highTime;
        int32_t highScore;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayStatsSummary* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayStatsSummary* pInstance);
        static void Clean(PlayStatsSummary* pInstance);
    };

    struct PlayStatsData {
        int32_t enemies;
        int32_t damages;
        int32_t misses;
        int32_t retry;
        int32_t restart;
        csl::ut::Array<PlayLog> logs;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayStatsData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayStatsData* pInstance);
        static void Clean(PlayStatsData* pInstance);
    };

    struct PlayStats {
        csl::ut::VariableString username;
        csl::ut::VariableString time;
        csl::ut::Array<PlayStatsSummary> summaries;
        PlayStatsData playLog;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayStats* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayStats* pInstance);
        static void Clean(PlayStats* pInstance);
    };

    struct ScoreAndRnakData {
        uint32_t hightScore;
        uint16_t rank;
        uint16_t padding0;
        uint32_t reserved0;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ScoreAndRnakData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ScoreAndRnakData* pInstance);
        static void Clean(ScoreAndRnakData* pInstance);
    };

    struct ActionChainStruct {
        ScoreAndRnakData hightState[200];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ActionChainStruct* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ActionChainStruct* pInstance);
        static void Clean(ActionChainStruct* pInstance);
    };

    struct HeaderData {
        enum class Status : int8_t {
            STATUS_ZERO_FILL = 0,
            STATUS_INITIALIZED = 1,
        };

        enum class Sequence : int8_t {
            Island1 = 0,
            Island2 = 1,
            Island3 = 2,
            Island4 = 3,
            Island5 = 4,
            FinalBossBefore = 5,
            FinalBossAfter = 6,
        };

        enum class SaveDataIcon : int8_t {
            IconNoData = 0,
            IconIsland1 = 1,
            IconIsland2 = 2,
            IconIsland3 = 3,
            IconIsland4 = 4,
            IconIsland5 = 5,
            IconLastBoss = 6,
        };

        enum class AppVersion : uint8_t {
            AppVersion_1_10 = 0,
            AppVersion_1_20 = 1,
            AppVersion_1_30 = 2,
            AppVersion_1_40 = 3,
        };

        uint32_t signature;
        uint8_t version;
        Status status;
        uint8_t config;
        Sequence sequence;
        uint32_t playTime;
        SaveDataIcon icon;
        AppVersion appVersion;
        uint8_t config2;
        uint8_t reserved1;
        uint32_t saveDate;
        uint8_t index;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(HeaderData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(HeaderData* pInstance);
        static void Clean(HeaderData* pInstance);
    };

    struct CyberStageData {
        uint16_t flags;
        uint32_t bestTime;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyberStageData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyberStageData* pInstance);
        static void Clean(CyberStageData* pInstance);
    };

    struct CyberStageContainerData {
        CyberStageData actStages[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CyberStageContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CyberStageContainerData* pInstance);
        static void Clean(CyberStageContainerData* pInstance);
    };

    struct ArcadeData {
        HeaderData header;
        bool unlocked;
        CyberStageContainerData stages;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ArcadeData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ArcadeData* pInstance);
        static void Clean(ArcadeData* pInstance);
    };

    struct ChallengeBattleRushScoreData {
        uint32_t bestTime;
        uint32_t reserved0;
        uint32_t reserved1;
        uint32_t reserved2;
        uint32_t reserved3;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeBattleRushScoreData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeBattleRushScoreData* pInstance);
        static void Clean(ChallengeBattleRushScoreData* pInstance);
    };

    struct ChallengeBattleRushData {
        uint32_t status;
        ChallengeBattleRushScoreData scores[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeBattleRushData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeBattleRushData* pInstance);
        static void Clean(ChallengeBattleRushData* pInstance);
    };

    struct ChallengeBattleRushContainerData {
        ChallengeBattleRushData stages[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeBattleRushContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeBattleRushContainerData* pInstance);
        static void Clean(ChallengeBattleRushContainerData* pInstance);
    };

    struct ChallengeCyberStageData {
        enum class Value : int8_t {
            S = 0,
            A = 1,
            B = 2,
            C = 3,
            D = 4,
            Num = 5,
        };

        uint32_t status;
        uint32_t totalBestTime;
        Value totalBestRank;
        CyberStageContainerData stages;
        int32_t stageNos[32];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeCyberStageData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeCyberStageData* pInstance);
        static void Clean(ChallengeCyberStageData* pInstance);
    };

    struct ChallengeCyberStageContainerData {
        ChallengeCyberStageData stages[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeCyberStageContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeCyberStageContainerData* pInstance);
        static void Clean(ChallengeCyberStageContainerData* pInstance);
    };

    struct ChallengeData {
        HeaderData header;
        uint32_t status;
        ChallengeCyberStageContainerData cyberStage;
        ChallengeBattleRushContainerData battleRush;
        ChallengeBattleRushContainerData battleRushAll;
        uint32_t reserved0;
        uint32_t reserved1;
        uint32_t reserved2;
        uint32_t reserved3;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ChallengeData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ChallengeData* pInstance);
        static void Clean(ChallengeData* pInstance);
    };

    struct CharacterData {
        uint16_t numRings;
        uint8_t ringLevel;
        uint8_t speedLevel;
        uint8_t obtainChaosEmeralds;
        uint8_t hasChaosEmeralds;
        uint8_t skillLevel[30];
        uint8_t skillPointOld;
        uint8_t levelOld;
        uint16_t padding0;
        uint32_t expPoint;
        uint8_t powerLevel;
        uint8_t guardLevel;
        uint16_t boostGaugeLevel;
        uint32_t numPowerSeeds;
        uint32_t numGuardSeeds;
        uint16_t numFishCoins;
        uint16_t numFishTokens;
        uint16_t numGoldCards;
        uint16_t numSlotStars;
        float quickCyloopGauge;
        uint32_t practiceMaxCleared;
        uint32_t practiceMaxCombos;
        uint32_t flags;
        int16_t skillPoint;
        int16_t level;
        uint32_t dlcrsvExpPoint;
        uint32_t dlcrsvNumPowerSeeds;
        uint32_t dlcrsvNumGuardSeeds;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(CharacterData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(CharacterData* pInstance);
        static void Clean(CharacterData* pInstance);
    };

    struct WorldFlagData {
        uint32_t bitFlags[1024];
        int8_t byteFlags[1024];
        uint32_t intDatas[512];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WorldFlagData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WorldFlagData* pInstance);
        static void Clean(WorldFlagData* pInstance);
    };

    struct ExtraFlagData {
        uint32_t bitFlags[512];
        int8_t byteFlags[512];
        uint32_t intDatas[256];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ExtraFlagData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ExtraFlagData* pInstance);
        static void Clean(ExtraFlagData* pInstance);
    };

    struct ExtraFlagContainerData {
        WorldFlagData worldData;
        ExtraFlagData extraData;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ExtraFlagContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ExtraFlagContainerData* pInstance);
        static void Clean(ExtraFlagContainerData* pInstance);
    };

    struct FlagContainerData {
        uint32_t bitFlags[24];
        int8_t byteFlags[128];
        uint32_t intDatas[16];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FlagContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FlagContainerData* pInstance);
        static void Clean(FlagContainerData* pInstance);
    };

    struct FriendCharacterData {
        uint16_t numRings;
        uint8_t ringLevel;
        uint8_t speedLevel;
        uint32_t skill;
        uint32_t expPoint;
        uint16_t skillPoint;
        uint8_t boostGaugeLevel;
        uint8_t padding;
        uint32_t reserved0;
        uint32_t reserved1;
        uint32_t reserved2;
        uint32_t reserved3;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(FriendCharacterData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(FriendCharacterData* pInstance);
        static void Clean(FriendCharacterData* pInstance);
    };

    struct GamePlayData {
        enum class Status : int8_t {
            STATUS_NEWGAME = 0,
            STATUS_CONTINUE = 1,
        };

        enum class SequenceDeprecated : int8_t {
            Island1 = 0,
            Island2 = 1,
            Island3 = 2,
            Island4 = 3,
            Island5 = 4,
            FinalBossBefore = 5,
            FinalBossAfter = 6,
        };

        Status status;
        int8_t lastPlayedStageNo;
        uint8_t flags;
        SequenceDeprecated sequence;
        csl::math::Vector3 position;
        csl::math::Quaternion rotation;
        uint32_t day;
        uint32_t hour;
        uint32_t minute;
        float second;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GamePlayData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GamePlayData* pInstance);
        static void Clean(GamePlayData* pInstance);
    };

    struct IslandMapGridData {
        uint8_t x;
        uint8_t y;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandMapGridData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandMapGridData* pInstance);
        static void Clean(IslandMapGridData* pInstance);
    };

    struct IslandMapData {
        IslandMapGridData grid[136];
        uint16_t numReleaseGrids;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandMapData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandMapData* pInstance);
        static void Clean(IslandMapData* pInstance);
    };

    struct IslandStageData {
        csl::math::Vector3 destination;
        uint32_t flags;
        IslandMapData map;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandStageData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandStageData* pInstance);
        static void Clean(IslandStageData* pInstance);
    };

    struct IslandStageContainerData {
        IslandStageData islands[5];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(IslandStageContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(IslandStageContainerData* pInstance);
        static void Clean(IslandStageContainerData* pInstance);
    };

    struct WorldFlagContainerData {
        WorldFlagData worldDatas[5];
        WorldFlagData debugWorldData;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WorldFlagContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WorldFlagContainerData* pInstance);
        static void Clean(WorldFlagContainerData* pInstance);
    };

    struct ReservedData {
        uint8_t reserved[602864];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(ReservedData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(ReservedData* pInstance);
        static void Clean(ReservedData* pInstance);
    };

    struct StatValue {
        int32_t value;
        bool assigned;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StatValue* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StatValue* pInstance);
        static void Clean(StatValue* pInstance);
    };

    struct StatsContainerData {
        StatValue stats[3393];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(StatsContainerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(StatsContainerData* pInstance);
        static void Clean(StatsContainerData* pInstance);
    };

    struct WeatherTimerData {
        float duration;
        float time;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherTimerData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherTimerData* pInstance);
        static void Clean(WeatherTimerData* pInstance);
    };

    struct WeatherBlockData {
        enum class Type : int8_t {
            Sunny = 0,
            Cloudy = 1,
            Rainy = 2,
            SandStorm = 3,
            MeteorShower = 4,
            Num = 5,
        };

        enum class Status : int8_t {
            None = 0,
            Wait = 1,
            Active = 2,
            External = 3,
        };

        Type weather;
        uint32_t hour;
        uint32_t minute;
        float second;
        Status status;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherBlockData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherBlockData* pInstance);
        static void Clean(WeatherBlockData* pInstance);
    };

    struct WeatherData {
        enum class Type : int8_t {
            Sunny = 0,
            Cloudy = 1,
            Rainy = 2,
            SandStorm = 3,
            MeteorShower = 4,
            Num = 5,
        };

        Type currentWeather;
        Type prevWeather;
        WeatherTimerData timer;
        WeatherBlockData block;
        int32_t stageNo;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(WeatherData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(WeatherData* pInstance);
        static void Clean(WeatherData* pInstance);
    };

    struct GameData {
        HeaderData header;
        GamePlayData gameplay;
        CharacterData character;
        IslandStageContainerData islands;
        CyberStageContainerData stages;
        FlagContainerData flags;
        WorldFlagContainerData worldFlags;
        ExtraFlagContainerData extraFlags;
        ActionChainStruct actionChain;
        ReservedData reserved;
        StatsContainerData stats;
        WeatherData weather;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameData* pInstance);
        static void Clean(GameData* pInstance);
    };

    struct PlayLogCoordData {
        uint16_t time;
        uint16_t x;
        uint16_t z;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayLogCoordData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayLogCoordData* pInstance);
        static void Clean(PlayLogCoordData* pInstance);
    };

    struct PlayLogEventData {
        enum class EventType : int8_t {
            InvalidEvent = -1,
            Dead = 0,
            BeginStage = 1,
            EndStage = 2,
            ReleaseLightPillar = 3,
            ObtainChaosEmerald = 4,
            ContactMiniboss = 5,
            DefeatMiniboss = 6,
            BeginCyberStage = 7,
            EndCyberStage = 8,
            CompleteCyberStage = 9,
            RestartCyberStage = 10,
            GiveupCyberStage = 11,
            OpenTreasureChest = 12,
            AccessRingSensor = 13,
        };

        PlayLogCoordData coord;
        EventType eventType;
        int8_t option;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayLogEventData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayLogEventData* pInstance);
        static void Clean(PlayLogEventData* pInstance);
    };

    struct PlayLogData {
        uint32_t numFootMarks;
        uint32_t footMarksIndex;
        PlayLogCoordData footmarks[36000];
        uint32_t numEvents;
        uint32_t eventsIndex;
        PlayLogEventData events[50000];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(PlayLogData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(PlayLogData* pInstance);
        static void Clean(PlayLogData* pInstance);
    };

    struct GameDataInPlayLog {
        HeaderData header;
        GamePlayData gameplay;
        CharacterData character;
        IslandStageContainerData islands;
        CyberStageContainerData stages;
        FlagContainerData flags;
        WorldFlagContainerData worldFlags;
        PlayLogData playlog;
        StatsContainerData stats;
        WeatherData weather;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(GameDataInPlayLog* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(GameDataInPlayLog* pInstance);
        static void Clean(GameDataInPlayLog* pInstance);
    };

    struct OptionAudioData {
        enum class MusicSelect : int8_t {
            MUSIC_SELECT_ON = 0,
            MUSIC_SELECT_OFF = 1,
        };

        enum class MusicSelectType : int8_t {
            MUSIC_SELECT_NORMAL = 0,
            MUSIC_SELECT_SHUFFLE = 1,
            MUSIC_SELECT_LOOP = 2,
        };

        uint8_t masterVolume;
        uint8_t sfxVolume;
        uint8_t musicVolume;
        uint8_t voiceVolume;
        MusicSelect musicSelectEnable;
        MusicSelectType musicSelectType;
        uint8_t flags;
        uint8_t padding[1];
        uint32_t reserved[3];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OptionAudioData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OptionAudioData* pInstance);
        static void Clean(OptionAudioData* pInstance);
    };

    struct OptionCameraData {
        enum class MovementStyle : int8_t {
            PadSimulate = 0,
            Aiming = 1,
        };

        float rotateSpeedPad;
        float rotateSpeedVertMouse;
        float rotateSpeedHorzMouse;
        float reticleSpeedPad;
        float reticleSpeedVertMouse;
        float reticleSpeedHorzMouse;
        uint8_t rotateSpeedRate;
        uint8_t distanceRate;
        uint8_t fovyRate;
        MovementStyle movementStyle;
        uint8_t config;
        uint32_t reserved[4];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OptionCameraData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OptionCameraData* pInstance);
        static void Clean(OptionCameraData* pInstance);
    };

    struct OptionControlsData {
        enum class InputKey : int32_t {
            Invalid = -1,
            GamePad_DPadLeft = 0,
            GamePad_DPadRight = 1,
            GamePad_DPadUp = 2,
            GamePad_DPadDown = 3,
            GamePad_ButtonLeft = 4,
            GamePad_ButtonRight = 5,
            GamePad_ButtonTop = 6,
            GamePad_ButtonBottom = 7,
            GamePad_LeftX = 8,
            GamePad_LeftY = 9,
            GamePad_RightX = 10,
            GamePad_RightY = 11,
            GamePad_LeftShoulder = 12,
            GamePad_LeftTrigger = 13,
            GamePad_LeftClick = 14,
            GamePad_RightShoulder = 15,
            GamePad_RightTrigger = 16,
            GamePad_RightClick = 17,
            GamePad_LeftStickLeft = 18,
            GamePad_L = 19,
            GamePad_LeftStickUp = 20,
            GamePad_LeftStickDown = 21,
            GamePad_RightStickLeft = 22,
            GamePad_RightStickRight = 23,
            GamePad_RightStickUp = 24,
            GamePad_RightStickDown = 25,
            GamePad_Start = 26,
            GamePad_Select = 27,
            GamePad_LeftSideTriggerLeft = 28,
            GamePad_LeftSideTriggerRight = 29,
            GamePad_RightSideTriggerLeft = 30,
            GamePad_RightSideTriggerRight = 31,
            Keyboard_Nop = 32,
            Keyboard_A = 33,
            Keyboard_B = 34,
            Keyboard_C = 35,
            Keyboard_D = 36,
            Keyboard_E = 37,
            Keyboard_F = 38,
            Keyboard_G = 39,
            Keyboard_H = 40,
            Keyboard_I = 41,
            Keyboard_J = 42,
            Keyboard_K = 43,
            Keyboard_L = 44,
            Keyboard_M = 45,
            Keyboard_N = 46,
            Keyboard_O = 47,
            Keyboard_P = 48,
            Keyboard_Q = 49,
            Keyboard_R = 50,
            Keyboard_S = 51,
            Keyboard_T = 52,
            Keyboard_U = 53,
            Keyboard_V = 54,
            Keyboard_W = 55,
            Keyboard_X = 56,
            Keyboard_Y = 57,
            Keyboard_Z = 58,
            Keyboard_1 = 59,
            Keyboard_2 = 60,
            Keyboard_3 = 61,
            Keyboard_4 = 62,
            Keyboard_5 = 63,
            Keyboard_6 = 64,
            Keyboard_7 = 65,
            Keyboard_8 = 66,
            Keyboard_9 = 67,
            Keyboard_0 = 68,
            Keyboard_Enter = 69,
            Keyboard_Escape = 70,
            Keyboard_BackSpace = 71,
            Keyboard_Tab = 72,
            Keyboard_Spacebar = 73,
            Keyboard_Minus = 74,
            Keyboard_Accent = 75,
            Keyboard_Atmark = 76,
            Keyboard_LeftBracket = 77,
            Keyboard_BackSlash = 78,
            Keyboard_RightBracket = 79,
            Keyboard_SemiColon = 80,
            Keyboard_Colon = 81,
            Keyboard_Comma = 82,
            Keyboard_Period = 83,
            Keyboard_Slash = 84,
            Keyboard_CapsLock = 85,
            Keyboard_F1 = 86,
            Keyboard_F2 = 87,
            Keyboard_F3 = 88,
            Keyboard_F4 = 89,
            Keyboard_F5 = 90,
            Keyboard_F6 = 91,
            Keyboard_F7 = 92,
            Keyboard_F8 = 93,
            Keyboard_F9 = 94,
            Keyboard_F10 = 95,
            Keyboard_F11 = 96,
            Keyboard_F12 = 97,
            Keyboard_Insert = 98,
            Keyboard_Home = 99,
            Keyboard_PageUp = 100,
            Keyboard_Delete = 101,
            Keyboard_End = 102,
            Keyboard_PageDown = 103,
            Keyboard_LeftArrow = 104,
            Keyboard_RightArrow = 105,
            Keyboard_UpArrow = 106,
            Keyboard_DownArrow = 107,
            Keyboard_PadSlash = 108,
            Keyboard_PadAsterisk = 109,
            Keyboard_PadMinus = 110,
            Keyboard_PadPlus = 111,
            Keyboard_PadEnter = 112,
            Keyboard_PadNum1 = 113,
            Keyboard_PadNum2 = 114,
            Keyboard_PadNum3 = 115,
            Keyboard_PadNum4 = 116,
            Keyboard_PadNum5 = 117,
            Keyboard_PadNum6 = 118,
            Keyboard_PadNum7 = 119,
            Keyboard_PadNum8 = 120,
            Keyboard_PadNum9 = 121,
            Keyboard_PadNum0 = 122,
            Keyboard_PadPeriod = 123,
            Keyboard_LeftCtrl = 124,
            Keyboard_RightCtrl = 125,
            Keyboard_LeftShift = 126,
            Keyboard_RightShift = 127,
            Keyboard_LeftAlt = 128,
            Keyboard_RightAlt = 129,
            Keyboard_LeftGui = 130,
            Keyboard_RightGui = 131,
            Mouse_X = 132,
            Mouse_Y = 133,
            Mouse_ButtonLeft = 134,
            Mouse_ButtonRight = 135,
            Mouse_ButtonMiddle = 136,
            Mouse_ButtonX1 = 137,
            Mouse_ButtonX2 = 138,
            Mouse_Wheel = 139,
            Mouse_WheelUp = 140,
            Mouse_WheelDown = 141,
            Keyboard_Grave = 142,
            Keyboard_Equals = 143,
            Keyboard_Apostrophe = 144,
            Keyboard_OEM_102 = 145,
            Keyboard_ABNT_C1 = 146,
            Keyboard_ABNT_C2 = 147,
            Keyboard_Shift = 148,
            Keyboard_Ctrl = 149,
            NumAppKeys = 150,
        };

        InputKey padMappings[62];
        InputKey mainMappings[62];
        InputKey subMappings[62];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OptionControlsData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OptionControlsData* pInstance);
        static void Clean(OptionControlsData* pInstance);
    };

    struct OptionGamePlayData {
        enum class VoiceLanguageType : int8_t {
            VOICE_LANGUAGE_ENGLISH = 0,
            VOICE_LANGUAGE_FRENCH = 1,
            VOICE_LANGUAGE_ITALIAN = 2,
            VOICE_LANGUAGE_GERMAN = 3,
            VOICE_LANGUAGE_SPANISH = 4,
            VOICE_LANGUAGE_JAPANESE = 5,
            NUM_VOICE_LANGUAGES = 6,
        };

        enum class LanguageType : int8_t {
            LANGUAGE_ENGLISH = 0,
            LANGUAGE_FRENCH = 1,
            LANGUAGE_ITALIAN = 2,
            LANGUAGE_GERMAN = 3,
            LANGUAGE_SPANISH = 4,
            LANGUAGE_POLISH = 5,
            LANGUAGE_PORTUGUESE = 6,
            LANGUAGE_RUSSIAN = 7,
            LANGUAGE_JAPANESE = 8,
            LANGUAGE_ZHONGWEN = 9,
            LANGUAGE_ZHONGWEN_S = 10,
            LANGUAGE_KOREAN = 11,
            NUM_LANGUAGES = 12,
        };

        enum class VibrationLevel : int8_t {
            None = 0,
            Low = 1,
            Medium = 2,
            High = 3,
        };

        enum class Value : int8_t {
            Easy = 0,
            Normal = 1,
            Hard = 2,
            Num = 3,
            VeryHard = 3,
            NumInVeryHard = 4,
        };

        uint8_t initialSpeedRate;
        uint8_t boostInitialSpeedRate;
        uint8_t acceleRate;
        uint8_t maxSpeedRate;
        uint8_t minTurnSpeedRate;
        uint8_t boostMinTurnSpeedRate;
        uint8_t rotateForceRate;
        uint8_t bumpJumpGravityRate;
        VoiceLanguageType speech;
        LanguageType text;
        VibrationLevel vibrationLevel;
        Value diffculty;
        uint8_t config;
        uint8_t padSensibilityRate;
        uint8_t mouseSensibilityRate;
        uint8_t neutralDecelerationRate;
        uint8_t dlcSonicCostume;
        uint8_t dlcKodamaModel;
        uint8_t dlcRingSE;
        uint8_t dlcConfig;
        uint8_t config2;
        uint8_t islandVisual;
        uint8_t npcVisual;
        uint8_t baseAirDragScaleRate;
        uint32_t status;
        uint32_t reserved2[1];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OptionGamePlayData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OptionGamePlayData* pInstance);
        static void Clean(OptionGamePlayData* pInstance);
    };

    struct OptionGraphicsData {
        enum class Resolution : int8_t {
            Reso3840x2160 = 0,
            Reso2560x1440 = 1,
            Reso1920x1080 = 2,
            Reso1280x720 = 3,
        };

        enum class GraphicQuality : int8_t {
            High = 0,
            Low = 1,
            Custom = 2,
        };

        enum class FrameRate : int8_t {
            FPS60 = 0,
            FPS30 = 1,
            FPSNoLimit = 2,
        };

        enum class AntiAliasing : int8_t {
            TAA = 0,
            FXAA = 1,
            None = 2,
        };

        enum class AnisotropicFiltering : int8_t {
            None = 0,
            Low = 1,
            Medium = 2,
            High = 3,
        };

        enum class DOF : int8_t {
            Disabled = 0,
            Low = 1,
            Medium = 2,
            High = 3,
        };

        enum class Bloom : int8_t {
            High = 0,
            Low = 1,
        };

        enum class Shadow : int8_t {
            High = 0,
            Low = 1,
        };

        enum class VolumetricLight : int8_t {
            High = 0,
            Low = 1,
        };

        enum class RederingScale : int8_t {
            High = 0,
            Medium = 1,
            Low = 2,
        };

        Resolution resolution;
        GraphicQuality graphicQuality;
        FrameRate frameRate;
        uint8_t brightness;
        AntiAliasing antiAliasing;
        AnisotropicFiltering anisotropicFiltering;
        DOF depthOfField;
        Bloom bloom;
        uint8_t config;
        uint8_t hudVisible;
        Shadow shadow;
        VolumetricLight volumetricLight;
        RederingScale renderingScale;
        uint8_t reserved1[1];
        uint16_t width;
        uint16_t height;
        uint16_t padding0;
        uint32_t reserved[2];

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OptionGraphicsData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OptionGraphicsData* pInstance);
        static void Clean(OptionGraphicsData* pInstance);
    };

    struct OptionData {
        HeaderData header;
        OptionGamePlayData gameplay;
        OptionControlsData controls;
        OptionCameraData camera;
        OptionAudioData audio;
        OptionGraphicsData graphics;

        static const hh::fnd::RflTypeInfo staticTypeInfo;
        static const hh::fnd::RflClass staticClass;
    private:
        static void Construct(OptionData* pInstance, csl::fnd::IAllocator* pAllocator);
        static void Finish(OptionData* pInstance);
        static void Clean(OptionData* pInstance);
    };

}
